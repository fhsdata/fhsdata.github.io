"use strict";(self.webpackChunkreact_native_website=self.webpackChunkreact_native_website||[]).push([[11477],{30010:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2023/12/06/0.73-debugging-improvements-stable-symlinks","metadata":{"permalink":"/blog/2023/12/06/0.73-debugging-improvements-stable-symlinks","source":"@site/blog/2023-12-06-0.73-debugging-improvements-stable-symlinks.md","title":"React Native 0.73 - Debugging Improvements, Stable Symlink Support, and more","description":"Today we\'re releasing React Native 0.73! This release adds improvements to debugging with Hermes, stable symlink support, Android 14 support, and new experimental features. We are also deprecating legacy debugging features, and are releasing the next pillar of the New Architecture: Bridgeless Mode!","date":"2023-12-06T00:00:00.000Z","formattedDate":"December 6, 2023","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"},{"label":"release","permalink":"/blog/tags/release"},{"label":"debugging","permalink":"/blog/tags/debugging"}],"readingTime":9.565,"hasTruncateMarker":true,"authors":[{"name":"Marek Fo\u0159t","title":"Software Engineer at Shopify","url":"https://twitter.com/marekfort","imageURL":"https://github.com/fortmarek.png","key":"fortmarek"},{"name":"Thibault Malbranche","title":"Lead Mobile Engineer at Brigad","url":"https://twitter.com/titozzz","imageURL":"https://github.com/titozzz.png","key":"titozzz"},{"name":"Hur Ali","title":"Software Engineer at Callstack","url":"https://twitter.com/hurali97","imageURL":"https://github.com/hurali97.png","key":"hurali"},{"name":"Luna Wei","title":"Software Engineer at Meta","url":"https://twitter.com/lunaleaps","imageURL":"https://github.com/lunaleaps.png","key":"lunaleaps"},{"name":"Alex Hunt","title":"Software Engineer at Meta","url":"https://twitter.com/alxhnt","imageURL":"https://github.com/huntie.png","key":"huntie"}],"frontMatter":{"title":"React Native 0.73 - Debugging Improvements, Stable Symlink Support, and more","authors":["fortmarek","titozzz","hurali","lunaleaps","huntie"],"tags":["announcement","release","debugging"],"date":"2023-12-06T00:00:00.000Z"},"unlisted":false,"nextItem":{"title":"React Native 0.72 - Symlink Support, Better Errors, and more","permalink":"/blog/2023/06/21/0.72-metro-package-exports-symlinks"}},"content":"Today we\'re releasing React Native 0.73! This release adds improvements to debugging with Hermes, stable symlink support, Android 14 support, and new experimental features. We are also deprecating legacy debugging features, and are releasing the next pillar of the New Architecture: Bridgeless Mode!\\n\\n### Highlights\\n\\n- [Debugging Improvements](/blog/2023/12/06/0.73-debugging-improvements-stable-symlinks#debugging-improvements)\\n- [Stable Symlink Support in Metro](/blog/2023/12/06/0.73-debugging-improvements-stable-symlinks#stable-symlink-support-in-metro)\\n- [Kotlin Template on Android](/blog/2023/12/06/0.73-debugging-improvements-stable-symlinks#kotlin-template-on-android)\\n- [Android 14 Support](/blog/2023/12/06/0.73-debugging-improvements-stable-symlinks#android-14-support)\\n- [New Architecture Updates](/blog/2023/12/06/0.73-debugging-improvements-stable-symlinks#new-architecture-updates)\\n- [Deprecated Debugging Features](/blog/2023/12/06/0.73-debugging-improvements-stable-symlinks#deprecated-debugging-features)\\n\\n### Breaking Changes\\n\\n- [Babel Package Renames](/blog/2023/12/06/0.73-debugging-improvements-stable-symlinks#babel-package-renames)\\n- [Other Breaking Changes](/blog/2023/12/06/0.73-debugging-improvements-stable-symlinks#other-breaking-changes)\\n- [React Native CLI Changes](/blog/2023/12/06/0.73-debugging-improvements-stable-symlinks#react-native-cli-changes)\\n- [Deprecated @types/react-native](/blog/2023/12/06/0.73-debugging-improvements-stable-symlinks#deprecated-typesreact-native)\\n\\n\x3c!--truncate--\x3e\\n\\n## Highlights\\n\\n### Debugging Improvements\\n\\nThe React Native and Hermes teams are committed to improving the debugging experience in React Native. In 0.73, we\'re happy to share some initial progress out of this ongoing investment.\\n\\n#### Console Log History in Hermes\\n\\n`console.log()` is an ever popular way for developers to quickly debug their JavaScript code. In previous releases, console logs in React Native apps would not be recorded until a debugger was connected. This made it hard to observe logs that occur early during app load.\\n\\nIn React Native 0.73 we\'ve addressed this issue. Hermes now captures all `console.log()` calls in the background, which will be sent to the Console tab when a debugger is first connected \u2014 matching the debugging experience in web browsers. This new behaviour works across Flipper, Chrome DevTools connected to Hermes, and the experimental New Debugger.\\n\\n#### Updated Debugging Docs\\n\\nWe\'ve refreshed the [Debugging](/docs/debugging) section of our docs, which now includes up-to-date information on how to connect all supported debuggers, more info on React DevTools, and refreshed visuals.\\n\\n![Overview of the Debugging docs as of 0.73](/blog/assets/0.73-debugging-docs.jpg)\\n\\n#### Experimental New Debugger\\n\\nThe React Native team is working on a new JavaScript debugger experience, intended to replace Flipper, with a Technical Preview available as of React Native 0.73. The new debugger opens immediately, and features a stripped-back Chrome DevTools UI customized for debugging React Native with Hermes.\\n\\n:::note\\nThe new debugger is **experimental** and has some [known issues](https://github.com/react-native-community/discussions-and-proposals/discussions/733) we are actively working to solve in a future release of React Native. If you are trying it out, please use the [same discussion thread](https://github.com/react-native-community/discussions-and-proposals/discussions/733) to report feedback.\\n:::\\n\\n![The new debugger frontend opened to the \\"Welcome\\" pane](/docs/assets/debugging-debugger-welcome.jpg)\\n\\nLearn more about enabling this experience [in the docs](/docs/next/debugging?js-debugger=new-debugger#opening-the-debugger).\\n\\n### Stable Symlink Support in Metro\\n\\nSupport for resolving symlinks in Metro is now **enabled by default**. Symlink support enables React Native to work with monorepo setups when containing directories are configured with [`watchFolders`](https://metrobundler.dev/docs/configuration/#watchfolders).\\n\\nSymlinks are deeply represented in Metro\'s internals, meaning they work with features such as [Fast Refresh](/docs/fast-refresh), and incur little performance overhead during bundling. Symlinks are supported on all desktop platforms, with and without Watchman.\\n\\n:::info\\n\\n#### Monorepo workarounds\\n\\nWe are aware there are still edge cases when using React Native in a monorepo layout. We have planned work to address some of these, which didn\'t quite make it into 0.73 \u2014\xa0but which we aim to ship as soon as possible.\\n\\n**For React Native template projects (`npx react-native init`)**, you will need to configure any [`watchFolders`](https://metrobundler.dev/docs/configuration/#watchfolders) outside of the project root in order for Metro to discover them ([more info](https://metrobundler.dev/docs/configuration/#unstable_enablesymlinks-experimental)). You may also need to update file paths if your `react-native` dependency is installed to a folder at a different level.\\n\\n**For Expo apps**, support for Yarn (Classic) workspaces is configured out of the box. See also the [Work with monorepos](https://docs.expo.dev/guides/monorepos/) guide in the Expo docs.\\n:::\\n\\n### Kotlin Template on Android\\n\\nWe\'re excited to announce that, starting from 0.73, Kotlin is now the **recommended language** for Android apps built with React Native. This follows the direction that the Android ecosystem has been moving in for several years and allows you to write your app using a modern language.\\n\\nWe\'ve updated React Native\'s template on Android to use Kotlin instead of Java. The new `MainActivity.kt` and `MainApplication.kt` files are 36% smaller in size.\\n\\nThe [Upgrade Helper](https://react-native-community.github.io/upgrade-helper/) has also been updated to make it easier to migrate your `.java` files to `.kt` files.\\nIf you\'ve previously modified the Java files in your project and you need support migrating them to Kotlin, you can use the `Code > Convert Java file to Kotlin File` utility of Android Studio (also accessible with the shortcut <kbd>Cmd \u2318</kbd> + <kbd>Shift \u21e7</kbd> + <kbd>Option \u2325</kbd> + <kbd>K</kbd>).\\n\\n### Android 14 Support\\n\\nWe\'ve updated React Native to fully support Android 14. Starting from 0.73, React Native developers can now target the latest Android SDK version, [API Level 34](https://developer.android.com/guide/topics/manifest/uses-sdk-element?hl=en#ApiLevels) (_Upside Down Cake_).\\n\\n#### Java 17 and Android Gradle Plugin upgrade\\n\\nIn order to support Android 14, we\'ve updated the version of Android Gradle Plugin (AGP) used to build Android apps from `7.4.x` to `8.1.x`.\\n\\nThis major version bump of AGP comes with a series of breaking changes that are available in the release notes from Google ([8.0.0](https://developer.android.com/build/releases/past-releases/agp-8-0-0-release-notes) and [8.1.0](https://developer.android.com/build/releases/past-releases/agp-8-1-0-release-notes)).\\n\\nMost importantly, **Java 17** is now a requirement to build Android apps. You can update your Java version to 17 by running:\\n\\n```sh\\nbrew tap homebrew/cask-versions\\nbrew install --cask zulu17\\n```\\n\\nand by updating your `JAVA_HOME` as documented in the [Getting Started guide](https://reactnative.dev/docs/environment-setup).\\n\\nIf you\'re a library developer, your libraries should work with React Native 0.73 without changes. Earlier this year, [we published a note](https://github.com/react-native-community/discussions-and-proposals/issues/671) with a clarification on what the AGP bump means for you as a library author.\\n\\n#### Grant partial access to photos and videos\\n\\n[Selected Photos Access](https://developer.android.com/about/versions/14/changes/partial-photo-video-access) allows Android 14 users to grant apps access to specific items in their media library, rather than access to all media. In 0.73, React Native apps now support this capability, by using the `READ_MEDIA_VISUAL_USER_SELECTED` permission in the [`PermissionsAndroid`](/docs/permissionsandroid) API.\\n\\n![Selected Photos Access in Android 14](/blog/assets/0.73-android-media-picker.jpg)\\n\\n#### Min SDK bump\\n\\nReact Native 0.73 will be the final version which supports Android 5.0 (API Level 21). The next version of React Native will have a minimum SDK version of 23 (Android 6.0). Read more about the upcoming changes to min SDK bump [here](https://github.com/react-native-community/discussions-and-proposals/discussions/740).\\n\\n### New Architecture Updates\\n\\nWe continue the rollout of React Native\'s New Architecture, to make it available to everyone in the Open Source community.\\n\\nSince React Native 0.68, both the New Renderer (Fabric) and the New Native Module System (TurboModules) were available to users to experiment and evaluate. We want to thank the community for the feedback we\'ve received so far.\\n\\nToday we\'re releasing another piece of the New Architecture: [**Bridgeless Mode**](https://github.com/reactwg/react-native-new-architecture/discussions/154). Up until now, when you enable the New Architecture in your app, the Bridge would still be available to support backward compatibility with older components and modules. However, our vision is to fully sunset the bridge. Starting from React Native 0.73, you can enable Bridgeless Mode which will disable the creation of the bridge entirely.\\n\\nTogether with Bridgeless Mode, we\'re shipping a Native Module Interop Layer, that will allow you to reuse your old modules when in Bridgeless Mode. The [Renderer Interop Layer](https://github.com/reactwg/react-native-new-architecture/discussions/135) introduced in React Native 0.72 has also been adapted to work with Bridgeless Mode.\\n\\nAs with the rest of the New Architecture, Bridgeless Mode is initially experimental. We invite interested users to enable it and report any problems and incompatibilities you face in the [New Architecture working group](https://github.com/reactwg/react-native-new-architecture/discussions).\\n\\n### Deprecated Debugging Features\\n\\n#### Flipper \u2194 React Native integration\\n\\nWe are gradually moving away from Flipper as the default tool for debugging React Native apps. In 0.73, this begins by deprecating the native Flipper integration included with React Native (bootstrap code which wires up Flipper\'s core plugins). We will be removing this integration and dependency in the next release \u2014\xa0meaning parts of Flipper such as the Network plugin will cease to work.\\n\\n**Unchanged**: Flipper as a standalone product for native app debugging will continue to exist. Even after its removal from new React Native projects in the future, developers will be able to [manually add Flipper to their app](https://fbflipper.com/docs/getting-started/android-native/) if they wish.\\n\\nFor more information on why we are moving away from Flipper, [view the RFC](https://github.com/react-native-community/discussions-and-proposals/blob/main/proposals/0641-decoupling-flipper-from-react-native-core.md).\\n\\n#### Remote JavaScript Debugging\\n\\nRemote JavaScript Debugging is a legacy debugging mode that connects an external web browser (Chrome) to your app and runs your JavaScript code inside a web page, i.e. `http://localhost:8081/debugger-ui`. This model could lead to inconsistent app behaviour while debugging, and is incompatible with native modules under the New Architecture.\\n\\nIn 0.73, [Remote JavaScript Debugging is deprecated](https://github.com/react-native-community/discussions-and-proposals/discussions/734) and has been removed from the Dev Menu. Enabling the remote debugger must now be done manually via the `NativeDevSettings` API. Doing this is covered in the [Other Debugging Methods docs](/docs/next/other-debugging-methods#remote-js-debugging).\\n\\n:::info\\nRemote JavaScript Debugging was previously the default debugging experience for apps using JavaScriptCore (JSC). We recommend [Safari Developer Tools (direct JSC debugging)](/docs/next/other-debugging-methods#safari-developer-tools-direct-jsc-debugging) instead, for iOS apps.\\n\\nWe recommend using [Hermes](/docs/hermes) for a consistent debugging experience on all platforms.\\n:::\\n\\n## Breaking Changes\\n\\n### Babel Package Renames\\n\\nWe\'ve relocated two Babel-related packages out of Metro and into React Native\'s repository and versioning scheme, enabling us to simplify maintenance and upgrades. The new versions of these packages support New Architecture features in 0.73, meaning these dependencies must be updated.\\n\\nPlease follow the [Upgrade Helper](https://react-native-community.github.io/upgrade-helper/) when upgrading, to ensure you have updated these dependencies. Some packages have been renamed:\\n\\n| Old Package Name                       | New Package Name                        |\\n| -------------------------------------- | --------------------------------------- |\\n| `metro-react-native-babel-preset`      | `@react-native/babel-preset`            |\\n| `metro-react-native-babel-transformer` | `@react-native/metro-babel-transformer` |\\n\\n:::info\\n`@react-native/babel-preset` now includes `@react-native/babel-plugin-codegen`, this no longer needs to be specified separately in your Babel config file.\\n:::\\n\\n### Other Breaking Changes\\n\\nThese are some of the key breaking changes in 0.73. Please consult the [full changelog](https://github.com/facebook/react-native/blob/main/CHANGELOG.md) for the complete list of breaking changes.\\n\\n- Raise minimum Node.js requirement to 18.x ([#37709](https://github.com/facebook/react-native/pull/37709)) (see also [Node.js 16 EOL](https://nodejs.org/en/blog/announcements/nodejs16-eol)).\\n- The template now uses TypeScript 5.0 ([#36862](https://github.com/facebook/react-native/pull/36862)).\\n  - React Native types continue working on TypeScript 4.8.\\n- **Android**: Java 17 is now a requirement to build Android apps ([see above](#java-17-and-android-gradle-plugin-upgrade)).\\n- **Android**: Major bump of Fresco to 3.0 ([#38275](https://github.com/facebook/react-native/pull/38275)).\\n- **iOS**: Raise minimum iOS version to 13.4 ([#36795](https://github.com/facebook/react-native/pull/36795)).\\n- **iOS**: Metro will no longer be automatically started when running builds via Xcode ([#38242](https://github.com/facebook/react-native/pull/38242)).\\n\\nFor library authors:\\n\\n- **Android**: Bump to AGP 8.1.1 ([discussion](https://github.com/react-native-community/discussions-and-proposals/issues/671))\\n\\n### React Native CLI Changes\\n\\n#### Highlighted breaking changes\\n\\n- Change default task prefix in `build-android` command. From now on, when you run `build-android`, the `bundle` task will be run instead of `assemble` ([#1913](https://github.com/react-native-community/cli/pull/1913)).\\n- Remove fallback flow for Metro config defaults ([#1972](https://github.com/react-native-community/cli/pull/1972)).\\n  - The [updated `metro.config.js` format](/blog/2023/06/21/0.72-metro-package-exports-symlinks#new-metroconfigjs-setup) from 0.72 is now required in 0.73, as we have removed the fallback copy of these defaults from CLI.\\n- Remove `--configuration` option from `run-ios` (replaced with `--mode`) ([#2028](https://github.com/react-native-community/cli/pull/2028)).\\n- Remove `--variant` option from `build-android` command (replaced with `--mode`) ([#2026](https://github.com/react-native-community/cli/pull/2026)).\\n\\n[See full changelog for v12.0.0](https://github.com/react-native-community/cli/releases/tag/v12.0.0).\\n\\n### Deprecated `@types/react-native`\\n\\nAs mentioned in [First-class Support for TypeScript](/blog/2023/01/03/typescript-first#declarations-shipped-with-react-native), we have shipped TypeScript types with `react-native` since 0.71 and we are now deprecating `@types/react-native` for 0.73.\\n\\nWe will not ship any future patches for existing versions. The guidance is to migrate away from `@types/react-native`. See instructions on [how to migrate](/blog/2023/01/03/typescript-first#how-to-migrate).\\n\\n## Acknowledgements\\n\\nReact Native 0.73 contains over [2259 commits](https://github.com/facebook/react-native/compare/v0.72.7...v0.73.0) from 68 contributors. Thanks for all your hard work!\\n\\n## Upgrade to 0.73\\n\\nPlease use the [React Native Upgrade Helper](https://react-native-community.github.io/upgrade-helper/) to view code changes between React Native versions for existing projects, in addition to the [Upgrading docs](/docs/upgrading). You can also create a new project with `npx react-native@latest init MyProject`.\\n\\nIf you use Expo, React Native 0.73 will be supported in the Expo SDK 50 release.\\n\\n:::info\\n0.73 is now the latest stable version of React Native and **0.70.x now moves to unsupported**. For more information see [React Native\u2019s support policy](https://github.com/reactwg/react-native-releases#releases-support-policy).\\n:::"},{"id":"/2023/06/21/0.72-metro-package-exports-symlinks","metadata":{"permalink":"/blog/2023/06/21/0.72-metro-package-exports-symlinks","source":"@site/blog/2023-06-21-0.72-metro-package-exports-symlinks.md","title":"React Native 0.72 - Symlink Support, Better Errors, and more","description":"Today we\u2019re releasing 0.72!","date":"2023-06-21T00:00:00.000Z","formattedDate":"June 21, 2023","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"},{"label":"release","permalink":"/blog/tags/release"}],"readingTime":5.69,"hasTruncateMarker":true,"authors":[{"name":"Lorenzo Sciandra","title":"Senior Software Engineer at Microsoft","url":"https://twitter.com/kelset","imageURL":"https://github.com/kelset.png","key":"kelset"},{"name":"Marek Fo\u0159t","title":"Software Engineer at Shopify","url":"https://twitter.com/marekfort","imageURL":"https://github.com/fortmarek.png","key":"fortmarek"},{"name":"Riccardo Cipolleschi","title":"Software Engineer at Meta","url":"https://twitter.com/CipolleschiR","imageURL":"https://github.com/cipolleschi.png","key":"cipolleschi"},{"name":"Luna Wei","title":"Software Engineer at Meta","url":"https://twitter.com/lunaleaps","imageURL":"https://github.com/lunaleaps.png","key":"lunaleaps"}],"frontMatter":{"title":"React Native 0.72 - Symlink Support, Better Errors, and more","authors":["kelset","fortmarek","cipolleschi","lunaleaps"],"tags":["announcement","release"],"date":"2023-06-21T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"React Native 0.73 - Debugging Improvements, Stable Symlink Support, and more","permalink":"/blog/2023/12/06/0.73-debugging-improvements-stable-symlinks"},"nextItem":{"title":"Package Exports Support in React Native","permalink":"/blog/2023/06/21/package-exports-support"}},"content":"Today we\u2019re releasing 0.72!\\n\\nThis release adds highly requested features for Metro, better error handling, and other developer experience improvements. So much of this work was prioritized from your feedback on the [2022 community survey](https://github.com/react-native-community/discussions-and-proposals/discussions/528) -- thank you to all those that participated!\\n\\n### Highlights\\n\\n- [New Metro Features](/blog/2023/06/21/0.72-metro-package-exports-symlinks#new-metro-features)\\n- [Developer Experience Improvements](/blog/2023/06/21/0.72-metro-package-exports-symlinks#developer-experience-improvements)\\n- [Moving New Architecture Updates](/blog/2023/06/21/0.72-metro-package-exports-symlinks#moving-new-architecture-updates)\\n\\n### Breaking Changes\\n\\n- [Deprecated Component Removals](/blog/2023/06/21/0.72-metro-package-exports-symlinks#deprecated-component-removals)\\n- [Package Renames](/blog/2023/06/21/0.72-metro-package-exports-symlinks#package-renames)\\n\\n\x3c!--truncate--\x3e\\n\\n## Highlights\\n\\n### New Metro Features\\n\\n#### Symlink Support (Beta)\\n\\nSymlink support continues to be one of the top-requested features in Metro and, in React Native 0.72, we are happy to announce beta support for it.\\n\\nSymlink support enables React Native to work transparently with monorepo setups and pnpm, removing the need for workarounds. See [Enabling Beta Features](/blog/2023/06/21/0.72-metro-package-exports-symlinks#enabling-beta-features) to use in your app.\\n\\nIt is currently in beta to collect feedback on developer experience given varying workflows, see more details [here](https://twitter.com/robjhogan/status/1672293540632641554). We plan to default enable symlinks in 0.73.\\n\\n#### Package Exports Support (Beta)\\n\\n[Package Exports](https://nodejs.org/api/packages.html#exports) is the modern alternative to the package.json `\\"main\\"` field and provides new capabilities for npm packages to define their public API and target React Native.\\n\\nBy enabling Package Exports support in your Metro config, your app will be compatible with the wider JavaScript ecosystem, including via the new [\\"react-native\\" community condition](https://nodejs.org/docs/latest-v19.x/api/packages.html#community-conditions-definitions). See [Enabling Beta Features](/blog/2023/06/21/0.72-metro-package-exports-symlinks#enabling-beta-features) to use in your app.\\n\\n:::tip\\nSee [Package Exports Support in React Native](/blog/2023/06/21/package-exports-support) to learn more about this feature and our plans for stable rollout.\\n:::\\n\\n#### Enabling Beta Features\\n\\nTo enable these features in your project, update your app\u2019s `metro.config.js` file and set either the `resolver.unstable_enableSymlinks` or `resolver.unstable_enablePackageExports` options.\\n\\n```js\\nconst config = {\\n  // ...\\n  resolver: {\\n    unstable_enableSymlinks: true,\\n    unstable_enablePackageExports: true,\\n  },\\n};\\n```\\n\\n#### New `metro.config.js` Setup\\n\\nIn React Native 0.72, we\u2019ve changed the config loading setup for Metro in React Native CLI. Please update your project\u2019s `metro.config.js` file to match the [template\u2019s version](https://github.com/facebook/react-native/blob/76a42c292de838a0dd537935db792eaa81410b9b/packages/react-native/template/metro.config.js).\\n\\n:::info\\nPlease update your config file to the following [format](https://github.com/facebook/react-native/blob/76a42c292de838a0dd537935db792eaa81410b9b/packages/react-native/template/metro.config.js). You can also follow the [upgrade-helper](https://react-native-community.github.io/upgrade-helper/?from=0.71.8&to=0.72.0).\\n\\nThese format changes to `metro.config.js` will become required in 0.73. For 0.72, we will log a warning if not updated.\\n:::\\n\\nThis moves control over extending the base React Native Metro config into your project, and we\u2019ve cleaned up the leftover defaults. In addition, this means that standalone Metro CLI commands, such as `metro get-dependencies`, will now work.\\n\\n### Developer Experience Improvements\\n\\n#### No more redboxes with invalid style properties\\n\\nPrior to this release, providing an invalid style property in StyleSheet would result in a redbox. This is a high signal error that disrupts the developer workflow for a relatively low-risk error.\\n\\nIn 0.72, we\u2019ve relaxed this expectation to fail silently, like providing an invalid CSS property in the browser, and have updated types such that some errors may be caught in build-time vs. run-time.\\n\\n#### Better error readability for Hermes\\n\\nHermes has added a better error message when invoking an undefined callable.\\n\\n```\\n    var x = undefined; x();\\n    // Before: undefined is not a function\\n    // After: x is not a function (it is undefined)\\n```\\n\\nIn addition, LogBox stack traces now filter out internal Hermes bytecode frames that are not relevant to app users.\\n\\n#### Improved error output of the React Native CLI\\n\\n0.72 ships with React Native CLI v11 which includes improvements to reduce duplication, clarify wording, reduce verbose stack traces, and add deep links to relevant docs in the following commands `init`, `run-android`, and `run-ios`.\\n\\nYou can find other improvements in the [React Native CLI changelogs](https://github.com/react-native-community/cli/releases).\\n\\n#### Faster Compilation and JSON Parsing in Hermes\\n\\nHermes has improved the compilation time of large object literals. For example, in one reported issue, [#852](https://github.com/facebook/hermes/issues/852), a user had an entire dataset written out as a large object literal. By improving the de-duplication algorithm Hermes uses, compilation sped up by 97% ([221c](https://github.com/facebook/hermes/commit/221ce21a209e2e32a3eaaa2d9e28ca81842fad20)). These improvements will benefit build times for apps that bundle many objects.\\n\\nMultiple optimizations ([de9c](https://github.com/facebook/hermes/commit/de9cff2aa41fc1f297b568848143347823d73659), [6e2d](https://github.com/facebook/hermes/commit/6e2dd652c8d90c5d59737a81f66a259efffdcd00)) to JSON parsing have also landed, benefiting apps using libraries like redux-persist that rely heavily on JSON manipulation.\\n\\n#### More ECMAScript Support in Hermes\\n\\nSupport for the following specifications in Hermes has landed in React Native 0.72:\\n\\n- `prototype.at` support for [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at), [TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/at) and [String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/at). See [#823](https://github.com/facebook/hermes/issues/823) ([ebe2](https://github.com/facebook/hermes/commit/ebe2915ac386a6b73dec39c2af4ac7063e68cd99)).\\n- Implement [well-formed JSON.stringify](https://github.com/tc39/proposal-well-formed-stringify) ([d41d](https://github.com/facebook/hermes/commit/d41decf244aa814b1e58827a9de982f3b71667de)) to prevent ill-formed Unicode strings\\n- Implement [AggregateError](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError) ([9b25](https://github.com/facebook/hermes/commit/9b25a2530eb515f6c4fbd397ae290b6c97c049b2)) that represents several errors wrapped in a single error. Useful for multiple errors like from [`Promise.any()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/any) when all promises passed to it reject.\\n\\nFor users on JSC, these features are already available.\\n\\n### Moving New Architecture Updates\\n\\nThe New Architecture is currently experimental. To keep updates focused to their target audience, we are moving New Architecture updates in 0.72, and future releases, to the dedicated [working group](https://github.com/reactwg/react-native-new-architecture/discussions). This change will also allow for more frequent updates, such as work that ships in our nightlies.\\n\\nYou can read the 0.72 updates for the New Architecture [here](https://github.com/reactwg/react-native-new-architecture/discussions/136). Subscribe to the working group GitHub notifications to stay informed on our progress on the New Architecture.\\n\\n## Breaking Changes\\n\\n### Deprecated Component Removals\\n\\nThe following packages have been removed from React Native in 0.72. Please migrate to the recommended community package:\\n\\n- [Slider](/docs/next/slider) is superseded by [@react-native-community/slider](https://github.com/callstack/react-native-slider/tree/main/package)\\n- [DatePickerIOS](/docs/next/datepickerios) is superseded by [@react-native-community/datetimepicker](https://github.com/react-native-datetimepicker/datetimepicker)\\n- [ProgressViewIOS](/docs/next/progressviewios) is superseded by [@react-native-community/progress-view](https://github.com/react-native-progress-view/progress-view)\\n\\n### Package Renames\\n\\nAll packages published from the [`react-native`](https://github.com/facebook/react-native) core repository now live under `react-native/packages`, and are published under the [@react-native npm scope](https://www.npmjs.com/search?q=%40react-native) to ensure clear ownership.\\n\\nThere are no changes to the [react-native](https://www.npmjs.com/package/react-native) package.\\n\\n| Old Package Name                        | New Package Name                 |\\n| --------------------------------------- | -------------------------------- |\\n| `@react-native-community/eslint-config` | `@react-native/eslint-config`    |\\n| `@react-native-community/eslint-plugin` | `@react-native/eslint-plugin`    |\\n| `@react-native/polyfills`               | `@react-native/js-polyfills`     |\\n| `@react-native/normalize-color`         | `@react-native/normalize-colors` |\\n| `@react-native/assets`                  | `@react-native/assets-registry`  |\\n| `react-native-codegen`                  | `@react-native/codegen`          |\\n| `react-native-gradle-plugin`            | `@react-native/gradle-plugin`    |\\n\\nThis change will not affect you if you have no direct dependency on a renamed package. Otherwise, when upgrading to React Native 0.72, update any renamed dependency to its ~0.72 version.\\n\\nYou can read the motivation that led to these changes [in the dedicated RFC](https://github.com/react-native-community/discussions-and-proposals/pull/480).\\n\\n## Acknowledgements\\n\\nA lot of this release came from the direct feedback from the community. From reports on [noisy redboxes](https://twitter.com/baconbrix/status/1623039650775371792), [bugs with Package Exports](https://github.com/facebook/metro/issues/965), [benchmarks for the New Architecture](https://github.com/reactwg/react-native-new-architecture/discussions/85) \u2014 all of it is valuable to hear and we appreciate the time it takes to share feedback.\\n\\n0.72 contains over [1100 commits](https://github.com/facebook/react-native/compare/v0.71.8...v0.72.0) from 66 contributors. Thank you for all your hard work!\\n\\n## Upgrade to 0.72\\n\\nCheck out the list of needed changes in the [upgrade-helper](https://react-native-community.github.io/upgrade-helper/), or read the [upgrade documentation](/docs/upgrading) for how to update your existing project, or create a new project with `npx react-native@latest init MyProject`.\\n\\nIf you use Expo, React Native version 0.72 will be supported in the Expo SDK 49 release.\\n\\n:::info\\n0.72 is now the latest stable version of React Native and 0.69.x version moves now to unsupported. For more information see [React Native\u2019s support policy](https://github.com/reactwg/react-native-releases#releases-support-policy).\\n:::"},{"id":"/2023/06/21/package-exports-support","metadata":{"permalink":"/blog/2023/06/21/package-exports-support","source":"@site/blog/2023-06-21-package-exports-support.md","title":"Package Exports Support in React Native","description":"With the release of React Native 0.72, Metro \u2014 our JavaScript build tool \u2014 now includes beta support for the package.json \\"exports\\" field. When enabled, it adds the following functionality:","date":"2023-06-21T00:00:00.000Z","formattedDate":"June 21, 2023","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"},{"label":"metro","permalink":"/blog/tags/metro"}],"readingTime":8.305,"hasTruncateMarker":true,"authors":[{"name":"Alex Hunt","title":"Software Engineer at Meta","url":"https://twitter.com/alxhnt","imageURL":"https://github.com/huntie.png","key":"huntie"}],"frontMatter":{"title":"Package Exports Support in React Native","authors":["huntie"],"tags":["announcement","metro"],"date":"2023-06-21T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"React Native 0.72 - Symlink Support, Better Errors, and more","permalink":"/blog/2023/06/21/0.72-metro-package-exports-symlinks"},"nextItem":{"title":"React Native 0.71-RC0 Android outage postmortem","permalink":"/blog/2023/01/27/71rc1-android-outage-postmortem"}},"content":"With the release of [React Native 0.72](/blog/2023/06/21/0.72-metro-package-exports-symlinks), Metro \u2014 our JavaScript build tool \u2014 now includes beta support for the `package.json` [`\\"exports\\"`](https://nodejs.org/docs/latest-v18.x/api/packages.html#exports) field. When [enabled](/blog/2023/06/21/package-exports-support#enabling-package-exports-beta), it adds the following functionality:\\n\\n- [React Native projects will work with more npm packages out-of-the-box](/blog/2023/06/21/package-exports-support#for-app-developers)\\n- [New capabilities for packages to define their API and target React Native](/blog/2023/06/21/package-exports-support#for-package-maintainers-preview)\\n- [Some breaking changes to package resolution (in edge cases)](/blog/2023/06/21/package-exports-support#breaking-changes)\\n\\nIn this post we\'ll cover how Package Exports works, and what these changes mean for you as a React Native app developer or package maintainer.\\n\\n\x3c!-- truncate --\x3e\\n\\n## What is Package Exports?\\n\\nIntroduced in Node.js 12.7.0, Package Exports is the modern approach for npm packages to specify **entry points** \u2014 the mapping of package subpaths which can be externally imported and which file(s) they should resolve to.\\n\\nSupporting `\\"exports\\"` improves how React Native projects will work with the wider JavaScript ecosystem ([used in ~16.6k packages today](https://github.com/search?q=path%3A%2A%2A%2Fpackage.json+%22%5C%22access%5C%22%3A+%5C%22public%5C%22%22+%22%5C%22exports%5C%22%22+NOT+path%3A%2A%2A%2Fnode_modules+NOT+is%3Afork+NOT+is%3Aarchived&type=code)), and gives package authors a standardised feature set for multiplatform packages to target React Native.\\n\\n[`\\"exports\\"`](https://nodejs.org/docs/latest-v19.x/api/packages.html#exports) can be used alongside, or instead of, [`\\"main\\"`](https://nodejs.org/docs/latest-v19.x/api/packages.html#main) in a `package.json` file.\\n\\n```json\\n{\\n  \\"name\\": \\"@storybook/addon-actions\\",\\n  \\"main\\": \\"./dist/index.js\\",\\n  ...\\n  \\"exports\\": {\\n    \\".\\": {\\n      \\"node\\": \\"./dist/index.js\\",\\n      \\"import\\": \\"./dist/index.mjs\\",\\n      \\"default\\": \\"./dist/index.js\\"\\n    },\\n    \\"./preview\\": {\\n      \\"import\\": \\"./dist/preview.mjs\\",\\n      \\"default\\": \\"./dist/preview.js\\"\\n    },\\n    ...\\n    \\"./package.json\\": \\"./package.json\\"\\n  }\\n}\\n```\\n\\nHere\'s some app code consuming the above package by importing different subpaths of `@storybook/addon-actions`.\\n\\n```js\\nimport {action} from \'@storybook/addon-actions\';\\n// -> \'@storybook/addon-actions/dist/index.js\'\\n\\nimport {action} from \'@storybook/addon-actions/preview\';\\n// -> \'@storybook/addon-actions/dist/preview.js\'\\n\\nimport helpers from \'@storybook/addon-actions/src/preset/addArgsHelpers\';\\n// Inaccessible - not listed in \\"exports\\"!\\n```\\n\\nThe headlining features of Package Exports are:\\n\\n- **Package encapsulation**: Only subpaths defined in `\\"exports\\"` can be imported from outside the package \u2014\xa0giving packages control over their public API.\\n- **Subpath aliases**: Packages can define custom subpaths which map to a different file location (including via [subpath patterns](https://nodejs.org/docs/latest-v19.x/api/packages.html#subpath-patterns)) \u2014 allowing relocation of files while preserving the public API.\\n- **Conditional exports**: A subpath may resolve to a different underlying file depending on environment. For example, to target `\\"node\\"`, `\\"browser\\"`, or `\\"react-native\\"` runtimes \u2014\xa0replacing the [`\\"browser\\"` field spec](https://github.com/defunctzombie/package-browser-field-spec).\\n\\n:::note\\nThe full capabilities for `\\"exports\\"` are detailed in the [Node.js Package Entry Points spec](https://nodejs.org/docs/latest-v19.x/api/packages.html#package-entry-points).\\n\\nSince these features overlap with existing React Native concepts (such as [platform-specific extensions](/docs/platform-specific-code)), and since `\\"exports\\"` had been live in the npm ecosystem for some time, we reached out to the React Native community to make sure our implementation would meet developers\' needs ([PR](https://github.com/react-native-community/discussions-and-proposals/pull/534), [final RFC](https://github.com/react-native-community/discussions-and-proposals/blob/main/proposals/0534-metro-package-exports-support.md)).\\n:::\\n\\n## For app developers\\n\\nPackage Exports can be enabled today, in beta.\\n\\n- Imports against packages that depend on Package Exports features (such as [**Firebase**](https://www.npmjs.com/package/firebase) and [**Storybook**](https://www.npmjs.com/search?q=%40storybook)) should now work as designed.\\n- React Native for Web projects using Metro will now be able to use the `\\"browser\\"` conditional export, removing the need for workarounds.\\n\\nEnabling Package Exports brings a few [edge-case breaking changes](#breaking-changes) that may affect specific projects, and which you can [test today](#validating-changes-in-your-project).\\n\\n**In a future React Native release, Package Exports will be enabled by default**. In a chicken-and-egg situation, React Native apps were previously a holdout for some packages to migrate to `\\"exports\\"` \u2014 or used our `\\"react-native\\"` root field escape hatch. Supporting these features in Metro will allow the ecosystem to move forward.\\n\\n### Enabling Package Exports (beta)\\n\\nPackage Exports can be enabled in your app\'s [**metro.config.js**](https://github.com/facebook/react-native/blob/0.72-stable/packages/react-native/template/metro.config.js) file via the [`resolver.unstable_enablePackageExports`](https://metrobundler.dev/docs/configuration/#unstable_enablepackageexports-experimental) option.\\n\\n```js\\nconst config = {\\n  // ...\\n  resolver: {\\n    unstable_enablePackageExports: true,\\n  },\\n};\\n```\\n\\nMetro exposes two further resolver options which configure how conditional exports behave:\\n\\n- [`unstable_conditionNames`](https://metrobundler.dev/docs/configuration/#unstable_conditionnames-experimental) \u2014\xa0The set of [condition names](https://nodejs.org/docs/latest-v19.x/api/packages.html#community-conditions-definitions) to assert when resolving conditional exports. By default, we match `[\'require\', \'import\', \'react-native\']`.\\n- [`unstable_conditionsByPlatform`](https://metrobundler.dev/docs/configuration/#unstable_conditionsbyplatform-experimental) \u2014\xa0The additional condition names to assert when resolving for a given platform target. By default, this matches `\'browser\'` when the platform is `\'web\'`.\\n\\n:::tip\\n**Remember to use the React Native [Jest preset](https://github.com/facebook/react-native/blob/main/template/jest.config.js#L2)!** Jest includes support for Package Exports by default. In tests, you can override which `customExportConditions` are resolved using the [`testEnvironmentOptions`](https://jestjs.io/docs/configuration#testenvironmentoptions-object) option.\\n\\n**If you are using TypeScript**, resolution behaviour can be matched by setting [`moduleResolution: \'bundler\'`](https://www.typescriptlang.org/tsconfig#moduleResolution) and [`resolvePackageJsonImports: false`](https://www.typescriptlang.org/tsconfig#resolvePackageJsonExports) within your project\'s `tsconfig.json`.\\n:::\\n\\n#### Validating changes in your project\\n\\nFor existing projects, we recommend that early adopters follow these steps to see if resolution changes occur after enabling `unstable_enablePackageExports`. This is a one-time process. It\'s likely that there will be no changes at all, but we\'d like developers to opt in with certainty.\\n\\n<details>\\n<summary>\ud83d\udca1 Validating changes in your project</summary>\\n\\n:::note\\nIf you are not using Yarn, substitute `yarn` for `npx` (or the relevant tool used in your project).\\n:::\\n\\n1. Get all resolved dependencies (before changes):\\n\\n   ```sh\\n   # Replace index.js with your entry file if needed, such as App.js\\n   yarn metro get-dependencies index.js --platform android --output before.txt\\n   ```\\n\\n   - **Expo CLI**: Run `npx expo customize metro.config.js` if your project doesn\'t have a `metro.config.js` file yet.\\n   - For full coverage, substitute `--platform android` for the other platforms in use by your app (e.g. `ios`, `web`).\\n\\n2. Enable `resolver.unstable_enablePackageExports` in `metro.config.js`.\\n3. Get all resolved dependencies (after changes):\\n\\n   ```sh\\n   yarn metro get-dependencies index.js --platform android --output after.txt\\n   ```\\n\\n4. Compare!\\n\\n   ```sh\\n   diff before.txt after.txt\\n   ```\\n\\n</details>\\n\\n### Breaking changes\\n\\nWe decided on an implementation of Package Exports in Metro that is spec-compliant (necessitating some breaking changes), but backwards compatible otherwise (helping apps with existing imports to migrate gradually).\\n\\nThe key breaking change is that when `\\"exports\\"` is provided by a package, it will be consulted first (before any other `package.json` fields) \u2014\xa0and a matched subpath target will be used directly.\\n\\n- Metro will not expand [`sourceExts`](https://metrobundler.dev/docs/configuration/#sourceexts) against the import specifier.\\n- Metro will not resolve [platform-specific extensions](/docs/platform-specific-code) against the target file.\\n\\nFor more details, please see all [**breaking changes**](https://metrobundler.dev/docs/package-exports#summary-of-breaking-changes) in the Metro docs.\\n\\n### Package encapsulation is lenient\\n\\nWhen Metro encounters a subpath that isn\'t listed in `\\"exports\\"`, **it will fall back to legacy resolution**. This is a compatibility feature intended to reduce user friction for previously allowable imports in existing React Native projects.\\n\\nInstead of throwing an error, Metro will log a warning.\\n\\n```sh\\nwarn: You have imported the module \\"foo/private/fn.js\\" which is not listed in\\nthe \\"exports\\" of \\"foo\\". Consider updating your call site or asking the package\\nmaintainer(s) to expose this API.\\n```\\n\\n:::note\\nWe plan to implement a strict mode for package encapsulation in future, to align with Node\'s default behaviour. Therefore, **we recommend that all developers address these warnings** if raised by users.\\n:::\\n\\n## For package maintainers (preview)\\n\\n:::info\\nPer our [rollout plan](#the-future-stable-exports-enabled-by-default), Package Exports will be enabled for most projects in the next React Native release (0.73) later this year.\\n\\n**We have no plans to remove support for the `\\"main\\"` field and other current package resolution features any time soon.**\\n:::\\n\\nPackage Exports provides the ability to restrict access to your package\'s internals, and more predictable capabilities for libraries to target React Native and React Native for Web.\\n\\n### If you are using `\\"exports\\"` today\\n\\nIf your package uses `\\"exports\\"` alongside the current `\\"react-native\\"` root field, please bear in mind the [breaking changes](#breaking-changes) for users above. For users enabling this feature in Metro, `\\"exports\\"` will now be considered first during module resolution.\\n\\nIn practice, we anticipate the main change for users will be the enforcement (via warnings) of any inaccessible subpaths in their apps, from respecting `\\"exports\\"` package encapsulation.\\n\\n### Migrating to `\\"exports\\"`\\n\\n**Adding an `\\"exports\\"` field to your package is entirely optional**. Existing package resolution features will behave identically for packages which don\'t use `\\"exports\\"` \u2014\xa0and we have no plans to remove this behaviour.\\n\\nWe believe that the new features of `\\"exports\\"` provide a compelling feature set for React Native package maintainers.\\n\\n- **Tighten your package API**: This is a great time to review the module API of your package, which can now be formally defined via exported subpath aliases. This prevents users from accessing internal APIs, reducing surface area for bugs.\\n- **Conditional exports**: If your package targets React Native for Web (i.e. `\\"react-native\\"` and `\\"browser\\"`), we now give packages control of the resolution order of these conditions (see next heading).\\n\\nIf you decide to introduce `\\"exports\\"`, **we recommend making this as a breaking change**. We\'ve prepared a [**migration guide**](https://metrobundler.dev/docs/package-exports#migration-guide-for-package-maintainers) in the Metro docs which includes how to replace features such as platform-specific extensions.\\n\\n:::note\\n**Please do not rely on the lenient behaviours of Metro\'s implementation.** While Metro is backwards-compatible, packages should follow how `\\"exports\\"` is documented in the spec and strictly implemented by other tools.\\n:::\\n\\n### The new `\\"react-native\\"` condition\\n\\nWe\'ve introduced `\\"react-native\\"` as a community condition (for use with conditional exports). This represents React Native, the framework, sitting alongside other recognised runtimes such as `\\"node\\"` and `\\"deno\\"` ([RFC](https://github.com/nodejs/node/pull/45367)).\\n\\n> [Community Conditions Definitions \u2014\xa0**`\\"react-native\\"`**](https://nodejs.org/docs/latest-v19.x/api/packages.html#community-conditions-definitions)\\n>\\n> _Will be matched by the React Native framework (all platforms). To target React Native for Web, \\"browser\\" should be specified before this condition._\\n\\nThis replaces the previous `\\"react-native\\"` root field. The priority order for how this was previously resolved was determined by projects, [which created ambiguity when using React Native for Web](https://github.com/expo/router/issues/37#issuecomment-1275925758). Under `\\"exports\\"`, _packages concretely define the resolution order for conditional entry points_ \u2014\xa0removing this ambiguity.\\n\\n```json\\n  \\"exports\\": {\\n    \\"browser\\": \\"./dist/index-browser.js\\",\\n    \\"react-native\\": \\"./dist/index-react-native.js\\",\\n    \\"default\\": \\"./dist/index.js\\"\\n  }\\n```\\n\\n:::note\\nWe chose not to introduce `\\"android\\"` and `\\"ios\\"` conditions, due to the prevalence of other existing platform selection methods, and the complexity of how this behaviour might work across frameworks. Please use the [`Platform.select()`](/docs/platform#select) API instead.\\n:::\\n\\n## The future: Stable `\\"exports\\"`, enabled by default\\n\\nIn the next React Native release, we are aiming to remove the `unstable_` prefix for this feature (having addressed planned performance work and any bugs) and will enable Package Exports resolution by default.\\n\\nWith `\\"exports\\"` enabled for everyone, we can begin taking the React Native community forward \u2014 for example, React Native\'s core packages could be updated to better separate public and internal modules.\\n\\n![Rollout plan for Package Exports support](../static/blog/assets/package-exports-rollout.png)\\n\\n## Thanks\\n\\nThanks to members of the React Native community that gave feedback on the RFC: [@SimenB](https://github.com/SimenB), [@tido64](https://github.com/tido64), [@byCedric](https://github.com/byCedric), [@thymikee](https://github.com/thymikee).\\n\\nHuge thanks to [@motiz88](https://github.com/motiz88) and [@robhogan](https://github.com/robhogan) at Meta for supporting the development of this feature."},{"id":"/2023/01/27/71rc1-android-outage-postmortem","metadata":{"permalink":"/blog/2023/01/27/71rc1-android-outage-postmortem","source":"@site/blog/2023-01-27-71rc1-android-outage-postmortem.md","title":"React Native 0.71-RC0 Android outage postmortem","description":"Now that 0.71 is available, we want to share some key information about the incident that broke Android builds for all React Native versions while releasing the first 0.71 release candidate for React Native & Expo Android builds on November 4th, 2022.","date":"2023-01-27T00:00:00.000Z","formattedDate":"January 27, 2023","tags":[{"label":"engineering","permalink":"/blog/tags/engineering"}],"readingTime":6.65,"hasTruncateMarker":true,"authors":[{"name":"Nicola Corti","title":"Software Engineer at Meta","url":"https://twitter.com/cortinico","imageURL":"https://github.com/cortinico.png","key":"cortinico"},{"name":"Lorenzo Sciandra","title":"Senior Software Engineer at Microsoft","url":"https://twitter.com/kelset","imageURL":"https://github.com/kelset.png","key":"kelset"}],"frontMatter":{"title":"React Native 0.71-RC0 Android outage postmortem","authors":["cortinico","kelset"],"tags":["engineering"],"date":"2023-01-27T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Package Exports Support in React Native","permalink":"/blog/2023/06/21/package-exports-support"},"nextItem":{"title":"React Native 0.71: TypeScript by Default, Flexbox Gap, and more...","permalink":"/blog/2023/01/12/version-071"}},"content":"Now that 0.71 is [available](/blog/2023/01/12/version-071), we want to share some key information about the incident that broke Android builds for all React Native versions while releasing the first 0.71 release candidate for React Native & Expo Android builds on November 4th, 2022.\\n\\nThe contributors who helped tackle the incident recently attended a post-mortem meeting to discuss in detail what happened, what we all learned from it, and what actions we are going to take to avoid similar outages in the future.\\n\\n\x3c!--truncate--\x3e\\n\\n# What happened\\n\\nOn November 4th 2022, we published the version `0.71.0-rc0` of React Native, the first release candidate for 0.71, on several public repositories.\\n\\nA major change made in this release candidate helped to improve build times by publishing artifacts to Maven Central, instead of building them from source. More details on how this was done are available in [RFC#508](https://github.com/react-native-community/discussions-and-proposals/pull/508) and [related discussions](https://github.com/reactwg/react-native-new-architecture/discussions/105).\\n\\nUnfortunately, because of the way we scaffolded new projects from the template, this caused build failures for any Android user on older versions because they would start downloading new artifacts for `0.71.0-rc0` instead of the version they were using in their project (like `0.68.0`).\\n\\n# Why this happened\\n\\nThe React Native template provides a `build.gradle` file to build Android apps. This file contains a dependency on the React Native Android library as follows:\\n`implementation(\\"com.facebook.react:react-native:+\\")`.\\n\\nImportantly, the `+` part of this dependency (a [Gradle Dynamic version](https://docs.gradle.org/current/userguide/dynamic_versions.html)) tells Gradle to pick the highest available version of React Native. Using Gradle Dynamic versions is considered an antipattern as it exposes users to less-reproducible builds.\\n\\nWe were aware of the issues dynamic versions could cause, so in `0.71` we cleaned up the new app template and removed all the `+` dependencies. However, users on older versions of React Native were still using a `+` version.\\n\\nThis caused builds with React Native versions before `0.71.0-rc.0` to query all the repositories for the highest available versions of the React Native. Because the newly pushed 0.71.0-rc.0 on Maven Central became the highest version available, builds with React Native versions before 0.71.0-rc.0 started using artifacts from 0.71.0-rc.0. The React Native version mismatch between the local build (e.g `0.68.0`) and artifacts from Maven Central (`0.71.0-rc.0`) caused these builds to fail.\\n\\nFurther technical details on this event area are also available [on this GitHub issue](https://github.com/facebook/react-native/issues/35210).\\n\\n# How we mitigated & resolved\\n\\nAs soon as we identified the issue on November 4th, the community found and shared a manual workaround to fix the issue which would pin React Native to a specific, correcting the mistake.\\n\\nThen, over the weekend of November 5th and 6th, the release crew shipped patch releases for all previous React Native versions down to 0.63 which automatically applied the patch, so that users could update to a fixed version of React Native.\\n\\nAt the same time, we [reached out to Sonatype](https://issues.sonatype.org/browse/OSSRH-86006) to ask for the removal of the offending artifacts.\\n\\nThe issue was fully resolved on November 8th when the artifacts were fully removed from Maven Central.\\n\\n# Timeline of events\\n\\n_This section contains a brief timeline of the events. All times are GMT/UTC +0_\\n\\n- Nov 4th - 5:06 PM: [0.71-RC0 is released](https://github.com/facebook/react-native/releases/tag/v0.71.0-rc.0).\\n- Nov 4th - 6:20 PM: [First report of build issue is opened](https://github.com/facebook/react-native/issues/35204).\\n- Nov 4th - 7:45 PM: [Issue is identified by community](https://github.com/facebook/react-native/issues/35204#issuecomment-1304090948).\\n- Nov 4th - 9:39 PM: [Workarounds are communicated, Expo ](https://github.com/facebook/react-native/issues/35204#issuecomment-1304281740)deploys fix to all their users.\\n- Nov 5th - 03:04 AM: [New issue is open to communicate status and workarounds](https://github.com/facebook/react-native/issues/35210).\\n- Nov 6th - 04:11 PM: [Ticket to SonaType](https://issues.sonatype.org/browse/OSSRH-86006?focusedCommentId=1216303&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-1216303) asking for removal of the artifacts is open.\\n- Nov 6th - 04:40 PM: [First tweet](https://twitter.com/reactnative/status/1589296764678705155) from @reactnative with ack + link to issue.\\n- Nov 6th - 07:05 PM: Decision to patch React Native versions back to 0.63.\\n- Nov 7th - 12:47 AM: Last patched release is released: [0.63.5](https://github.com/facebook/react-native/releases/tag/v0.63.5).\\n- Nov 8th - 08:04 PM: Artifacts on Maven Central are [fully removed](https://issues.sonatype.org/browse/OSSRH-86006?focusedCommentId=1216303&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-1216303).\\n- Nov 10th - 11:51 AM: Issue about the [incident is closed](https://github.com/facebook/react-native/issues/35210#issuecomment-1310170361).\\n\\n# Lessons Learned\\n\\nWhile in many ways the conditions to trigger this incident has existed since React Native 0.12.0, we want to ensure that the foundations on which we develop and release React Native moving forward are stronger. Here are some of the lessons learned and the actionables on how we\u2019ll adapt our processes and infrastructure to respond faster and stronger in the future.\\n\\n### Incident response strategy\\n\\nThis incident highlighted gaps in our incident response strategy for open-source issues related to React Native.\\n\\nThe community quickly found a workaround in less than 2 hours. Due to our lack of visibility on the scope of the impact of this issue, as well as the complexity required to fix it for old versions, we relied on impacted people discovering the workaround on the GitHub issue.\\n\\nIt took us 48 hours to recognize the larger scope of this issue and that we couldn\u2019t rely on everyone finding the GitHub issue. We needed to prioritize more complex active mitigations to automatically fix people\u2019s projects.\\n\\nWe will be revisiting our processes for when to rely on developer-applied-workarounds vs fixes that we can deploy automatically. We will also take a look at our options for getting a better live pulse on the health of our ecosystem.\\n\\n### Release Support Policy\\n\\nAs visualized in the [rn-versions tool](https://rn-versions.github.io/), to cover more than 90% of the developer base of React Native at the time of the incident, we had to release patches all the way down to version 0.63.\\n\\nWe believe this is caused by the React Native upgrade experience which has historically been full of frictions. We are currently looking into ways to improve the upgrade experience to make it smoother and faster to mitigate this fragmentation of the ecosystem.\\n\\nReleasing a newer version of React Native should never have an impact on users on older versions, and we want to apologize for the disruption we caused to your workflow.\\n\\nSimilarly, we want to also stress the importance of being up to date with the latest version of your dependencies and React Native to benefit from the improvements and the safeguards we introduced. This incident happened during a time in which an official [release support policy](https://github.com/reactwg/react-native-releases#releases-support-policy) was getting defined and wasn\u2019t broadcasted or enforced yet.\\n\\nIn the future, we will communicate our support policy over our communication channels and we will consider [deprecating older versions of React Native on npm](https://docs.npmjs.com/deprecating-and-undeprecating-packages-or-package-versions).\\n\\n### Improved testing and best practices for 3rd party libraries\\n\\nThis incident highlighted the importance of having better release testing and better guidance to 3rd party libraries.\\n\\nOn the testing side, releasing versions down to `0.63.x` proved to be challenging due to the lack of automation and testing we now have in place for stable releases. We recognize the importance of our release and testing infrastructure and we\u2019re going to invest further in it in the future.\\n\\nSpecifically, we are now encouraging and supporting 3rd party library testing as part of the [release of react native](https://github.com/reactwg/react-native-releases/discussions/41). We\u2019re also adding some new channels and roles in the [Core Contributors Discord Server](https://github.com/facebook/react-native/blob/main/ECOSYSTEM.md#core-contributors).\\n\\nOn top of this, we started a closer collaboration with Callstack, the maintainers of [create-react-native-library](https://github.com/callstack/react-native-builder-bob/tree/main/packages/create-react-native-library), to improve the library template and make sure it follows all the necessary best practices to integrate with React Native projects. The newer version of `create-react-native-library` is now fully compatible with 0.71 projects while still offering backward compatibility.\\n\\n# Conclusions\\n\\nWe want to apologize for the disruption this caused to the workflows of developers all around the world. As highlighted above, we have already started taking action to strengthen our foundation - and more work is due.\\n\\nWe hope that sharing these insights will help you all better understand this incident, and that you can leverage our learnings to apply better practices in your own tools and projects.\\n\\nIn closing, we want once again to thank Sonatype for helping us remove the artifacts, our community, and the release crew that worked tirelessly to address this as soon as possible."},{"id":"/2023/01/12/version-071","metadata":{"permalink":"/blog/2023/01/12/version-071","source":"@site/blog/2023-01-12-version-071.md","title":"React Native 0.71: TypeScript by Default, Flexbox Gap, and more...","description":"Today we\u2019re releasing React Native version 0.71! This is a feature-packed release including:","date":"2023-01-12T00:00:00.000Z","formattedDate":"January 12, 2023","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"},{"label":"release","permalink":"/blog/tags/release"}],"readingTime":10.3,"hasTruncateMarker":true,"authors":[{"name":"Matt Carroll","title":"Developer Advocate at Meta","url":"https://github.com/mattcarrollcode","imageURL":"https://github.com/mattcarrollcode.png","key":"mattcarrollcode"},{"name":"Nick Gerleman","title":"Software Engineer at Meta","url":"https://github.com/NickGerleman","imageURL":"https://github.com/NickGerleman.png","key":"NickGerleman"},{"name":"Nicola Corti","title":"Software Engineer at Meta","url":"https://twitter.com/cortinico","imageURL":"https://github.com/cortinico.png","key":"cortinico"},{"name":"Lorenzo Sciandra","title":"Senior Software Engineer at Microsoft","url":"https://twitter.com/kelset","imageURL":"https://github.com/kelset.png","key":"kelset"}],"frontMatter":{"title":"React Native 0.71: TypeScript by Default, Flexbox Gap, and more...","authors":["mattcarrollcode","NickGerleman","cortinico","kelset"],"tags":["announcement","release"],"date":"2023-01-12T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"React Native 0.71-RC0 Android outage postmortem","permalink":"/blog/2023/01/27/71rc1-android-outage-postmortem"},"nextItem":{"title":"First-class Support for TypeScript","permalink":"/blog/2023/01/03/typescript-first"}},"content":"Today we\u2019re releasing React Native version 0.71! This is a feature-packed release including:\\n\\n- [TypeScript by default](/blog/2023/01/12/version-071#typescript-by-default)\\n- [Simplifying layouts with Flexbox Gap](/blog/2023/01/12/version-071#simplifying-layouts-with-flexbox-gap)\\n- [Web-inspired props for accessibility, styles, and events](/blog/2023/01/12/version-071#web-inspired-props-for-accessibility-styles-and-events)\\n- [Restoring PropTypes](/blog/2023/01/12/version-071#restoring-proptypes)\\n- [Developer Experience Improvements](/blog/2023/01/12/version-071#developer-experience-improvements)\\n- [New Architecture Updates](/blog/2023/01/12/version-071#new-architecture)\\n\\nIn this post we\u2019ll cover some of the highlights of 0.71.\\n\\n\x3c!--truncate--\x3e\\n\\n:::info\\nFor a full list of changes, check out [CHANGELOG.md](https://github.com/facebook/react-native/blob/main/CHANGELOG.md#v071).\\n:::\\n\\n## TypeScript by default\\n\\nIn this release, we\u2019re investing in the TypeScript experience of React Native.\\n\\nStarting with 0.71, when you create a new React Native app via the React Native CLI you\'ll get a TypeScript app by default. The new project is already set up with a `tsconfig.json` so out of the box your IDE will help you write typed code right away.\\n\\nWe\u2019re also offering built-in, more accurate TypeScript declarations directly from the `react-native` package. This means you won\u2019t need `@types/react-native` any longer, and the types will be updated in lockstep with React Native releases.\\n\\nFinally, our documentation has been updated to feature TypeScript for all examples.\\n\\n:::note\\n\\nAfter upgrading to React Native 0.71, we recommend removing `@types/react-native` from your package.json `devDependencies`.\\n\\n:::\\n\\nFor more details on this change, including migration steps and how this affects Flow users, check out our previous post [First-class Support for TypeScript](https://reactnative.dev/blog/2023/01/03/typescript-first).\\n\\n## Simplifying layouts with Flexbox gap\\n\\nWith React Native you can flexibly layout components on different screen sizes using Flexbox. Browsers have supported the Flexbox properties [gap](https://developer.mozilla.org/en-US/docs/Web/CSS/gap), [rowGap](https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap), and [columnGap](https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap), which allow you to specify the amount of space between all items in a Flexbox.\\n\\nThese properties have been long requested in React Native, and 0.71 adds initial support for gaps defined using pixel values. In future versions, we will add support for more values, such as percentages.\\n\\nTo see why this is useful, imagine trying to build a responsive layout with variably sized cards, 10px apart from each other, hugging the edges of the parent container. Trying to accomplish this layout with child margins can be tricky.\\n\\nThe following shows a layout where we start by giving each child `margin: 10` style:\\n\\n![Two diagrams. On the left it shows a skeleton of an app with three boxes that have margin around them cause the boxes to have margin around all sides. On the right, the same diagram is shown highlighted to demonstrate the margin on all sides.](/blog/assets/FlexboxGapBefore.png)\\n\\nMargins are applied uniformly to the edges of all children and don\u2019t collapse under Flexbox, giving us spacing at the exterior of the cards, and double the space on the interior compared to what we wanted. We can get around this by applying non-uniform margins, using negative margins on the parent, halving our intended spacing, etc, but it can be made much easier.\\n\\nWith flex gap, this layout can be achieved by setting `gap: 10` on the container for a 10 pixel gap between the interior of the cards:\\n\\n![Two diagrams. On the left it shows a skeleton of an app with three boxes that have margin only on the inner sides and not the outer sides of the boxes due to the Flexbox gap property. On the right, the same diagram is shown highlighted to demonstrate the margin only on the inner sides.](/blog/assets/FlexboxGapAfter.png)\\n\\nFor more information on Flexbox gaps, see [this blogpost from CSS Tricks](https://css-tricks.com/minding-the-gap/#aa-flexbox-gaps).\\n\\n## Web-inspired props for accessibility, styles, and events\\n\\nThis release includes a number of new props inspired by web standards to align React Native\u2019s APIs across many platforms. These new props are purely additive so there are no expected migrations or change of behavior for equivalent accessibility, behavior, or style props.\\n\\nFor any new prop alias introduced, if there is an existing prop with a different name and both are specified, the new alias prop value will take precedence. For example, this release adds a `src` prop alias for `source` on the Image component to align with the `src` prop on web. If both `src` and `source` are provided, the new `src` prop will be used.\\n\\n:::note\\n\\nFor more background on aligning React Native to web standards, check out this [proposal](https://github.com/necolas/discussions-and-proposals/blob/reduce-fragmentation/proposals/0000-reduce-fragmentation.md) and [related discussion](https://github.com/react-native-community/discussions-and-proposals/pull/496).\\n:::\\n\\n#### Accessibility\\n\\nWe introduced ARIA props as alias to existing React Native accessibility props.\\n\\nThese props now exist on all core components of React Native:`aria-label`, `aria-labelledby`,`aria-modal`, `id`, `aria-busy`, `aria-checked`, `aria-disabled`, `aria-expanded`, `aria-selected`, `aria-valuemax`, `aria-valuemin`, `aria-valuenow`, and `aria-valuetext`.\\n\\nWe also introduced equivalent web behavior for: `aria-hidden`, `aria-live`, `role`, and `tabIndex`.\\n\\nSee this [issue](https://github.com/facebook/react-native/issues/34424) for more details.\\n\\n#### Component-Specific Behavior\\n\\nThere were also props introduced to align prop names with equivalent DOM prop names for core components.\\n\\n- **Image**: `alt`, `tintColor`, `crossOrigin`, `height`, `referrerPolicy`, `src`, `srcSet`, and `width`.\\n- **TextInput**: `autoComplete`, `enterKeyHint`, `inputMode`, `readOnly`, and `rows`.\\n\\nSee this [issue](https://github.com/facebook/react-native/issues/34424) for more details.\\n\\n#### Styles\\n\\nTo align with certain CSS styles, there have been feature extensions for the following styles:\\n\\n- [`aspectRatio`](https://reactnative.dev/docs/layout-props#aspectratio) now supports string values\\n- [`fontVariant`](https://reactnative.dev/docs/text-style-props#fontvariant) now supports space-separated string values\\n- [`fontWeight`](https://reactnative.dev/docs/text-style-props#fontWeight) now supports number values\\n- [`transform`](https://developer.mozilla.org/en-US/docs/Web/CSS/transform) now supports string values\\n\\nThe following aliases have been added to shadow existing React Native styles:\\n\\n- [`objectFit`](https://reactnative.dev/docs/image#objectfit)\\n- [`pointerEvents`](https://reactnative.dev/docs/view-style-props#pointerevents)\\n- [`userSelect`](https://developer.mozilla.org/en-US/docs/Web/CSS/user-select)\\n- [`verticalAlign`](https://reactnative.dev/docs/text-style-props#verticalalign-android)\\n\\nSee this [issue](https://github.com/facebook/react-native/issues/34425) for more details.\\n\\n#### Events\\n\\nFinally, we also added an opt-in implementation of [PointerEvents](https://w3c.github.io/pointerevents)\\n\\nOnce enabled, the following handlers on `View` will support hover:\\n\\n- `onPointerOver`, `onPointerOut`\\n- `onPointerEnter`, `onPointerLeave`\\n\\nThese events are also implemented in `Pressability` for new opt-in support for hover.\\n\\nTo enable these features, set the following flags to true:\\n\\n```js\\nimport ReactNativeFeatureFlags from \'react-native/Libraries/ReactNative/ReactNativeFeatureFlags\';\\n\\n// enable the JS-side of the w3c PointerEvent implementation\\nReactNativeFeatureFlags.shouldEmitW3CPointerEvents = () => true;\\n\\n// enable hover events in Pressibility to be backed by the PointerEvent implementation.\\n// shouldEmitW3CPointerEvents should also be true\\nReactNativeFeatureFlags.shouldPressibilityUseW3CPointerEventsForHover =\\n  () => true;\\n```\\n\\n:::note\\n\\nYou\u2019ll also need to enable React feature flags on your [Android](https://reactnative.dev/blog/2022/12/13/pointer-events-in-react-native#android-specific) and [iOS](https://reactnative.dev/blog/2022/12/13/pointer-events-in-react-native#ios-specific) native setup.\\n\\n:::\\n\\nCheck out our dedicated [PointerEvents post](https://reactnative.dev/blog/2022/12/13/pointer-events-in-react-native) to learn more.\\n\\n## Restoring PropTypes\\n\\nReact Native\u2019s prop types, such as `ViewPropTypes` and `Text.propTypes`, were deprecated in 0.66 and accessing them would output deprecation warnings. When they were removed in 0.68, many developers began experiencing errors when upgrading to the latest version of React Native.\\n\\nAfter some investigation, we realized that a couple issues prevented the community from taking action on the deprecation warnings. First, the deprecation warning was not always actionable which caused people to ignore them ([issue one](https://github.com/facebook/react-native/pull/34650), [issue two](https://github.com/react-native-community/cli/pull/1699)). Second, the deprecation warnings were being [incorrectly filtered](https://github.com/facebook/react-native/commit/fa2842d) by `LogBox.ignoreLogs`. Both of these have now been fixed, but we want to give people more time to upgrade the deprecated call sites.\\n\\nSo in this release we are adding back React Native\u2019s propTypes so that it is easier for people to upgrade and migrate their code to avoid using them. The `deprecated-react-native-prop-types` package has also been updated for all of the props in 0.71. In the future, we plan to proceed with the deprecation and remove prop types once again. We expect that when we revisit the removal, the community will experience significantly fewer issues.\\n\\n:::caution\\n\\nAs part of this change, we are also removing the console filtering from `LogBox.ignoreLog`. This means logs that you have previously filtered with `Logbox.ignoreLog` will start appearing again in the console when you upgrade.\\n\\nThis is expected, because it allows logs such as deprecation warnings to be found and fixed.\\n:::\\n\\n## Developer Experience Improvements\\n\\n### React DevTools\\n\\nIn this release, we\'ve brought two popular React DevTools features on web to React Native.\\n\\n\\"Click to inspect\\" is the option in the top left corner of React Dev Tools that allows you to click on an item in the app to inspect it in Dev Tools, similar to the Chrome element inspector.\\n\\nComponent highlighting will highlight the element you select in DevTools in the app so you can see which React components line up with which on-screen elements.\\n\\nHere are both features in action:\\n\\n![Video of the behavior described above in action. On the left is a React Native app running in an iPhone simulator. On the right is the React DevTools. In both workflows, clicking on an item in the DevTools highlights the corresponding components in the app.](/blog/assets/ElementInspecting.gif)\\n\\n### Hermes\\n\\nIn React Native 0.70, we made [Hermes the default engine for React Native](https://reactnative.dev/blog/2022/07/08/hermes-as-the-default).\\n\\nIn React Native 0.71, we\u2019re upgrading Hermes with a few notable improvements:\\n\\n- **Improve source maps**: By loading source maps over the network with Metro we\u2019ve restored the ability to use source maps in recent versions of Chrome Dev Tools outside of Flipper.\\n- **Improve `JSON.parse` performance**: This version includes a performance optimization that improves the performance of `JSON.parse` up to 30%.\\n- **Add support for `.at()`**: Hermes now [supports](https://github.com/facebook/hermes/issues/823)`.at()` for `String`, `TypedArray`, and `Array`.\\n\\nFor a full list of changes see [the Road to 71 issue](https://github.com/reactwg/react-native-releases/discussions/41#discussioncomment-4089256).\\n\\n### New Architecture\\n\\nThis release brings many improvements to the experimental New Architecture experience based on user feedback and reports we collected so far.\\n\\n- **Reduced build times**: The new distribution model uses Maven Central, which allows us to greatly reduce the build time on Android, resolves many build problems on Windows, and provides a more seamless experience with the New Architecture. [Read more here](https://github.com/reactwg/react-native-new-architecture/discussions/105).\\n- **Write less C++ code**: You can now enable the New Architecture without having to add any C++ code in your app and the CLI app template has been cleaned of all the C++ code and the CMake files. [Read more here](https://github.com/reactwg/react-native-new-architecture/discussions/101).\\n- **Better encapsulation of iOS app setup**: On iOS, we followed a similar approach to Android and encapsulated most of the logic to set up the New Architecture in the `RCTAppDelegate` class, which will simplify upgrades in the future with fewer manual breaking changes.\\n- **Better dependency management on iOS**: For library maintainers, we\'ve added a new `install_module_dependencies` function to call inside your package `podspec` which will install all the required dependencies for the New Architecture.\\n- **Bug fixes and better IDE support**: we fixed several bugs and issues (like [better IDE support for Android](https://github.com/reactwg/react-native-new-architecture/discussions/102)) that were reported by our users in the [New Architecture Working Group](https://github.com/reactwg/react-native-new-architecture/discussions).\\n\\nAs a reminder, the New Architecture is still an experimental API experience as we iterate on changes to make adoption easier. Please try out the new simplified steps in the [New Architecture documentation](https://reactnative.dev/docs/new-architecture-intro) and post any feedback you have to the [New Architecture Working Group](https://github.com/reactwg/react-native-new-architecture/discussions).\\n\\n### Other Notable Fixes\\n\\n- **Better stack frame collapsing**: We\'ve [updated the list of internal frames](https://github.com/react-native-community/cli/pull/1699) for React Native so LogBox will show your code more often rather than internal React Native frames, helping you to debug issues faster.\\n- **Build time improvements:** We migrated assets to Maven Central for prefabs to improve build times (both iOS and Android) for Hermes in both the current and new architectures.\\n- **Android template improvements**: The Android template was heavily cleaned and now fully relies on the React Native Gradle Plugin. You can find the configuration instructions directly inside the template or in the [new dedicated page on the website](https://reactnative.dev/docs/react-native-gradle-plugin).\\n\\n## Breaking changes\\n\\n- **Changes to Console Logging:** `LogBox.ignoreLog` no longer filters console logs. This means you will start seeing logs in the console that you have silenced in LogBox. See [this comment](https://github.com/facebook/react-native/pull/34476#issuecomment-1240667794) for more details.\\n- **Removed AsyncStorage and MaskedViewIOS**: These components have been deprecated since version [0.59](https://github.com/facebook/react-native/blob/main/CHANGELOG.md#deprecated-8), so it\u2019s time we remove them entirely. For alternatives, please check [React Native Directory](https://reactnative.directory/) for community packages that cover those use cases.\\n- **JSCRuntime moved to react-jsc:** react-jsi is now split into react-jsc and react-jsi. If you use JSCRuntime, you will need to add react-jsc as a dependency ([facebook/react-native@6b129d8](https://github.com/facebook/react-native/commit/6b129d81ed8cab301775d2a04971e255df9290de)).\\n\\n## Acknowledgements\\n\\nThis release is possible thanks to the work of 70+ contributors adding over 1000 commits.\\n\\nWe especially want to thank those who contributed to these major React Native projects:\\n\\n- **Flexbox Gap Support**: [@intergalacticspacehighway](https://github.com/intergalacticspacehighway) and [@jacobp100](https://github.com/jacobp100).\\n- **Web-inspired props**: [@gabrieldonadel](https://github.com/gabrieldonadel) [@dakshbhardwaj](https://github.com/dakshbhardwaj) [@dhruvtailor7](https://github.com/dhruvtailor7) [@ankit-tailor](https://github.com/ankit-tailor) [@madhav23bansal](https://github.com/madhav23bansal).\\n- **Codegen Improvements**: [@AntoineDoubovetzky](https://github.com/AntoineDoubovetzky), [@MaeIg](https://github.com/MaeIg), [@Marcoo09](https://github.com/Marcoo09), [@Naturalclar](https://github.com/Naturalclar), [@Pranav-yadav](https://github.com/Pranav-yadav), [@ZihanChen-MSFT](https://github.com/ZihanChen-MSFT), [@dakshbhardwaj](https://github.com/dakshbhardwaj), [@dhruvtailor7](https://github.com/dhruvtailor7), [@gabrieldonadel](https://github.com/gabrieldonadel), [@harshsiri110](https://github.com/harshsiri110), [@ken0nek](https://github.com/ken0nek), [@kylemacabasco](https://github.com/kylemacabasco), [@matiassalles99](https://github.com/matiassalles99), [@mdaj06](https://github.com/mdaj06), [@mohitcharkha](https://github.com/mohitcharkha), [@tarunrajput](https://github.com/tarunrajput), [@vinayharwani13](https://github.com/vinayharwani13), [@youedd](https://github.com/youedd), [@byCedric](https://github.com/byCedric).\\n\\nFinally, thanks to [@cortinico](https://github.com/cortinico), [@kelset](https://github.com/kelset), [@dmytrorykun](https://github.com/dmytrorykun), [@cipolleschi](https://github.com/cipolleschi), and [@titozzz](https://github.com/titozzz) for cutting this release!\\n\\n## Try out 0.71.0 now!\\n\\nFor React Native CLI users, see the [upgrade documentation](https://reactnative.dev/docs/upgrading) for how to update your existing project, or create a new project with `npx react-native init MyProject`.\\n\\nReact Native version 0.71 will be supported in Expo SDK version 48.\\n\\n:::info\\n0.71 is now the latest stable version of React Native and 0.68.x versions are now unsupported. For more information see [React Native\u2019s support policy](https://github.com/reactwg/react-native-releases#releases-support-policy).\\n:::"},{"id":"/2023/01/03/typescript-first","metadata":{"permalink":"/blog/2023/01/03/typescript-first","source":"@site/blog/2023-01-03-typescript-first.md","title":"First-class Support for TypeScript","description":"With the release of 0.71, React Native is investing in the TypeScript experience with the following changes:","date":"2023-01-03T00:00:00.000Z","formattedDate":"January 3, 2023","tags":[{"label":"typescript","permalink":"/blog/tags/typescript"},{"label":"engineering","permalink":"/blog/tags/engineering"}],"readingTime":4.895,"hasTruncateMarker":true,"authors":[{"name":"Luna Wei","title":"Software Engineer at Meta","url":"https://twitter.com/lunaleaps","imageURL":"https://github.com/lunaleaps.png","key":"lunaleaps"},{"name":"Nick Gerleman","title":"Software Engineer at Meta","url":"https://github.com/NickGerleman","imageURL":"https://github.com/NickGerleman.png","key":"NickGerleman"}],"frontMatter":{"title":"First-class Support for TypeScript","authors":["lunaleaps","NickGerleman"],"tags":["typescript","engineering"],"date":"2023-01-03T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"React Native 0.71: TypeScript by Default, Flexbox Gap, and more...","permalink":"/blog/2023/01/12/version-071"},"nextItem":{"title":"Pointer Events in React Native","permalink":"/blog/2022/12/13/pointer-events-in-react-native"}},"content":"With the release of 0.71, React Native is investing in the TypeScript experience with the following changes:\\n\\n- [New app template is TypeScript by default](/blog/2023/01/03/typescript-first#new-app-template-is-typescript-by-default)\\n- [TypeScript declarations shipped with React Native](/blog/2023/01/03/typescript-first#declarations-shipped-with-react-native)\\n- [React Native documentation is TypeScript First](/blog/2023/01/03/typescript-first#documentation-is-typescript-first)\\n\\nIn this post we\u2019ll cover what these changes mean for you as a TypeScript or Flow user.\\n\\n\x3c!--truncate--\x3e\\n\\n## New App Template is TypeScript By Default\\n\\nStarting with 0.71, when you create a new React Native app via the React Native CLI you\'ll get a TypeScript app by default!\\n\\n```shell\\nnpx react-native init My71App --version 0.71.0\\n```\\n\\n![Screenshot of an iPhone simulator running a new app generated by React Native CLI. Alongside the simulator is a screenshot of Visual Studio Code editor opened to \\"App.tsx\\" to illustrate it is running a TypeScript file.](/blog/assets/typescript-first-new-app.png)\\n\\nThe starting point of a newly generated app will be `App.tsx` instead of `App.js` \u2013 fully TypeScript typed. The new project is already set up with a `tsconfig.json` so out of the box your IDE will help you write typed code right away!\\n\\n## Declarations Shipped with React Native\\n\\n0.71 is the first release with built-in TypeScript (TS) declarations.\\n\\nPrior, TypeScript declarations for React Native were provided by [`@types/react-native`](https://www.npmjs.com/package/@types/react-native) hosted in the [DefinitelyTyped](https://github.com/DefinitelyTyped/DefinitelyTyped) repository. The decision to co-locate TypeScript types with React Native source was for improved correctness and maintenance.\\n\\n`@types/react-native` only provides types for stable releases. This means if you ever wanted to develop with a pre-release version of React Native in TypeScript, you\u2019d have to use types from an older release which may be inaccurate. Releasing `@types/react-native` is also error-prone. The releases lag React Native releases, and the process involves manually inspecting for type changes made to React Native\u2019s public API and updating the TS declaration to match.\\n\\nWith TS types co-located with React Native source, there is more visibility and ownership of TS types. Our team is actively working on tools to maintain alignment between Flow and TS.\\n\\nThis change also removes a dependency for React Native users to manage. When upgrading to 0.71 or above, you can remove `@types/react-native` as a dependency. [Refer to the new app template on how to set up TypeScript support.](https://github.com/facebook/react-native/blob/main/template/tsconfig.json)\\n\\nWe plan to deprecate `@types/react-native` for versions 0.73 and onward. Concretely this means:\\n\\n- `@types/react-native` tracking React Native versions 0.71 and 0.72 will be released. They will be identical to the types in React Native on the relevant release branches.\\n- For React Native 0.73 and onward, TS types will only be available from React Native.\\n\\n### How to Migrate\\n\\nPlease migrate to the new co-located types at your earliest convenience. Here are more details on migrating based on your needs.\\n\\n#### App Maintainer\\n\\nOnce you upgrade to React Native >= 0.71, you can remove the `@types/react-native` from your `devDependency`.\\n\\n:::note\\n\\nIf you have warnings because a library you use references `@types/react-native` as a `peerDependency`, file an issue or open a PR for that library to use [optional peerDependencies](https://docs.npmjs.com/cli/v7/configuring-npm/package-json#peerdependenciesmeta) and ignore the warning for now.\\n\\n:::\\n\\n#### Library Maintainer\\n\\nLibraries that target versions of React Native below 0.71 may use a `peerDependency` of `@types/react-native` to typecheck against the apps version of typings. This dependency should be marked as optional in [`peerDependenciesMeta`](https://docs.npmjs.com/cli/v7/configuring-npm/package-json#peerdependenciesmeta) so that the typings are not required for users without TypeScript or for 0.71 users where typings are built-in.\\n\\n#### Maintainer of TypeScript declarations that depend on `@types/react-native`\\n\\nCheck out the [breaking changes introduced with 0.71](https://github.com/facebook/react-native/blob/main/CHANGELOG.md) to see if you\u2019re ready to migrate.\\n\\n### What if I use Flow?\\n\\nFlow users can continue to typecheck applications targeting 0.71+ but configuration logic for it is no longer included out-of-the box in the template.\\n\\nFlow users have previously upgraded React Native\u2019s Flow types by merging in the `.flowconfig` from the new app template and manually updating `flow-bin`. The new app template no longer has a `.flowconfig`, but [one is still present in the React Native repository](https://github.com/facebook/react-native/blob/main/.flowconfig) that can be used as a basis for your app.\\n\\nIf you need to start a new React Native app in Flow, you can reference the [new app template from 0.70](https://github.com/facebook/react-native/tree/0.70-stable/template).\\n\\n### What if I find a bug in the TypeScript declaration?\\n\\nRegardless of whether you\u2019re using built-in TS types or `@types/react-native`, if you find a bug please submit a PR to both [React Native](https://github.com/facebook/react-native) and [DefinitelyTyped](https://github.com/DefinitelyTyped/DefinitelyTyped) repositories. If you don\u2019t know how to fix it, please file a GitHub issue in the React Native repository and mention [@lunaleaps](https://github.com/lunaleaps) on the issue.\\n\\n## Documentation is TypeScript First\\n\\nTo ensure a consistent TypeScript experience, we have made several updates to the React Native documentation to reflect TypeScript as the new default language.\\n\\nCode examples now allow inline TypeScript and over 170 interactive code examples have been updated to pass linting, formatting, and type-checking in the new template. Most examples are valid as both TypeScript and JavaScript. Where they are incompatible, you can view the example in either language.\\n\\nIf you spot a mistake or you have an improvement, remember that the website is also open source and we would love to see your PRs!\\n\\n## Thank you to the React Native TypeScript community!\\n\\nIn closing, we want to recognize all the work done over the years by the community to ensure that TypeScript is usable by React Native developers.\\n\\nWe want to thank all the [contributors](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/react-native/index.d.ts#L3) that have been maintaining `@types/react-native` since [2015](https://github.com/DefinitelyTyped/DefinitelyTyped/commit/efce0c25ec532a4651859f10eda49e97a5716a42)! We see the effort and care you all have put into making sure React Native users have the best experience.\\n\\nThank you to [@acoates](https://github.com/acoates), [@eps1lon](https://github.com/eps1lon), [@kelset](https://github.com/kelset), [@tido64](https://github.com/tido64), [@Titozzz](https://github.com/Titozzz), and [@ZihanChen-MSFT](https://github.com/ZihanChen-MSFT) for your help consulting, questioning, communicating and reviewing changes to move the TypeScript types to React Native.\\n\\nSimilarly, we want to thank the [maintainers of `react-native-template-typescript`](https://github.com/react-native-community/react-native-template-typescript/graphs/contributors) for supporting the TypeScript experience for new app development in React Native since day one.\\n\\nWe look forward to collaborating more directly in the React Native repository and continue improving the React Native developer experience!"},{"id":"/2022/12/13/pointer-events-in-react-native","metadata":{"permalink":"/blog/2022/12/13/pointer-events-in-react-native","source":"@site/blog/2022-12-13-pointer-events-in-react-native.md","title":"Pointer Events in React Native","description":"Today we are sharing an experimental cross-platform pointer API for React Native. We\u2019ll go over motivations, how it works, and its benefits to React Native users. There are instructions on how to enable and we\u2019re excited to hear your feedback!","date":"2022-12-13T00:00:00.000Z","formattedDate":"December 13, 2022","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":9.035,"hasTruncateMarker":true,"authors":[{"name":"Luna Wei","title":"Software Engineer at Meta","url":"https://twitter.com/lunaleaps","imageURL":"https://github.com/lunaleaps.png","key":"lunaleaps"},{"name":"Vincent Riemer","title":"Software Engineer at Meta","url":"https://twitter.com/vincentriemer","imageURL":"https://github.com/vincentriemer.png","key":"vincentriemer"}],"frontMatter":{"title":"Pointer Events in React Native","authors":["lunaleaps","vincentriemer"],"tags":["announcement"],"date":"2022-12-13T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"First-class Support for TypeScript","permalink":"/blog/2023/01/03/typescript-first"},"nextItem":{"title":"React Native Core Contributor Summit 2022","permalink":"/blog/2022/11/22/react-native-core-contributor-summit-2022"}},"content":"Today we are sharing an experimental cross-platform pointer API for React Native. We\u2019ll go over motivations, how it works, and its benefits to React Native users. There are instructions on how to enable and we\u2019re excited to hear your feedback!\\n\\nIt\u2019s been over a year since we shared [our many platform vision](https://reactnative.dev/blog/2021/08/26/many-platform-vision) on the wins of building beyond mobile and how it sets a higher bar for all platforms. During this time, we\'ve increased our investments in React Native for VR, Desktop, and Web. With differences in hardware and interactions on these platforms, it raised the question of how React Native should holistically handle input.\\n\\n\x3c!--truncate--\x3e\\n\\n### Going Beyond Touch\\n\\nDesktop and VR have historically relied on mouse and keyboard input where mobile is primarily touch. That narrative has evolved with touch-screen laptops and growing needs to support interactions via keyboard and pen on mobile. All of which the React Native touch event system is not equipped to handle.\\n\\nAs a result, users of out-of-tree platforms fork React Native and/or create custom native components and modules to support critical features like hover detection or left-click. This divergence leads to prop redundancy with event handlers serving similar purposes but for different platforms. It adds complexity to the framework and makes code-sharing between platforms tedious. For these reasons, the team was motivated to provide a cross-platform pointer API.\\n\\nReact Native aims to provide robust and expressive APIs to build for many platforms while maintaining characteristic platform experiences. Designing such an API is challenging yet thankfully there is prior art in the pointer space that React Native can leverage.\\n\\n### Looking to Web\\n\\nWeb is a platform with similar challenges in scaling to many platforms while also considering future-proof design. The World Wide Web consortium (W3C) is tasked with setting standards and proposals to build a Web that is interoperable amongst different platforms and browsers.\\n\\nMost relevant for our needs, the W3C has defined behavior for an abstract form of input, called a pointer. The [Pointer Events](https://www.w3.org/TR/pointerevents3/) specification builds on mouse events and aims to provide a single set of events and interfaces for cross-device pointer input while still allowing for device-specific handling when necessary.\\n\\nFollowing the Pointer Events specification provides React Native users many benefits. Beyond addressing the problems mentioned earlier, it raises the capabilities of platforms that haven\u2019t historically had to consider multi-input type interactions. Think attaching a bluetooth mouse to your Android phone or the Apple pencil supporting hover on the iPad M2.\\n\\nBeing spec-complaint also provides opportunity for knowledge sharing between Web and React Native. Education of Web expectations around Pointer Events can doubly serve React Native developers. However, we also recognize that React Native requirements are different than web and our approach to specifications is best effort with well documented deviations so expectations are clear. There is related work of aligning certain Web standards to [reduce API fragmentation](https://github.com/react-native-community/discussions-and-proposals/pull/496) in accessibility and performance APIs.\\n\\n## Porting Web Platform Tests\\n\\nWhile the Pointer Events specification provides interfaces and behavior descriptions of the API, we found it wasn\u2019t specific enough for us to confidently make changes and point to the specification as verification. However, web browsers use another mechanism to ensure compliance and interoperability \u2014 the [Web Platform Tests](https://web-platform-tests.org/)!\\n\\nThe Web Platform Tests are written to work against the browser\u2019s imperative DOM APIs \u2014 unsupported by React Native as it uses its own view primitives. This means that we aren\u2019t able to code-share the tests with browsers and instead have an analogous testing API for React Native that makes it easier to port those Web Platform Tests.\\n\\nWe implemented a new manual testing framework which we are now using for verifying our implementations through RNTester. These tests are tentatively named the RNTester Platform Tests and are still fairly basic. Our implementation provides an API to construct test cases as components themselves which are rendered and where the results are reported solely through the UI.\\n\\n![GIF showing a side by side comparison of the \\"Pointer Events hoverable pointer attributes test\\" running in React Native (iOS) on the left, and Web (the original implementation) on the right.](/blog/assets/pointer-events-wpt-demo.gif)\\n\\nThese tests will continue to be helpful as we further the completeness of our Pointer Events implementation. These tests will also scale to test Pointer Events implementations on platforms beyond Android and iOS. As the number of tests in our suite increase we will be looking to automate the running of these tests so that we are better equipped to catch regressions in our implementations.\\n\\n## How it works\\n\\nMuch of our Pointer Events implementation builds off existing infrastructure for dispatching touch events. On Android and iOS we leverage the relevant MotionEvent and UITouch events. The general flow of event dispatching is illustrated below.\\n\\n![Diagram of code flow for interpreting Android and iOS UI input events into Pointer Events. On Android, input handlers \\"onTouchEvent\\" and \\"onHoverEvent\\" fire \\"MotionEvents\\" that are interpreted into Pointer Events and through JSI are dispatched to the React renderer. iOS takes a similar path with input handlers \\"touchesBegan\\", \\"touchesMoved\\", \\"touchesEnded\\", and \\"hovering\\" interpreting \\"UITouch\\" and \\"UIEvent\\" into Pointer Events.](/blog/assets/pointer-events-code-flow.png)\\n\\nUsing Android as an example, the general approach to leveraging platform events are:\\n\\n1. Iterate through all pointers of the `MotionEvent` and do a depth-first search to determine the target React view of each pointer and its ancestral path.\\n2. Map the category of `MotionEvent` to the relevant pointer events. There is a 1-to-many relationship between `MotionEvent` and `PointerEvent`. In the illustration of their relationship, dotted lines indicate fired events if the pointing device does not support hover.\\n\\n![A diagram illustrating the relationship of types of Android MotionEvents into Pointer Events fired. Some pointer events are conditionally fired if pointing device does not support hover. \\"ACTION_DOWN\\" and \\"ACTION_POINTER_DOWN\\" fire pointerdown and conditionally fire pointerenter, pointerover. \\"ACTION_MOVE\\" and \\"ACTION_HOVER_MOVE\\" fire pointerover, pointermove, pointerout, pointerup. \\"ACTION_UP\\" and \\"ACTION_POINTER_UP\\" fire pointerup and conditionally fire pointerout, pointerleave.](/blog/assets/pointer-events-motionevent-relationship.png)\\n\\n1. Build the `PointerEvent` interface with platform details from the `MotionEvent` and cached state of previous interactions. (Ex. [the `button` property](https://w3c.github.io/pointerevents/#the-button-property))\\n2. Dispatch the pointer events from Android to React Native\u2019s [core event queue](https://github.com/facebook/react-native/blob/main/ReactCommon/react/renderer/core/EventQueueProcessor.cpp#L20) and leverage JSI to call the [`dispatchEvent`](https://github.com/facebook/react/blob/main/packages/react-native-renderer/src/ReactFabricEventEmitter.js#L83) method in `react-native-renderer` which iterates through the React tree for the bubble and capture phase of the event.\\n\\n## Implementation Progress\\n\\nWhen it comes to our current progress of implementing the Pointer Events specification we\u2019ve focused on a solid baseline implementation of the most common events that handle things like pressing, hovering, and moving.\\n\\n### Events\\n\\n| Implemented    | Work in Progress | Yet to be Implemented |\\n| -------------- | ---------------- | --------------------- |\\n| onPointerOver  | onPointerCancel  | onClick               |\\n| onPointerEnter |                  | onContextMenu         |\\n| onPointerDown  |                  | onGotPointerCapture   |\\n| onPointerMove  |                  | onLostPointerCapture  |\\n| onPointerUp    |                  | onPointerRawUpdate    |\\n| onPointerOut   |                  |                       |\\n| onPointerLeave |                  |                       |\\n\\n:::info\\n\\nonPointerCancel has been hooked up to the native platform\u2019s \\"cancel\\" event but this does not necessarily correspond to when the web platform expects them to fire.\\n\\n:::\\n\\n### Event Properties\\n\\nFor each of the events mentioned above we\u2019ve also implemented the majority of the properties expected in the PointerEvent object \u2014 though in React Native these are exposed through the `event.nativeEvent` property. You can find an enumeration of all the implemented properties in the [event object\u2019s Flowtype interface definition](https://github.com/facebook/react-native/blob/59ee57352738f030b41589a450209e51e44bbb06/Libraries/Types/CoreEventTypes.js#L175). One notable exception to being completely implemented is the `relatedTarget` property as exposing a native view reference in this ad-hoc manner isn\u2019t trivial.\\n\\n## Future Work and Exploration\\n\\nIn addition to the events above there are also some other APIs related to Pointer Events. In the future, we plan to be implement these APIs as a part of this effort. These APIs include:\\n\\n- Pointer Capture API\\n  - Includes the imperative API exposed on element references including `setPointerCapture()`, `releasePointerCapture()`, and `hasPointerCapture()`.\\n- `touch-action` style property\\n  - The web uses this CSS property to declaratively negotiate gestures between the browser and a website\u2019s own event handling code. In React Native this could be used for negotiating the event handling between a View\u2019s pointer event handlers and a parent ScrollView.\\n- `click`, `contextmenu`, `auxclick`\\n  - `click` is an abstract definition of interaction that may be triggered through accessibility paradigms or other characteristic platform interactions.\\n\\nAnother benefit of the native Pointer Events implementation is that it will allow us to revisit and improve various forms of gesture handling currently limited only to touch events and handled in JavaScript by the Responder, Pressability, and PanResponder APIs.\\n\\nFurthermore, we are continuing to explore including an implementation of the `EventTarget` interface for React Native host components (i.e. `add`/`removeEventListener`) which we believe will make possible more user-land abstractions for handling pointer interactions.\\n\\n## Trying it Out\\n\\nOur Pointer Events implementation is still experimental but we\u2019re interested in getting feedback from the community on what we\u2019ve shared. If you are interested in trying this API you\u2019ll need to enable a couple feature flags:\\n\\n### Enable Feature Flags\\n\\n:::note\\n\\nPointer Events are only implemented for the [New Architecture (Fabric)](https://reactnative.dev/docs/the-new-architecture/use-app-template) and are only available for React Native 0.71+ which at the time of writing is a release candidate.\\n\\n:::\\n\\nIn your entry JavaScript file (index.js in the default React Native app template) you\u2019ll need to enable the `shouldEmitW3CPointerEvents` flag for Pointer Events and `shouldPressibilityUseW3CPointerEventsForHover` to use Pointer Events in `Pressability`.\\n\\n```js\\nimport ReactNativeFeatureFlags from \'react-native/Libraries/ReactNative/ReactNativeFeatureFlags\';\\n\\n// enable the JS-side of the w3c PointerEvent implementation\\nReactNativeFeatureFlags.shouldEmitW3CPointerEvents = () => true;\\n\\n// enable hover events in Pressibility to be backed by the PointerEvent implementation\\nReactNativeFeatureFlags.shouldPressibilityUseW3CPointerEventsForHover =\\n  () => true;\\n```\\n\\n### iOS-specific\\n\\nIn order to ensure that the pointer events are sent from the native iOS renderer you\u2019ll need to flip a native feature flag in your native app\u2019s initialization code (typically `AppDelegate.mm`).\\n\\n```objc\\n#import <React/RCTConstants.h>\\n\\n// ...\\n\\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\\n{\\n    RCTSetDispatchW3CPointerEvents(YES);\\n\\n    // ...\\n}\\n```\\n\\nNote that to ensure that the Pointer Event implementation can distinguish between mouse and touch pointers on iOS you need to add [`UIApplicationSupportsIndirectInputEvents`](https://developer.apple.com/documentation/bundleresources/information_property_list/uiapplicationsupportsindirectinputevents) to your Xcode project\u2019s `info.plist`.\\n\\n### Android-specific\\n\\nSimilarly to iOS Android has a feature flag that you\u2019ll need to enable in your app\u2019s initialization \u2014 typically your `onCreate` for your root React activity or surface.\\n\\n```java\\nimport com.facebook.react.config.ReactFeatureFlags;\\n\\n//... somewhere in initialization\\n\\n@Override\\npublic void onCreate() {\\n    ReactFeatureFlags.dispatchPointerEvents = true;\\n}\\n```\\n\\n### JavaScript\\n\\n```js\\nfunction onPointerOver(event) {\\n  console.log(\\n    \'Over blue box offset: \',\\n    event.nativeEvent.offsetX,\\n    event.nativeEvent.offsetY,\\n  );\\n}\\n\\n// ... in some component\\n<View\\n  onPointerOver={onPointerOver}\\n  style={{height: 100, width: 100, backgroundColor: \'blue\'}}\\n/>;\\n```\\n\\n## Feedback Welcome\\n\\nToday Pointer Events are used by our VR platform and powering the Oculus Store, but we\'re also looking for early community feedback on both our approach and what we have for an implementation so far. We are excited to share our further progress with you and if you have questions or thoughts around this work, join us on the [dedicated discussion on Pointer Events](https://github.com/react-native-community/discussions-and-proposals/discussions/557)."},{"id":"/2022/11/22/react-native-core-contributor-summit-2022","metadata":{"permalink":"/blog/2022/11/22/react-native-core-contributor-summit-2022","source":"@site/blog/2022-11-22-react-native-core-contributor-summit-2022.md","title":"React Native Core Contributor Summit 2022","description":"After years of pandemic and online-only events, we really felt it was time to bring the Core Contributors of React Native together!","date":"2022-11-22T00:00:00.000Z","formattedDate":"November 22, 2022","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":7.825,"hasTruncateMarker":true,"authors":[{"name":"Micha\u0142 Pierzcha\u0142a","title":"Head of Technology at Callstack","url":"https://twitter.com/thymikee","imageURL":"https://github.com/thymikee.png","key":"thymikee"},{"name":"Nicola Corti","title":"Software Engineer at Meta","url":"https://twitter.com/cortinico","imageURL":"https://github.com/cortinico.png","key":"cortinico"}],"frontMatter":{"title":"React Native Core Contributor Summit 2022","authors":["thymikee","cortinico"],"tags":["announcement"],"date":"2022-11-22T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Pointer Events in React Native","permalink":"/blog/2022/12/13/pointer-events-in-react-native"},"nextItem":{"title":"Announcing React Native 0.70","permalink":"/blog/2022/09/05/version-070"}},"content":"After years of pandemic and online-only events, we really felt it was time to bring the Core Contributors of React Native together!\\n\\nThat\u2019s why at the beginning of September, we gathered some of the active core contributors of React Native, library maintainers, and the Meta\u2019s React Native and Metro teams to the **Core Contributor Summit 2022**. [Callstack](https://www.callstack.com/) hosted the Summit in their HQ in Wroc\u0142aw, Poland, as a part of the [React Native EU](https://www.react-native.eu/) conference happening at the same time.\\n\\nTogether with the React Native core team, we devised a series of **workshops** in which the attendees could participate. The topics were:\\n\\n- \u200b\u200bReact Native Codegen & TypeScript Support\\n- \u200b\u200bReact Native New Architecture Library Migration\\n- \u200b\u200bReact Native Monorepo\\n- Metro Web and Ecosystem Alignment\\n- Metro Simplified Release Workflow\\n\\nWe were impressed by the amount of knowledge-sharing and collaboration over those two days. In this blog post, we\u2019d like to give you a sneak peek of the results of this gathering.\\n\\n\x3c!--truncate--\x3e\\n\\n### React Native Codegen & TypeScript Support\\n\\n[React Native\u2019s Codegen](https://github.com/reactwg/react-native-new-architecture/blob/main/docs/codegen.md) is a fundamental part of the New Architecture of React Native. Supporting and improving it is among our top priorities for the future of React Native. For instance, earlier this year, we added support for generic code starting from TypeScript specs rather than Flow.\\n\\nIn this session, we took the opportunity to onboard new contributors to Codegen, by explaining its core concept and describing how it works. We then focused on two major areas:\\n\\n#### 1. Supporting **new types** that are currently unsupported by Codegen. One of the highly requested ones was the [string union types in TypeScript](https://github.com/Titozzz/react-native/tree/codegen-string-union).\\n\\nA team of a few people moved into a meeting room to tackle this task. They encountered and overcame some difficulties along the way, like how to run unit tests for Codegen. They spent quite some time understanding the code execution flow before starting to deal with the code. After some hours of collaborative work, they ended up with the first prototype that was able to recognize string unions. This experience was extremely useful in discussing design patterns and the ideal architecture we may want in the future.\\n\\n#### 2. Improving **[auto-linking for iOS](https://github.com/facebook/react-native/pull/34580)**, which was missing a use case.\\n\\nSpecifically, auto-linking could not work well in scenarios where libraries and the app were living together in a monorepo. Android already supported this use case but it was missing for iOS.\\n\\nWorking with the contributors on Codegen helped us realize that it wasn\u2019t trivial to work in its codebase. For example, adding the support for one type required to copy-and-paste the same code in four different places: modules with specs written in Flow, modules with specs written in TypeScript, components with specs written in Flow, and components with specs written in TypeScript.\\n\\nThis realization pushed us to create an [umbrella task](https://github.com/facebook/react-native/issues/34872) to reach out for help to the community in order to improve the status of the codebase toward a more maintainable one.\\n\\nThe participation was outstanding: we managed to quickly assign the first **40 tasks in 5 days**. At the end of October, the community completed **47 tasks** and many others are ready and waiting to be merged.\\n\\nThis initiative also contributed to the [Hacktoberfest](https://hacktoberfest.com/) for all the people who contributed to these improvements!\\n\\n### \u200b\u200bReact Native New Architecture Library Migration\\n\\nThe hot topic in the React Native space is the New Architecture. Having **libraries** that support the New Architecture is a crucial point in the [migration for the whole ecosystem](/blog/2022/06/16/resources-migrating-your-react-native-library-to-the-new-architecture). Therefore, we want to support library maintainers in migrating to the New Architectures.\\n\\nInitially, this session started as a brainstorming, where the core contributors had the opportunity to ask the React Native team all the questions they had related to the New Architecture. This in-person feedback loop was crucial for both the core contributors to bring clarity and for the React Native team to collect feedback. Some of the shared feedback and concerns will end up being implemented in React Native 0.71.\\n\\nWe then moved to practically migrating as many libraries to the new architecture as possible. During this session, we kicked off the migration process for several community packages, such as `react-native-document-picker`, `react-native-store-review`, and `react-native-orientation`.\\n\\nAs a reminder, if you\u2019re also migrating a library and need support in doing so, please reach out to our [New Architecture Working Group](https://github.com/reactwg/react-native-new-architecture) on GitHub.\\n\\n### \u200b\u200bReact Native Monorepo\\n\\nReleasing a new version of React Native is not trivial today. React Native is one of the most downloaded packages on NPM, and we want to make sure that our release process is smooth.\\n\\nThat\u2019s why we want to refactor the `react-native` repository and implement the **Monorepo RFC** ([#480](https://github.com/react-native-community/discussions-and-proposals/pull/480)).\\n\\nIn this session, we initially brainstormed and collected opinions from every contributor, as it\u2019s crucial that we evolve our repository to reduce the breaking changes for our downstream dependencies.\\n\\nWe then started working on two fronts. First, we had to expand our Continuous Integration infrastructure to support our monorepo, adding [Verdaccio](https://verdaccio.org/) to our testing infrastructure. We then started renaming & adding scopes to several of our packages, resulting in 6 distinct contributions.\\n\\nYou can track the status of this effort under this [umbrella issue](https://github.com/facebook/react-native/issues/34692) and we hope to share more on this effort in the near future.\\n\\n### Metro Web and Ecosystem Alignment\\n\\n[Metro](https://github.com/facebook/metro), our JavaScript Bundler, is a foundational and integrated part of the React Native development experience and we want to make sure it works with the latest standards in the JS ecosystem.\\n\\nThe focus of this session was to discuss improving Metro\'s feature set to work better for web use cases and with the npm and bundler ecosystem. Two major areas of discussion:\\n\\n#### 1. Adopting the `\\"exports\\"` ([package entry points](https://nodejs.org/api/packages.html#package-entry-points)) specification\\n\\nFrom the [Node.js documentation](https://nodejs.org/api/packages.html#package-entry-points):\\n\\n\x3c!-- alex ignore clearly --\x3e\\n\\n:::info\\nThe [\\"exports\\"](https://nodejs.org/api/packages.html#exports) provides a modern alternative to [\\"main\\"](https://nodejs.org/api/packages.html#main) allowing multiple entry points to be defined, conditional entry resolution support between environments, and **preventing any other entry points besides those defined in [\\"exports\\"](https://nodejs.org/api/packages.html#exports)**. This encapsulation allows module authors to define the public interface for their package clearly.\\n:::\\n\\nAdopting the `\\"exports\\"` specification has a lot of potential. In this session, we debated on how to handle [Platform Specific Code](/docs/platform-specific-code#platform-specific-extensions) with `\\"exports\\"`. Considering many factors, we came up with a fairly non-breaking rollout plan for `\\"exports\\"`, by adding a `\\"strict\\"` and `\\"non-strict\\"` mode to Metro resolver. We discussed how leveraging [builder-bob](https://github.com/callstack/react-native-builder-bob) would help library creators adopt the strict mode without friction.\\n\\nThis discussion resulted in:\\n\\n1. An [RFC](https://github.com/react-native-community/discussions-and-proposals/pull/534) for Metro on how package exports would work with React Native.\\n2. An [RFC](https://github.com/nodejs/node/pull/45367) for Node.js to include \u201creact-native\u201d as a Community Condition.\\n\\n#### 2. Web and bundler ecosystem\\n\\nThe Metro team shared progress from their partnership with Expo and the intent to continue this working model for upcoming bundle splitting and tree-shaking support. We touched again on ES module support and considered potential future features such as Yarn PnP and output optimization on the web. We discussed how Metro\u2019s core shares logic and data structures with Jest and opportunities for more reuse.\\n\\nDevelopers surfaced insightful use cases for bundle splitting and interoperability with third-party tooling. This led us to discuss potential extension points in Metro and improving current documentation.\\n\\nThis discussion provided us with good grounding for the next day\'s session on simplifying the release workflow.\\n\\n### Metro Simplified Release Workflow\\n\\nAs mentioned, releasing React Native is not trivial.\\n\\nThings get harder as we need to release React Native, the React Native CLI, and Metro. Those tools are connected to each other as React Native and the CLI both depend on Metro. This creates some friction when any of the packages releases a new version.\\n\\nCurrently, we manage this through direct communication and synchronized releases, but there is space for improvement.\\n\\nIn this session, we reconsidered the **dependencies** between React Native, Metro, and the CLI. We uncovered how some design decisions during the [\u201cLean Core\u201d effort](https://github.com/react-native-community/discussions-and-proposals/issues/6), when we extracted the CLI from React Native, made these two projects codependent with some functionalities duplicated among efforts. The decisions back then made sense and allowed the CLI team to iterate faster than ever.\\n\\nIt was about time to revisit them and take the experience of both teams to figure out the way through. As a result, the Metro team will take over the [`@react-native-community/cli-plugin-metro`](https://github.com/react-native-community/cli/tree/main/packages/cli-plugin-metro) development, temporarily moving it back to the core of React Native, and then most likely to the Metro monorepo.\\n\\n![](/blog/assets/core-contributor-summit-2022.jpg)\\n\\nThe biggest takeaway, apart from three hours of drawing dependencies between the packages on the whiteboard, was for the CLI and Metro team to exchange their issues, experiences, and plans, resulting in a better understanding of each other.\\n\\nWe wouldn\u2019t be able to achieve this level of cooperation without actually meeting each other.\\n\\n---\\n\\nWe\u2019re still impressed by how spending several hours together for a couple of days resulted in so much knowledge-sharing and cross-pollination of ideas. During this summit, we planted the seeds for initiatives that will help us improve and re-shape the React Native ecosystem.\\n\\nWe want to say thank you again to [Callstack](https://www.callstack.com/) for hosting us and to all the participants for joining us at the Core Contributor Summit 2022.\\n\\nIf you\u2019re interested in joining the development of React Native, make sure you join our open initiatives and read the [contribution guide](https://reactnative.dev/contributing/overview) we have on our website. We hope to meet you in person as well in the future!"},{"id":"/2022/09/05/version-070","metadata":{"permalink":"/blog/2022/09/05/version-070","source":"@site/blog/2022-09-05-version-070.md","title":"Announcing React Native 0.70","description":"We are excited to release a new version of React Native, 0.70.0. This version comes with several improvements like a new unified configuration for Codegen, Hermes as default engine, and full CMake support for Android builds along with a refresh of the documentation for the New Architecture. Read on to learn more!","date":"2022-09-05T00:00:00.000Z","formattedDate":"September 5, 2022","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"},{"label":"release","permalink":"/blog/tags/release"}],"readingTime":4.6,"hasTruncateMarker":true,"authors":[{"name":"Dmytro Rykun","title":"Software Engineer at Meta","url":"https://github.com/dmytrorykun","imageURL":"https://github.com/dmytrorykun.png","key":"dmytrorykun"},{"name":"Thibault Malbranche","title":"Lead Mobile Engineer at Brigad","url":"https://twitter.com/titozzz","imageURL":"https://github.com/titozzz.png","key":"titozzz"},{"name":"Nicola Corti","title":"Software Engineer at Meta","url":"https://twitter.com/cortinico","imageURL":"https://github.com/cortinico.png","key":"cortinico"},{"name":"Lorenzo Sciandra","title":"Senior Software Engineer at Microsoft","url":"https://twitter.com/kelset","imageURL":"https://github.com/kelset.png","key":"kelset"}],"frontMatter":{"title":"Announcing React Native 0.70","authors":["dmytrorykun","titozzz","cortinico","kelset"],"tags":["announcement","release"]},"unlisted":false,"prevItem":{"title":"React Native Core Contributor Summit 2022","permalink":"/blog/2022/11/22/react-native-core-contributor-summit-2022"},"nextItem":{"title":"Hermes as the Default","permalink":"/blog/2022/07/08/hermes-as-the-default"}},"content":"We are excited to release a new version of React Native, 0.70.0. This version comes with several improvements like a new unified configuration for Codegen, Hermes as default engine, and full CMake support for Android builds along with a refresh of the documentation for the New Architecture. Read on to learn more!\\n\\n### Sections\\n\\n- [New Architecture\u2019s New Documentation](/blog/2022/09/05/version-070#new-architectures-new-documentation)\\n- [Hermes as default engine](/blog/2022/09/05/version-070#hermes-as-default-engine)\\n- [A new unified configuration for Codegen](/blog/2022/09/05/version-070#a-new-unified-configuration-for-codegen)\\n- [Android Auto-linking for New Architecture libraries](/blog/2022/09/05/version-070#android-auto-linking-for-new-architecture-libraries)\\n- [Full CMake support for Android builds](/blog/2022/09/05/version-070#full-cmake-support-for-android-builds)\\n- [Highlights of 0.70](/blog/2022/09/05/version-070#highlights-of-070)\\n\\n\x3c!--truncate--\x3e\\n\\n## New Architecture\u2019s New Documentation\\n\\nOver the last few months, we have been working to add more content to the [New Architecture](https://reactnative.dev/docs/next/the-new-architecture/landing-page) section of the documentation. In the new section you can find migration guides, examples and tutorials to get you up to speed.\\n\\nAlong with it, you can find new documents diving into [Why a New Architecture](https://reactnative.dev/docs/next/the-new-architecture/why) and [the various parts of it](https://reactnative.dev/docs/next/the-new-architecture/pillars). We hope this helps you better understand the rationale behind the new APIs.\\n\\nAny feedback is more than welcome, please let us know in the [react-native-website](https://github.com/facebook/react-native-website) repository.\\n\\n## Hermes as default engine\\n\\nReact Native 0.70 is the first version with Hermes, our in-house JS engine, enabled by default.\\n\\nThis is the result of collaborative effort between the Hermes team and the React Native team, alongside with the priceless contributions from the community. We worked to improve and fine tune Hermes to make it more performant and deliver highly requested features by the community.\\n\\nYou can read more about it in the [official announcement blogpost](https://reactnative.dev/blog/2022/07/08/hermes-as-the-default).\\n\\n## A new unified configuration for Codegen\\n\\nWith 0.70, we introduced a unified way to define the Codegen specs for both iOS and Android. Previously, you had to put the Android configuration in a separate `build.gradle` file.\\n\\nNow, you can define it directly in the package.json with:\\n\\n```json\\n  \\"codegenConfig\\": {\\n    \\"name\\": \\"CustomAnimationView\\",\\n    \\"type\\": \\"components\\",\\n    \\"jsSrcsDir\\": \\"./src\\",\\n    \\"android\\": {\\n      \\"javaPackageName\\": \\"com.custom.animation\\"\\n    }\\n  }\\n```\\n\\nThis improvement provides a more consistent experience for library maintainers in migrating their codebases to the New Architecture.\\n\\nIf you are a library maintainer, please make sure to let us know how the process is going for you in [this discussion](https://github.com/reactwg/react-native-new-architecture/discussions/6) in the [React Native New Architecture working group](https://github.com/reactwg/react-native-new-architecture).\\n\\n## Android Auto-linking for New Architecture libraries\\n\\nWith 0.70, users on New Architecture are able to automatically link libraries without any additional configuration on their Android.mk or CMake files.\\n\\nAutolinking is a crucial part of the React Native development experience. It allows you to include external libraries with a `yarn add` command, without dealing with CocoaPods or Gradle setups.\\n\\nThe New Architecture required us to adapt the auto-linking features to support libraries which are using the Codegen and exposing native code to app developers.\\n\\nWhile Autolinking worked well for New Architecture libraries on iOS, the same was not true for Android. With 0.70 we closed this gap and you can now keep on including libraries with `yarn add` to your project: they will be linked correctly on any architecture.\\n\\n## Full CMake support for Android builds\\n\\nStarting from 0.70, users can now use CMake to configure their Native builds. While we don\u2019t expect app users to directly write C++ code, you still need an entry point for the native compilation.\\n\\nFrom now on you can use a `CMakeLists.txt` file instead of an `Android.mk` file for anything Android/Native related in your project.\\n\\nThis change benefits both app and library users on the New Architecture as:\\n\\n- The CMake file created in your app is way smaller ([3 lines of code](https://github.com/facebook/react-native/blob/9923ac1b524ae959abdf50a28a3094198015f77e/packages/rn-tester/android/app/src/main/jni/CMakeLists.txt#L6-L11) versus [50+ for Android.mk files](https://github.com/facebook/react-native/blob/main/template/android/app/src/main/jni/Android.mk?rgh-link-date=2022-07-20T18%3A29%3A07Z)). This makes for an easier update experience between React Native versions in the future and less code to maintain on your end.\\n- Codegen is now generating both `Android.mk` and `CMakeLists.txt`, so libraries should not worry about doing anything if they\'re using the default setup we provide for New Architecture libraries.\\n- The Auto-linking mentioned above will work with both CMake and Android.mk files out of the box.\\n- Despite apps being free to use either `Android.mk` or CMake files, the recommended solution in the future would be CMake files (due to better documentation, tooling and ecosystem around CMake).\\n\\n## Highlights of 0.70\\n\\nAs mentioned above, some of the more important improvements in this release are centered around the New Architecture experience. However, there have been other notable changes, including:\\n\\n- Fix for Catalyst is live, set `mac_catalyst_enabled` to `true` in Podfile (see [upgrade-helper](https://react-native-community.github.io/upgrade-helper/?from=0.69.1&to=0.70.0-rc.0) diff for details).\\n- Bumping metro to 0.72.0 which will enable the new React JSX Transform: [reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html](https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html).\\n- Removing `reactnativeutilsjni` as it is built from the same sources as `reactnativejni` which results in ~220 KBs saved from every Android APK build. ([https://github.com/facebook/react-native/pull/34339](https://github.com/facebook/react-native/pull/34339)).\\n\\n### Breaking changes\\n\\nThere have also been a few breaking changes:\\n\\n- Removed jest/preprocessor from the react-native package ([0301cb285b](https://github.com/facebook/react-native/commit/0301cb285b2e85b48a397fe58d565196654d9754) by [@motiz88](https://github.com/motiz88))\\n- Remove nonstandard `Promise.prototype.done` ([018d5cf985](https://github.com/facebook/react-native/commit/018d5cf985497273dd700b56168cf1cf64f498d5) by [@motiz88](https://github.com/motiz88))\\n\\nPlease also note that the version of Metro has been bumped to 0.72, which comes [with 5 breaking changes](https://github.com/facebook/metro/releases/tag/v0.72.0).\\n\\n### Upgrades\\n\\nAnd we upgraded some of our dependencies:\\n\\n- Bump RN CLI to v9.0.0\\n- Bump Android Gradle Plugin to 7.2.1\\n- Bump Gradle to 7.5.1\\n- Bump RCT-Folly to 2021-07-22\\n- Bump Metro to 0.72\\n- Bump SoLoader to 0.10.4\\n\\nYou can check out the full list of changes [in the changelog](https://github.com/facebook/react-native/blob/main/CHANGELOG.md).\\n\\n### Acknowledgements\\n\\n88 contributors with their 493 commits have helped to make this release possible - thanks everyone! We are also thankful to everyone else who gave their feedback to ensure this release would be as stable as possible."},{"id":"/2022/07/08/hermes-as-the-default","metadata":{"permalink":"/blog/2022/07/08/hermes-as-the-default","source":"@site/blog/2022-07-08-hermes-as-the-default.md","title":"Hermes as the Default","description":"Last October, we announced that we had started work towards making Hermes the default engine for all React Native apps.","date":"2022-07-08T00:00:00.000Z","formattedDate":"July 8, 2022","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"},{"label":"release","permalink":"/blog/tags/release"}],"readingTime":4.455,"hasTruncateMarker":true,"authors":[{"name":"Michael Leon","title":"Software Engineer at Meta","imageURL":"https://github.com/fbmal7.png","key":"micleo"}],"frontMatter":{"title":"Hermes as the Default","authors":["micleo"],"tags":["announcement","release"]},"unlisted":false,"prevItem":{"title":"Announcing React Native 0.70","permalink":"/blog/2022/09/05/version-070"},"nextItem":{"title":"Announcing React Native 0.69","permalink":"/blog/2022/06/21/version-069"}},"content":"Last October, we [announced](/blog/2021/10/26/toward-hermes-being-the-default) that we had started work towards **making** **Hermes the default engine for all React Native apps**.\\n\\nHermes has provided a lot of value to React Native inside of Meta, and we believe the open-source community will benefit as well. Hermes is designed for resource constrained devices and optimizes for start up, app size, and memory consumption. One key difference between Hermes and other JS engines is its ability to compile JavaScript source code to bytecode ahead of time. This precompiled bytecode is bundled inside the binary, and saves the interpreter from having to perform this expensive step during app startup.\\n\\nSince the announcement, a lot of work has gone into making Hermes better, and today, we are excited to share that **React Native 0.70 will ship with Hermes as the default engine.** This means that all new projects starting on v0.70 will have Hermes enabled by default. With the rollout coming up in July, we want to work closely with the community and make sure the transition is smooth and brings value to all users. This blogpost will go over what you can expect from the change, performance benchmarks, new features, and more. Note that you don\u2019t need to wait for React Native 0.70 to start using Hermes - you can **follow [these instructions](/docs/hermes#enabling-hermes) to enable Hermes on your existing React Native app**.\\n\\nNote that while Hermes will be enabled by default in new React Native projects, support for other engines will continue.\\n\\n\x3c!--truncate--\x3e\\n\\n## Benchmarking\\n\\nWe measured three different metrics important to app developers: TTI, binary size, and memory consumption. We used the React Native app [Mattermost](https://github.com/mattermost/mattermost-mobile) for testing. We ran these experiments for both Android and iOS on high end hardware from 2020.\\n\\n- TTI, or time to interactive, is the duration of time from the app being launched to the user being able to interact with it. For this benchmark, we define it as the time from pressing the app icon to the first screen being rendered. We also show screen recordings of starting up Mattermost.\\n- The binary size was measured as APK size on android and IPA size on iOS.\\n- The memory consumption data was collected by using the Mattermost app over the span of a couple minutes. The same actions were performed in the app on both engines.\\n\\n## Android Benchmarking Data\\n\\nAll the android tests were performed on a Samsung Galaxy S20.\\n\\n<figure>\\n  <img src=\\"/blog/assets/hermes-default-android-data.png\\" alt=\\"Android Benchmarking Data\\" />\\n</figure>\\n\\n### TTI Video\\n\\n<figure>\\n  <img src=\\"/blog/assets/hermes-default-android-video.gif\\" alt=\\"Android TTI Video\\" />\\n</figure>\\n\\n## iOS Benchmarking Data\\n\\nAll the iOS tests were performed on an iPhone 12 Pro.\\n\\n<figure>\\n  <img src=\\"/blog/assets/hermes-default-ios-data.png\\" alt=\\"iOS Benchmarking Data\\" />\\n</figure>\\n\\n### TTI Video\\n\\n<figure>\\n  <img src=\\"/blog/assets/hermes-default-ios-video.gif\\" alt=\\"iOS TTI Video\\" />\\n</figure>\\n\\n### Slowed Down TTI Video, to better show the difference in startup time.\\n\\n<figure>\\n  <img src=\\"/blog/assets/hermes-default-ios-slow-video.gif\\" alt=\\"iOS Slowed Down TTI Video\\" />\\n</figure>\\n\\n## React Native/Hermes Integration\\n\\nWe addressed a long-standing problem that has caused compatibility issues and is a recurrent problem when releasing new React Native versions: React Native depended on Hermes via prebuilt binaries distributed through CocoaPods and npm, which makes it possible to have API or [ABI incompatibilities](https://github.com/react-native-community/discussions-and-proposals/issues/257). To solve this problem, starting on React Native 0.69, Hermes is built alongside every version of React Native. This ensures full compatibility with each version React Native. This also creates a much tighter integration. It unlocks a more rapid iteration time to develop features or deploy bug fixes, and will give us greater confidence in making sure big changes to Hermes are done correctly. There is more in-depth information on the new integration change [here](https://github.com/facebook/react-native-website/pull/3159/files).\\n\\n## iOS Intl\\n\\nWe finished the iOS counterpart implementation for [`Intl`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl), the ECMAScript Internationalization API that provides a broad range of language sensitive functionality. This was a long-standing [gap](https://github.com/facebook/hermes/issues/23) that prevented some developers from using Hermes. The Android implementation, done in partnership with Microsoft, was shipped in React Native 0.65. With React Native 0.70, developers will have native support on both platforms.\\n\\nTypical implementations for `Intl` require importing large lookup tables or data like [Unicode CLDR](https://cldr.unicode.org/index). However, that can come with an expensive size increase of up to 6MB, so in order to avoid bloating the binary size of Hermes, we implemented `Intl` by calling into APIs exposed by iOS itself. This means we can take advantage of all the locale and internationalization data that comes with iOS already.\\n\\n## Ongoing Work\\n\\nAs we continue evolving Hermes, we want to give the community a sense of our immediate priorities: improving developer experience and ensuring nobody avoids using Hermes due to lack of JavaScript language features. More specifically, we\'re:\\n\\n- Enabling developers to run the sampling profiler directly from the Chrome devtools UI.\\n- Adding support for [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt), a long-standing request from the community that may block some developers from using Hermes as it can\u2019t be polyfilled.\\n- Adding support for [`WeakRef`](https://github.com/facebook/hermes/issues/658), which will expose new memory management controls to developers.\\n\\n## Wrap Up\\n\\nHermes becoming the default marks the beginning of a long-term journey. We are working on new features that will enable the community to write efficient apps for many years to come. We also encourage the community to reach out on our [GitHub Repo](https://github.com/facebook/react-native) to post any bugs, questions, feedback or ideas! We have created a `hermes` label that can be used for any Hermes-specific posts."},{"id":"/2022/06/21/version-069","metadata":{"permalink":"/blog/2022/06/21/version-069","source":"@site/blog/2022-06-21-version-069.md","title":"Announcing React Native 0.69","description":"We are excited to release a new version of React Native, 0.69.0. This version comes with several improvements for the New Architecture of React Native and new features: React 18 support & bundled Hermes. Read on to learn more!","date":"2022-06-21T00:00:00.000Z","formattedDate":"June 21, 2022","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"},{"label":"release","permalink":"/blog/tags/release"}],"readingTime":3.865,"hasTruncateMarker":true,"authors":[{"name":"Marek Fo\u0159t","title":"Software Engineer at Shopify","url":"https://twitter.com/marekfort","imageURL":"https://github.com/fortmarek.png","key":"fortmarek"},{"name":"Nicola Corti","title":"Software Engineer at Meta","url":"https://twitter.com/cortinico","imageURL":"https://github.com/cortinico.png","key":"cortinico"}],"frontMatter":{"title":"Announcing React Native 0.69","authors":["fortmarek","cortinico"],"tags":["announcement","release"]},"unlisted":false,"prevItem":{"title":"Hermes as the Default","permalink":"/blog/2022/07/08/hermes-as-the-default"},"nextItem":{"title":"Helping migrate React Native libraries to the New Architecture","permalink":"/blog/2022/06/16/resources-migrating-your-react-native-library-to-the-new-architecture"}},"content":"We are excited to release a new version of React Native, 0.69.0. This version comes with several improvements for the New Architecture of React Native and new features: React 18 support & bundled Hermes. Read on to learn more!\\n\\n### Sections\\n\\n- [React 18](/blog/2022/06/21/version-069#react-18)\\n- [Bundled Hermes](/blog/2022/06/21/version-069#bundled-hermes)\\n- [Highlights of 0.69](/blog/2022/06/21/version-069#highlights-of-069)\\n\\n\x3c!--truncate--\x3e\\n\\n## React 18\\n\\nWe are delighted to share with you that React Native 0.69 is the first release to support React 18. React 18 has brought [lots of improvements](https://reactjs.org/blog/2022/03/29/react-v18.html), like new hooks such as `useId`. Additionally, React 18 includes new concurrency features such as `useTransition` or full Suspense support.\\n\\nOn React Native 0.69, React 18 is enabled by default. However, if you have not migrated to the New Architecture, you will only be able to leverage the features that don\'t use concurrent rendering and concurrent features. The New Architecture has been built with concurrent rendering in mind but we cannot add that support for the old architecture.\\n\\nYou can learn more about the React 18 support in React Native [here](/docs/next/react-18-and-react-native).\\n\\n## Bundled Hermes\\n\\nBefore this release, Hermes and React Native were released separately. That led to confusion on which version of Hermes is compatible with which version of React Native. To remedy this issue, starting with React Native 0.69 we will be shipping a compatible version of Hermes alongside React Native. Making this change will make using Hermes in React Native much more stable.\\n\\nUsing the proper version of Hermes is handled by React Native, however, make sure to follow the steps in the [upgrade helper](https://react-native-community.github.io/upgrade-helper/?from=0.68.2&to=0.69.0) to ensure the integration works as intended. If you don\'t have Hermes enabled already, you can follow the steps [here](/docs/hermes) to do so. While we will continue supporting other JavaScript engines, we recommend everyone to migrate to Hermes to have the best experience and to make sure we can support you better.\\n\\nNote that users on the New Architecture on Android will need to **build Hermes from source**. For building Hermes from source, Windows users will need to additionally follow [these steps](/architecture/bundled-hermes#android-users-on-new-architecture-building-on-windows).\\n\\nIf you are interested to learn more about how React Native bundles Hermes works under the hood, you can check out the deep-dive documentation [here](/architecture/bundled-hermes).\\n\\n## New Architecture\\n\\nWe are continuing the roll-out of the New Architecture for both Android and iOS. If you have not migrated your app or library, yet, follow the steps [here](https://github.com/reactwg/react-native-new-architecture#guides). You can also read the [latest update](/blog/2022/06/16/resources-migrating-your-react-native-library-to-the-new-architecture) on tools and resources for the New Architecture to learn more.\\n\\n## Highlights of 0.69\\n\\nAs mentioned above, the most important improvements in this release are centered around React 18 support and bundled Hermes. However, there have been other notable changes, including:\\n\\n- [Deprecating support](https://github.com/facebook/react-native/commit/982ca30de079d7e80bd0b50365d58b9048fb628f) for iOS/tvOS SDK 11.0, version 12.4+ is now required\\n- [Better support](https://github.com/facebook/react-native/commit/c5babd993a2bed2994ecc4710fa9e424b3e6cfc2) for M1 users developing for Android\\n- [Addition](https://github.com/facebook/react-native/commit/0480f56c5b5478b6ebe5ad88e347cad2810bfb17) of the new `.xcode.env` configuration file for more deterministically sourcing the node executable\\n- [React Native now uses](https://github.com/facebook/react-native/commit/50c8e973f067d4ef1fc3c2eddd360a0709828968) the latest status bar API from Android 11\\n- [Support for C++17](https://github.com/facebook/react-native/commit/c2e4ae39b8a5c6534a3fa4dae4130166eda15169)\\n- [New](https://github.com/facebook/react-native/commit/1a1a304ed2023d60547aef65b1a7bf56467edf08) `hotkeysEnabled` option in the iOS debug menu\\n\\n### Breaking changes\\n\\nThere have also been a few breaking changes:\\n\\n- React Native CLI has been bumped to a new major version of [8.0](https://github.com/react-native-community/cli/releases/tag/v8.0.0):\\n  - `link` and `unlink` commands have been removed in the favour of autolinking\\n  - Deprecated `initCompat` has been removed, use `init` command instead\\n  - Removed deprecated `run-android` properties\\n  - Removed `install` and `uninstall` commands\\n  - Removed assets and hooks from `react-native.config.js` \u2013 you\'ll need to remove these properties from your config\\n  - `podspecPath` was removed from the iOS dependency config\\n  - Removed `--project-path` option from a `run-ios`\\n  - Changed iOS source directory detection from looking for an Xcode project to looking for a Podfile\\n- Support for `console.disableYellowBox` [has been dropped](https://github.com/facebook/react-native/commit/b633cc130533f0731b2577123282c4530e4f0abe)\\n- Already deprecated prop types have been removed ([cdfddb4dad](https://github.com/facebook/react-native/commit/cdfddb4dad7c69904850d7e5f089a32a1d3445d1), [3e229f27bc](https://github.com/facebook/react-native/commit/3e229f27bc9c7556876ff776abf70147289d544b), [10199b1581](https://github.com/facebook/react-native/commit/10199b158138b8645550b5579df87e654213fe42))\\n- `removeListener`, deprecated since RN 0.65, [was removed](https://github.com/facebook/react-native/commit/8dfbed786b40082a7a222e00dc0a621c0695697d) from Appearance\\n- If you were using `SegmentedComponentIOS`, you will now need to replace it with the third-party library, for example [segmented-control](https://github.com/react-native-segmented-control/segmented-control) ([235f168574](https://github.com/facebook/react-native/commit/235f1685748442553e53f8ec6d904bc0314a8ae6))\\n\\n### Upgrades\\n\\nAnd we upgraded some of our dependencies:\\n\\n- Bump [of AGP to 7.1.1](https://github.com/facebook/react-native/commit/200488e87cf4bc355e03c78cd814b97b23452117) - we recommend sticking to this version in your apps\\n- `boost` for Android was updated to 1.76 [to align with iOS](https://github.com/facebook/react-native/commit/5cd6367f0b86543274a15bb6d0e53a8545fed845)\\n- Ruby [was bumped to 2.7.5](https://github.com/facebook/react-native/commit/2c87b7466e098c5cd230e02b279fc7bc7a357615)\\n- Direct metro dependencies [have been upgraded](https://github.com/facebook/react-native/commit/b74e964e705c40834acad7020562e870cdad9db1) to 0.70.1\\n\\nYou can check out the full list of changes [in the changelog](https://github.com/facebook/react-native/blob/main/CHANGELOG.md#0690).\\n\\n### Acknowledgements\\n\\n80 contributors with their 629 commits have helped to make this release possible - thanks everyone!\\n\\nWe are also thankful to the release testers, supporters, and everyone else who gave their feedback to ensure this release will be as stable as possible."},{"id":"/2022/06/16/resources-migrating-your-react-native-library-to-the-new-architecture","metadata":{"permalink":"/blog/2022/06/16/resources-migrating-your-react-native-library-to-the-new-architecture","source":"@site/blog/2022-06-16-resources-migrating-your-react-native-library-to-the-new-architecture.md","title":"Helping migrate React Native libraries to the New Architecture","description":"tl; dr: We are working on improving the resources supporting the React Native New Architecture. We have already released a repository to help migrate your app (RNNewArchitectureApp) and one for your libraries (RNNewArchitectureLibraries). We are also revamping the New Architecture guide on the Website and we created a GitHub Working Group to answer questions related to the New Architecture.","date":"2022-06-16T00:00:00.000Z","formattedDate":"June 16, 2022","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":5.99,"hasTruncateMarker":true,"authors":[{"name":"Riccardo Cipolleschi","title":"Software Engineer at Meta","url":"https://twitter.com/CipolleschiR","imageURL":"https://github.com/cipolleschi.png","key":"cipolleschi"}],"frontMatter":{"title":"Helping migrate React Native libraries to the New Architecture","authors":["cipolleschi"],"tags":["announcement"],"date":"2022-06-16T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Announcing React Native 0.69","permalink":"/blog/2022/06/21/version-069"},"nextItem":{"title":"React Native Accessibility - GAAD 2022 Update","permalink":"/blog/2022/05/19/GAAD-2022-update"}},"content":"**tl; dr**: We are working on improving the resources supporting the React Native New Architecture. We have already released a repository to help migrate your app ([RNNewArchitectureApp](https://github.com/react-native-community/RNNewArchitectureApp)) and one for your libraries ([RNNewArchitectureLibraries](https://github.com/react-native-community/RNNewArchitectureLibraries)). We are also revamping the [New Architecture guide](https://github.com/facebook/react-native-website/pull/3037) on the Website and we created a [GitHub Working Group](https://github.com/reactwg/react-native-new-architecture/discussions) to answer questions related to the New Architecture.\\n\\n\x3c!--truncate--\x3e\\n\\n## Introduction\\n\\nIn this post we are sharing an update on tools and resources to help you migrate your **Native Modules** and **Native Components** to their **New Architecture** equivalents, **TurboModule** and **Fabric Components**.\\n\\nReact Native users leverage vast number of open source libraries for building apps. For a complete and consistent ecosystem, it is necessary that these libraries migrate such that everyone can benefit from the unlocked capabilities and performance improvements of the New Architecture.\\n\\nHere is what we\u2019re working on to support library developers in migrating to the New Architecture:\\n\\n- **Documentation:** We are expanding the [New Architecture guide](https://github.com/facebook/react-native-website/pull/3037) on the website to cover more concepts of the New Architecture and how to develop your components.\\n- **Example Migrations:** We\u2019ve set up two repositories to demonstrate how to migrate a React Native app to the New Architecture ([RNNewArchitectureApp](https://github.com/react-native-community/RNNewArchitectureApp)) and how to create a **Fabric Component** and a **TurboModule** that work with both architectures ([RNNewArchitectureLibraries](https://github.com/react-native-community/RNNewArchitectureLibraries)).\\n- **Support:** Earlier this year, we created a [GitHub Working Group](https://github.com/reactwg/react-native-new-architecture/discussions) dedicated to discussion and questions around the New Architecture.\\n\\nIn this post, we will dig deeper into these resources and explain in more detail how you can use them most efficiently. Finally, we will provide a snapshot of the current migration state for the most used React Native libraries.\\n\\n### Documentation\\n\\nIn the past 6 months, we\u2019ve added a [guide on adopting the New Architecture](https://github.com/reactwg/react-native-new-architecture#guides) and an [architecture deep-dive](/architecture/overview) on Fabric. We plan to expand this to include more guides and documentation around creating TurboModules, understanding CodeGen, and more. We plan to have updates to share by the 0.70 release.\\n\\nCurrently, the **New Architecture** guide covers how to [migrate your app](https://github.com/reactwg/react-native-new-architecture/blob/main/docs/enable-apps.md) and [your libraries](https://github.com/reactwg/react-native-new-architecture/blob/main/docs/enable-libraries-prerequisites.md) to support the New Architecture properly.\\n\\nIf you are interested in the evolution of this guide, or have feedback, you can follow along on [this](https://github.com/facebook/react-native-website/pull/3037) pull request.\\n\\n### Example Migrations\\n\\nFor developers who may want to follow along in code, we\u2019ve prepared two example repositories.\\n\\n#### RNNewArchitectureApp\\n\\n[This repo](https://github.com/react-native-community/RNNewArchitectureApp) was created to demonstrate how to migrate an app, the native modules and the native components from the legacy architecture on the React Native version 0.67 to the New Architecture and the most recent version of React Native. Each commit corresponds to an isolated migration step.\\n\\n<figure>\\n    <img src=\\"/blog/assets/new-arch-example-steps-to-migrate-an-app.png\\" alt=\\"Example steps to migrate an app\\" />\\n    <figcaption>Commit list for a migration in the RNNewArchitectureApp repository</figcaption>\\n</figure>\\n\\nThe repo is organized as follows:\\n\\n- A **main** branch has no code but a README.md which advertises other branches.\\n- Several migration branches which show a migration from a specific version of RN to another.\\n\\nSome of the migration branches also have a **RUN.md** file which describes in a more human-readable fashion the exact steps that have been applied in every commit.\\n\\nWe plan to keep this example up to date with the most recent stable releases, adding migrations to any minor release of React Native we are going to release. If you notice issue with any of the steps, please file an issue in the repository. This will hold until we have the reasonable feeling that most of the React Native users have migrated to the New Architecture.\\n\\n#### RNNewArchitectureLibraries\\n\\nSimilarly, [this repo](https://github.com/react-native-community/RNNewArchitectureLibraries) provides a step-by-step guide on how to create a **TurboModule** and a **Fabric Component**. It has a focus on ensuring backward compatibility between the New Architecture and the legacy one.\\n\\nThe repository is organized in a similar way to the previous one:\\n\\n- A **main** branch has no code but a README.md which advertises other branches.\\n- Other branches to show how to develop **TurboModules** and **Fabric Components**.\\n\\nWe plan to keep this example updated onto new releases of React Native, especially releases that affect library development, as well as add more examples on how to use advanced features (for example: implementing commands, event emitters, custom state). If you notice errors, please file an issue in the example repository.\\n\\n### Support\\n\\nWe\u2019ve created a dedicated [working group](https://github.com/reactwg/react-native-new-architecture) to give the community space to ask questions and get updates on the New Architecture. If you are a library maintainer, this is a valuable resource to find answers to your questions, and for us to know about your requirements. To join, please follow [these instructions](https://github.com/reactwg/react-native-new-architecture#how-to-join-the-working-group). Everyone is welcome.\\n\\nThe working group is organized into several sections:\\n\\n- [Announcements](https://github.com/reactwg/react-native-new-architecture/discussions/categories/announcements): A place to share milestones and significant updates on the RN New Architecture Rollout\\n- [Deep Dive](https://github.com/reactwg/react-native-new-architecture/discussions/categories/deep-dive): A place to chat about deep dives and technical-specific topics\\n- [Documentation](https://github.com/reactwg/react-native-new-architecture/discussions/categories/documentation): A place to chat about the New Architecture documentation and migration material\\n- [Libraries](https://github.com/reactwg/react-native-new-architecture/discussions/categories/libraries): A place to chat about 3rd party libraries and their migration story to the New Architecture\\n- [Q&A](https://github.com/reactwg/react-native-new-architecture/discussions/categories/q-a): A place to ask the community for help on the New Architecture topics\\n- [Releases](https://github.com/reactwg/react-native-new-architecture/discussions/categories/releases): A place to chat about release specific bugs & build problems\\n\\nTo use this group effectively:\\n\\n- **Make sure your library is listed inside the [Libraries](https://github.com/reactwg/react-native-new-architecture/discussions/categories/libraries) section**. This will help us share a status update on the migration of your library and will help us understand which struggles library authors are facing to support you better.\\n- **Leverage the Q&A [section](https://github.com/reactwg/react-native-new-architecture/discussions/categories/q-a) if you face a blocker and need support**. Our team and community experts are monitoring and will support at our best effort.\\n- **Keep an eye on the other sections for topics that may affect you**. A new release may introduce exactly the API that you were looking for. You can subscribe to particular discussions via GitHub.\\n\\nWe plan to support this group until the **New Architecture** is enabled by default and all the major libraries have been migrated to it.\\n\\n### Migration Status of Popular Libraries\\n\\nLibraries maintainers have been sharing with us [in the working group](https://github.com/reactwg/react-native-new-architecture/discussions/categories/libraries) the status of their migration effort, and we wanted to provide you with a quick overview:\\n\\n- [react-native-gesture-handler](https://github.com/reactwg/react-native-new-architecture/discussions/15): \u2705 Migrated\\n- [react-native-navigation](https://github.com/reactwg/react-native-new-architecture/discussions/17): \ud83c\udfc3\u200d\u2642\ufe0f Ongoing\\n- [react-native-pager-view](https://github.com/reactwg/react-native-new-architecture/discussions/16): \ud83c\udfc3\u200d\u2642\ufe0f Ongoing\\n- [react-native-reanimated](https://github.com/reactwg/react-native-new-architecture/discussions/14): \u2705 Migrated. In the process of testing and profiling for performances\\n- [react-native-screens](https://github.com/reactwg/react-native-new-architecture/discussions/13): \ud83c\udfc3\u200d\u2642\ufe0f Ongoing\\n- [react-native-slider](https://github.com/reactwg/react-native-new-architecture/discussions/38): \ud83c\udfac Started\\n- [react-native-template-new-architecture](https://github.com/reactwg/react-native-new-architecture/discussions/21): \u2705 Migrated. Gradually adopting/testing more companion Libraries\\n- [react-native-template-typescript](https://github.com/reactwg/react-native-new-architecture/discussions/22): \u2705 Migrated\\n- [react-native-webview](https://github.com/reactwg/react-native-new-architecture/discussions/19): \ud83c\udfac Started\\n\\n## Next Steps\\n\\nWe are invested in supporting the React Native community\u2019s adoption of the New Architecture. Concretely, we will continue to:\\n\\n- Offer best-effort support in the **Working Group.**\\n- Provide more examples about how to achieve amazing results with the New Architecture in the **RNNewArchitecture** repositories.\\n- Provide clear and up-to-date documentation on the **New Architecture**.\\n- Track the migration status of essential React Native libraries in the **Working Group**.\\n- Simplify the migration path for developers\\n\\nIn addition, React Native 0.69 will ship with improved devX for app and library developers for New Architecture adoption. You can find more information about the 0.69.0 release [here](https://github.com/reactwg/react-native-releases/discussions/21).\\n\\nWe are excited about what we will build together with the **New Architecture**!"},{"id":"/2022/05/19/GAAD-2022-update","metadata":{"permalink":"/blog/2022/05/19/GAAD-2022-update","source":"@site/blog/2022-05-19-GAAD-2022-update.md","title":"React Native Accessibility - GAAD 2022 Update","description":"May 19th, 2022 marks the 11th annual celebration of Global Accessibility Awareness Day and we wanted to update everyone on the accessibility progress we\u2019ve made on the React Native Framework. Meta (formerly Facebook) was the first organization to take the GAAD pledge in 2020, committing to making the React Native framework accessible.","date":"2022-05-19T00:00:00.000Z","formattedDate":"May 19, 2022","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":2.125,"hasTruncateMarker":true,"authors":[{"name":"Alex Tait","title":"React Native Accessibility Community Manager","url":"https://twitter.com/AT_Fresh_Dev","imageURL":"https://github.com/alextait1.png"}],"frontMatter":{"title":"React Native Accessibility - GAAD 2022 Update","author":"Alex Tait","authorTitle":"React Native Accessibility Community Manager","authorURL":"https://twitter.com/AT_Fresh_Dev","authorImageURL":"https://github.com/alextait1.png","authorTwitter":"AT_Fresh_Dev","tags":["announcement"],"date":"2022-05-19T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Helping migrate React Native libraries to the New Architecture","permalink":"/blog/2022/06/16/resources-migrating-your-react-native-library-to-the-new-architecture"},"nextItem":{"title":"Announcing React Native 0.68","permalink":"/blog/2022/03/30/version-068"}},"content":"May 19th, 2022 marks the 11th annual celebration of Global Accessibility Awareness Day and we wanted to update everyone on the accessibility progress we\u2019ve made on the React Native Framework. Meta (formerly Facebook) was the [first organization to take the GAAD pledge in 2020](/blog/2021/03/08/GAAD-React-Native-Accessibility), committing to making the React Native framework accessible.\\n\\n> _\u201cWe hope this pledge makes it easier for developers using React Native to create fully accessible mobile apps and inspires other organizations to make similar commitments to a more accessible future.\u201d_\\n>\\n> \u2014 [Mike Shebanek, head of accessibility Meta, 2020](https://gaad.foundation/gaadpledge/)\\n\\nThe process initially began with a thorough review and gap analysis of the framework focused on React Native utilized the iOS and Android APIs to support accessibility features. Dozens of issues have since been fixed or closed out, making good on the pledge to make React Native accessible and advancing the accessibility of the framework ever forward.\\n\\nWe didn\u2019t stop there, and in early 2022, we reviewed and prioritized the remaining issues from this gap analysis on the [Improved React Native Accessibility Board](https://github.com/facebook/react-native/projects/15) based on their impact on developers and end users.\\n\\n\x3c!--truncate--\x3e\\n\\n## Fixes that have already landed in 2022\\n\\n- [Android: Disabled state not announced/disabled functionality not applied for some components](https://github.com/facebook/react-native/issues/30840)\\n- [Android: Position in collection not supported by some components](https://github.com/facebook/react-native/issues/30977)\\n- [Android: Make links independently focusable by Talkback](https://github.com/facebook/react-native/pull/31757)\\n\\n## Fixes currently in progress\\n\\n- [iOS/Android: Text input error announcement](https://github.com/facebook/react-native/issues/30848)\\n- [Android: Form field error state announcement](https://github.com/facebook/react-native/issues/30859)\\n- [Android: Role description is announced before the components text, rather than after](https://github.com/facebook/react-native/issues/31042)\\n\\n## Contributor highlight\\n\\n\x3c!-- alex disable he-she herself-himself her-him --\x3e\\n\\nWe want to recognize and send a tremendous thank you to [Fabrizo Bertoglio](https://github.com/fabriziobertoglio1987) who has contributed several high-quality accessibility fixes to React Native in 2021 and 2022.\\n\\nFabrizio has made it a personal goal to enable users through high quality solutions. By learning how to use TalkBack and VoiceOver himself, he has discovered how difficult it can be for screen reader users to experience everyday applications. He wants to build software that removes friction from these experiences and please disabled users.\\n\\nHis pull requests have been very high quality, well documented, and include thorough test cases. Well done Fabrizio! The React Native Accessibility community thanks you for your many outstanding contributions.\\n\\n\x3c!-- alex enable he-she herself-himself her-him --\x3e\\n\\n## What\u2019s next in 2022\\n\\nOur goal is to fix as many of the remaining accessibility issues as possible in 2022. We will also be reviewing the backlog of [React Native community reported issues](https://github.com/facebook/react-native/issues) to look for any new accessibility-related requests."},{"id":"/2022/03/30/version-068","metadata":{"permalink":"/blog/2022/03/30/version-068","source":"@site/blog/2022-03-30-version-068.md","title":"Announcing React Native 0.68","description":"Hello everyone! Today we are announcing the 0.68.0 release of React Native, with opt-in to the New React Native Architecture, bug fixes and more.","date":"2022-03-30T00:00:00.000Z","formattedDate":"March 30, 2022","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"},{"label":"release","permalink":"/blog/tags/release"}],"readingTime":3.66,"hasTruncateMarker":true,"authors":[{"name":"Lorenzo Sciandra","title":"Senior Software Engineer at Microsoft","url":"https://twitter.com/kelset","imageURL":"https://github.com/kelset.png","key":"kelset"},{"name":"Andrei Shikov","title":"Software Engineer at Meta","url":"https://twitter.com/shikasd_","imageURL":"https://github.com/ShikaSD.png","key":"shikaSD"}],"frontMatter":{"title":"Announcing React Native 0.68","authors":["kelset","shikaSD"],"tags":["announcement","release"]},"unlisted":false,"prevItem":{"title":"React Native Accessibility - GAAD 2022 Update","permalink":"/blog/2022/05/19/GAAD-2022-update"},"nextItem":{"title":"An update on the New Architecture Rollout","permalink":"/blog/2022/03/15/an-update-on-the-new-architecture-rollout"}},"content":"Hello everyone! Today we are announcing the 0.68.0 release of React Native, with opt-in to the New React Native Architecture, bug fixes and more.\\n\\n### Sections\\n\\n- [Highlights of 0.68](/blog/2022/03/30/version-068#highlights-of-068)\\n- [Opting in to the New Architecture](/blog/2022/03/30/version-068#opting-in-to-the-new-architecture)\\n- [Website updates](/blog/2022/03/30/version-068#website-updates)\\n- [Interested in helping React Native stabilise new releases?](/blog/2022/03/30/version-068#interested-in-helping-react-native-stabilize-new-releases)\\n\\n\x3c!--truncate--\x3e\\n\\n## Highlights of 0.68\\n\\n[Andrei Calazans](https://twitter.com/Andrei_Calazans) helped us selecting the most relevant changes that 0.68 brings along:\\n\\n### Breaking changes and version bumps\\n\\nThis version brings along a few breaking changes:\\n\\n- React Native has been updated to Node 16, the latest LTS. Since on CI we test for LTS and the previous LTS, this change means that users are now required to use a version of Node >= 14.\\n- Android Gradle Plugin was updated to 7.0.1, enforcing JDK 11 for Android builds, so make sure to upgrade your configurations (we recommend you use the `zulu11` JDK flavor for both Intel and M1 Macs)\\n- Removed `fallbackResource` from `RCTBundleURLProvider` API on iOS. This parameter can be safely removed from the method call without replacement.\\n\\nTooling has also been updated - here are the main bumps:\\n\\n- @react-native-community/cli to 7.0.3\\n- Metro to 0.67\\n- react-devtools-core dependency to 4.23.0\\n- Flipper to 0.125.0\\n- react-native-codegen to 0.0.9\\n- Kotlin to 1.6.10\\n- Soloader to 0.10.3\\n- Gradle to 7.3\\n- Android compile and target SDK to 31\\n\\nAlso, thanks to [this commit](https://github.com/facebook/react-native/commit/bd7caa64f5d6ee5ea9484e92c3629c9ce711f73c) by [Nicola Corti](https://github.com/cortinico) the Android Gradle Plugin will download the default version of NDK by itself, so you don\u2019t have to specify and install it separately anymore.\\n\\n### Other improvements\\n\\nThere are a lot of other changes and fixes landed in this release, but here\u2019s a small selection that you might be interested in:\\n\\n- [Gijs Weterings](https://github.com/GijsWeterings) [fixed Forwarding testID to RCTModalHostView](https://github.com/facebook/react-native/commit/5050e7eaa17cb417baf7c20eb5c4406cce6790a5) for easier E2E targeting of Modals.\\n- [Liam Jones](https://github.com/liamjones) [fixed an issue](https://github.com/facebook/react-native/commit/9d2df5b8ae9) where calling `console.error` caused the RedBox to appear alongside the LogBox.\\n- [Sam Kline](https://github.com/samkline) [fixed the empty blank screen](https://github.com/facebook/react-native/commit/c8d823b9bd9619dfa1f5851af003cc24ba2e8830) after a BundleDownloader failure in dev mode on Android.\\n- [Jeffrey Hyer](https://github.com/JeffreyHyer) [fixed an issue](https://github.com/facebook/react-native/commit/9c5e177a79c) where the KeyboardAvoidingView didn\'t work as expected with the `onLayout` prop.\\n\\nIf you are interested in the full list of changes, you can read it in the changelog [at the link here](https://github.com/facebook/react-native/blob/main/CHANGELOG.md#0680).\\n\\n### Acknowledgements\\n\\nThis release includes 614 commits by 68 contributors! Thank you all!\\n\\nWe wanted to also thank the release testers and supporters who helped us catch regressions before the stable 0.68.0 release: you are incredibly valuable to the success of this release!\\n\\nIf you, your app or your company is interested in joining the \u201cRelease Tester\u201d program, you can [sign up here](https://forms.gle/fPuPE1MZRDGWNqpd6).\\n\\n## Opting in to the New Architecture\\n\\nAs briefly mentioned above, React Native 0.68 is the first version with opt-in support for the Fabric Renderer and the TurboModule system. This marks a crucial milestone for the rollout of the New React Native Architecture. To help you get up to speed with the changes, we added [the Architecture section](/architecture/overview) to the website, where you can find several in-depth guides about internals of the new systems.\\n\\nAt the same time, we added the [migration guide](https://github.com/reactwg/react-native-new-architecture#guides) to the documentation and launched [a working group](https://github.com/reactwg/react-native-new-architecture) dedicated to the New Architecture. You can find more information, including how to opt in, in [the previous blog post](/blog/2022/03/15/an-update-on-the-new-architecture-rollout).\\n\\nPlease note that the New Architecture still needs some fine tuning. Some of the third-party libraries that you depend on might not be migrated yet, and you may encounter issues that we haven\u2019t discovered yet. If you do so, please report them to our [New Architecture Working Group](https://github.com/reactwg/react-native-new-architecture).\\n\\n**About React 18:** React 18\'s new rendering engine is not supported by React Native 0.68, this will happen in a future version. This is because React 18 relies on the New Architecture to benefit from the new capabilities presented in [the React 18 announcement blog post](https://reactjs.org/blog/2022/03/29/react-v18.html). For more information, see the [React Conf keynote here](https://www.youtube.com/watch?v=FZ0cG47msEk&t=1530s).\\n\\n## Website updates\\n\\nAlong with improvements to the main codebase, with the help of [Simek](https://github.com/Simek), [Megatron4537](https://github.com/Megatron4537) and [slorber](https://github.com/slorber) there have been quite a few improvements landing on the website too! In particular, you will now be able to learn how to contribute to React Native via the new section in the top toolbar.\\nMoreover, the \u201cContributing\u201d section and the new \u201cArchitecture\u201d section are now unversioned \u2014 there is now only one copy of these sections, rather than one for each React Native version."},{"id":"/2022/03/15/an-update-on-the-new-architecture-rollout","metadata":{"permalink":"/blog/2022/03/15/an-update-on-the-new-architecture-rollout","source":"@site/blog/2022-03-15-an-update-on-the-new-architecture-rollout.md","title":"An update on the New Architecture Rollout","description":"Hi everyone,","date":"2022-03-15T00:00:00.000Z","formattedDate":"March 15, 2022","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":6.81,"hasTruncateMarker":true,"authors":[{"name":"Nicola Corti","title":"Software Engineer at Meta","url":"https://twitter.com/cortinico","imageURL":"https://github.com/cortinico.png","key":"cortinico"}],"frontMatter":{"title":"An update on the New Architecture Rollout","authors":["cortinico"],"tags":["announcement"],"date":"2022-03-15T00:00:00.000Z"},"unlisted":false,"prevItem":{"title":"Announcing React Native 0.68","permalink":"/blog/2022/03/30/version-068"},"nextItem":{"title":"React Native - H2 2021 Recap","permalink":"/blog/2022/01/21/react-native-h2-2021-recap"}},"content":"Hi everyone,\\n[As previously announced](/blog/2022/01/21/react-native-h2-2021-recap#the-new-architecture-rollout-and-releases):\\n\\n> 2022 is going to be the year of the New Architecture in open source\\n\\nIf you still haven\u2019t had the time to look into the New React Native Architecture (the Fabric Renderer and the TurboModule system), there is no better time to do it **than now**!\\n\\nWe would like to share with the community some initiatives and material we prepared to make sure everyone is onboard on this endeavor.\\n\\n\x3c!--truncate--\x3e\\n\\n### The Working Group\\n\\nRecently, we launched the [React Native New Architecture Working Group](https://github.com/reactwg/react-native-new-architecture) on GitHub, a _discussion only_ repository to coordinate and support the rollout of the New Architecture across the ecosystem.\\n\\nWe envision this working group as a space where the community can **meet**, share **ideas**, and **discuss** challenges during the adoption of the New Architecture. Moreover, we\'re going to use this working group to **share** information and updates with the wider community for the sake of transparency.\\n\\nTo keep the discussion focused, we decided to have this working group **open to read** publicly and **restricted to write** only for approved users.\\n\\nIf you wish to join the conversation, you can [fill in this form](https://forms.gle/8emgdwFZXuzEpyyn9) to either **apply or nominate** someone that you think would be a valuable addition to the discussion.\\n\\n**Everyone is welcome** to apply to join the conversation.\\n\\nAs every discussion forum, we would like to stress once more the importance of being **respectful** and welcoming towards others\u2019 opinions. Please take the chance to read our [**code of conduct**](https://github.com/reactwg/react-native-new-architecture/blob/main/CODE_OF_CONDUCT.md) if you haven\u2019t yet done it.\\n\\n### The Migration Guide\\n\\nAfter several rounds of review & feedback, we finally merged **the Migration Guide** (f.k.a. _the Playbook_). You can find it [on the New Architecture working group.](https://github.com/reactwg/react-native-new-architecture#guides)\\n\\nThis Migration Guide will show you **how to create a custom Fabric component or a TurboModule** with a step-by-step approach. The guide will also show you how to **adapt your existing app or library** to use the New Architecture.\\n\\nMoreover, we would like to remind you the brand-new [Architecture section](/architecture/overview) of our website. There you can find several in-depth articles and explanation of the React Native internals. Specifically, [the Fabric section](/architecture/fabric-renderer) can help you understand the rendering pipeline in the New Architecture world.\\n\\nFinally, please consider **sharing your feedback** to this documentation material [on the working group](https://github.com/reactwg/react-native-new-architecture/discussions/7). We\u2019re constantly looking for developer\u2019s opinion, and we want to make sure we\u2019re delivering the content that you find most useful.\\n\\nOver the next months, we will look into refining and adding more documentation to help you further.\\n\\n### The New Architecture Template\\n\\nReact Native **0.68.0** is close to release. This version of React Native marks a crucial milestone in the New Architecture Rollout as it\u2019s the first version to include an **opt-in switch** in the **new app template.**\\n\\nThis means that you will be able to try the New Architecture **by changing one line** in the template. We also added extensive **comments and documentation** to the template to make sure you don\u2019t need extra reading to use it out of the box. We hope this will help you adopt the New Architecture by **reducing the amount of code** your have to write.\\n\\n\x3c!-- alex ignore simple --\x3e\\n\\nIn the next releases, we will keep on updating the template to make it even more streamlined and simple to use.\\n\\nTo enable the New Architecture on either platform, you can:\\n\\n- On iOS, run `RCT_NEW_ARCH_ENABLED=1 bundle exec pod install` inside the `ios` folder.\\n- On Android, set the `newArchEnabled` property to `true` by **either**:\\n  - Changing the corresponding line inside the `android/gradle.properties` file.\\n  - Set an environment variable `ORG_GRADLE_PROJECT_newArchEnabled=true`\\n  - Invoke Gradle with `-PnewArchEnabled=true`\\n\\nThen you can **run your app** with `yarn react-native run-android` or `run-ios` and you\u2019ll be running using Fabric and TurboModules enabled.\\n\\nPlease consider trying this new template, and [report any bug or unexpected behavior](https://github.com/reactwg/react-native-new-architecture/discussions/5) that you might face. Over the last months we worked hard to fix bugs and build failures that would have been **hard to catch** without the constant community feedback and testing.\\n\\n### The 3rd-party Libraries Ecosystem\\n\\nThe community won\'t be able to migrate to the New Architecture without the full support of **3rd-party libraries author & maintainers**.\\n\\nWe understand how this can be a tedious process, and we understand the importance of supporting users on **both** old and New Architecture. Over the next months, we will focus on supporting our library developers to help them migrate over.\\n\\nIf you\u2019re a **library developer**, [we invite you to post an update](https://github.com/reactwg/react-native-new-architecture/discussions/categories/libraries) in the New Architecture working group with the **status of your libraries**. This will help you attract early adopters and us to understand if any library is facing a blocker.\\n\\nIf instead you\u2019re a **library user**, you can [post a message here](https://github.com/reactwg/react-native-new-architecture/discussions/6) to request a migration of a library. If we identify a library that becomes a blocker for a number of users, we will try to reach out to the maintainer and understand why they haven\u2019t migrated yet.\\n\\nFinally, we would like to give a shout out to Software Mansion for releasing a new version of [`react-native-screens`](https://github.com/software-mansion/react-native-screens), which has support for both architectures. Moreover, they published a blog-post ([Introducing Fabric to react-native-screens](https://blog.swmansion.com/introducing-fabric-to-react-native-screens-fd17bf18858e)) where they **tell their migration story**. We hope you will find this story inspiring and useful to tackle your migration.\\n\\n### Releases\\n\\nWork on the 0.68 pre-release has realized much of [the improved release process we had defined last half](/blog/2022/01/19/version-067#improvements-to-release-process).\\n\\nWe\u2019re happy to share that with 0.68 we were able to:\\n\\n- Successfully onboard release work to an internal rotation. Much of this is supported by [improved documentation](/contributing/overview) on the release process which will reduce the bus factor of the release process.\\n- Initiated discussions with partners to support a [Copilot rotation](https://github.com/reactwg/react-native-releases/blob/main/docs/roles-and-responsibilities.md). We hope this effort will improve transparency of the process and inform our partners where to invest to support React Native releases and eco-system.\\n- [Onboarded several Release Supporters and Testers from the community](https://github.com/reactwg/react-native-releases/discussions/11). We had put a call-out for help last half and so many folks stepped up! The feedback from our testers and supporters have **helped us fix crucial bugs** and regressions, especially around the new architecture, for the upcoming release. Thank you to everyone who signed up and tested out the release!\\n\\nWith React Native 0.69 we will continue refining this process, ideally getting partners to provide earlier release signal and onboarding co-pilots. As always, [any feedback is more than welcome](https://github.com/reactwg/react-native-releases/discussions). If you\u2019d like to join as a release tester or supporter, [please sign up here](https://forms.gle/fPuPE1MZRDGWNqpd6).\\n\\n### Towards Hermes as Default engine\\n\\nOne of the crucial point of the New Architecture Rollout is the adoption of the new JavaScript engine: **Hermes.**\\n\\nWith the New React Native Architecture, we\u2019re going to **set Hermes as default engine**. This means that all the new documentation and templates will have Hermes enabled.\\n\\nPlease note that we\'ll continue working with the community to make sure **other engines**, such as JSC (JavaScript Core), **are supported**. You can still use the engine you wish, but you\u2019ll have to **explicitly disable Hermes**.\\n\\nTo improve the stability of Hermes, we\u2019re working towards changing the **distribution model** of Hermes. Specifically, we envision the Hermes release process **to be closer** to the React Native release process.\\n\\nThis will allow us to ship a version of React Native, with a bundled JS engine that is **fully compatible**. You won\u2019t have to deal with run-time crashes and Hermes incompatibilities that are really hard to debug and understand.\\n\\nMoreover, this will **shorten the cycle** for picking up **improvements** and bug fixes in Hermes, which will allow us to be more **responsive** to the needs of React Native users.\\n\\nWe will be sharing more on this matter in the coming months. In the meanwhile, feel free to [join the discussion](https://github.com/reactwg/react-native-new-architecture/discussions/4) about it on the Working Group.\\n\\nIf you haven\u2019t tried Hermes yet, now is the time to give it a go. And please make sure to flag any issues or blockers you might face.\\n\\nWith this, that\u2019s a wrap.\\n\\nI\u2019d like to thank Andrei, Aleksandar, Dmitry, Eli, Luna, H\xe9ctor & Neil for reviewing this blog-post and providing valuable contributions to those efforts.\\n\\nAnd looking forward to **reading your migration stories**."},{"id":"/2022/01/21/react-native-h2-2021-recap","metadata":{"permalink":"/blog/2022/01/21/react-native-h2-2021-recap","source":"@site/blog/2022-01-21-react-native-h2-2021-recap.md","title":"React Native - H2 2021 Recap","description":"While we\'re all still excited for the release of React Native 0.67, we want to take a moment to celebrate what the community achieved in the last half and share what we have on the horizon for the future of React Native.","date":"2022-01-21T00:00:00.000Z","formattedDate":"January 21, 2022","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":5.445,"hasTruncateMarker":true,"authors":[{"name":"Nicola Corti","title":"Software Engineer at Meta","url":"https://twitter.com/cortinico","imageURL":"https://github.com/cortinico.png","key":"cortinico"}],"frontMatter":{"title":"React Native - H2 2021 Recap","authors":["cortinico"],"tags":["announcement"]},"unlisted":false,"prevItem":{"title":"An update on the New Architecture Rollout","permalink":"/blog/2022/03/15/an-update-on-the-new-architecture-rollout"},"nextItem":{"title":"Announcing React Native 0.67","permalink":"/blog/2022/01/19/version-067"}},"content":"While we\'re all still excited for the [release of React Native 0.67](/blog/2022/01/19/version-067), we want to take a moment to **celebrate** what the community achieved in the last half and share what we have on the **horizon** for the future of React Native.\\n\\n\x3c!--truncate--\x3e\\n\\nSpecifically, H2 2021 was an [exciting half for both us and the community](/blog/2021/08/19/h2-2021#pushing-the-technology-forward) where we had the opportunity to invest more in our open-source ecosystem. We revamped some of our processes and created new ones from scratch that will help you, us, and the community to enjoy a **better** React Native experience.\\n\\n## Repository Health\\n\\nIn H2 2021, we invested in tackling some of the _OSS debt_ that our repository built up over the years. Specifically, most of our focus was around **pull requests**. We built an internal process to make sure all the new pull requests are addressed in a timely manner.\\n\\nAlthough this is not a complete list, we would like to highlight some **impactful** PRs we received from our contributors:\\n\\n- **Accessibility**\\n  - [#31630](https://github.com/facebook/react-native/pull/31630) `Added Support for Entrance/exit from collection by Flatlist` by [@anaskhraza](https://github.com/anaskhraza)\\n- **Crash**\\n  - [#29452](https://github.com/facebook/react-native/pull/29452) `Fix - TextInput Drawable to avoid Null Pointer Exception RuntimeError` by [@fabriziobertoglio1987](https://github.com/fabriziobertoglio1987)\\n- **Display**\\n  - [#31777](https://github.com/facebook/react-native/pull/31777) `fix: TouchableNativeFeedback ripple starts on previous touch location` by [@intergalacticspacehighway](https://github.com/intergalacticspacehighway)\\n  - [#31789](https://github.com/facebook/react-native/pull/31789) `Fix support for blobs larger than 64 KB on Android` by [@tomekzaw](https://github.com/tomekzaw)\\n  - [#31007](https://github.com/facebook/react-native/pull/31007) `Fix selectionColor doesn\'t style Android TextInput selection handles` by [@fabriziobertoglio1987](https://github.com/fabriziobertoglio1987)\\n  - [#32398](https://github.com/facebook/react-native/pull/32398) `Fix Android border positioning regression` by [@oblador](https://github.com/oblador)\\n  - [#29099](https://github.com/facebook/react-native/pull/29099) `[Android] Allows to set individual (left,top,right,bottom) dotted/dashed` by [@fabriziobertoglio1987](https://github.com/fabriziobertoglio1987)\\n  - [#29117](https://github.com/facebook/react-native/pull/29117) `[Android] Fix font weight numeric values` by [@fabriziobertoglio1987](https://github.com/fabriziobertoglio1987)\\n- **Interaction**\\n  - [#28995](https://github.com/facebook/react-native/pull/28995) `[Android] Fix TextInput Cursor jumping to the right when placeholder null` by [@fabriziobertoglio1987](https://github.com/fabriziobertoglio1987)\\n  - [#28952](https://github.com/facebook/react-native/pull/28952) `[Android] Fix non selectable Text in FlatList` by [@fabriziobertoglio1987](https://github.com/fabriziobertoglio1987)\\n  - [#29046](https://github.com/facebook/react-native/pull/29046) `[Android] onKeyPress event not fired with numeric keys` by [@fabriziobertoglio1987](https://github.com/fabriziobertoglio1987)\\n  - [#31500](https://github.com/facebook/react-native/pull/31500) `fix#29319 - ios dismiss modal` by [@intergalacticspacehighway](https://github.com/intergalacticspacehighway)\\n  - [#32179](https://github.com/facebook/react-native/pull/32179) `Fix: multiline textinput start \\"jerking\\" when trying to move cursor.` by [@xiankuncheng](https://github.com/xiankuncheng)\\n  - [#29039](https://github.com/facebook/react-native/pull/29039) `Fix to make taps on views outside parent bounds work on Android` by [@hsource](https://github.com/hsource)\\n- **Performance**\\n  - [#31764](https://github.com/facebook/react-native/pull/31764) `Optimize font handling on iOS` by [@Adlai-Holler](https://github.com/Adlai-Holler)\\n  - [#32536](https://github.com/facebook/react-native/pull/32536) `Don\'t reconstruct app component on split-screen` by [@Somena1](https://github.com/Somena1)\\n- **Testing**\\n  - [#31401](https://github.com/facebook/react-native/pull/31401) `Add unit tests for VirtualizedList render quirks` by [@NickGerleman](https://github.com/NickGerleman)\\n\\nSome of those PRs addressed issues that were impacting both Meta and the overall OSS community, given the number of reactions on the corresponding issue they closed.\\n\\nThere are so many more PRs we would like to call out, and we want to **thank** again all the people that are spending their time to help us address bugs and improve React Native.\\n\\n## Community Engagement\\n\\nAt the beginning of the half we set a goal to **communicate** with our community more and set process for the behavior to continue. Here were some of our engagements in H2 2021:\\n\\n\x3c!--alex ignore gross--\x3e\\n\\n- We had the opportunity to participate in [React Native EU](https://www.react-native.eu/) with a talk from [Joshua Gross](https://twitter.com/joshuaisgross) - [Bringing the Fabric renderer to the \u201cFacebook\u201d app](https://www.youtube.com/watch?v=xKOkILSLs0Q&t=3987s)\\n- We hosted an [\u201cAsk Us Anything\u201c (AUA) on Reddit](https://www.reddit.com/r/reactnative/comments/pzdo1r/react_native_team_aua_thursday_oct_14_9am_pt/) and received over 100 questions! AUAs are a great opportunity for both us, to get a sense of the community engagement, and you all, to ask any kind of questions. If you haven\u2019t yet, make sure you check the answers as some of them are extremely insightful\\n- We shared our [Many Platform Vision](https://reactnative.dev/blog/2021/08/26/many-platform-vision), a guide for gotchas for [Android 12 and iOS 15](https://reactnative.dev/blog/2021/09/01/preparing-your-app-for-iOS-15-and-android-12), and the progress and [vision for Hermes to become the default JS engine](https://reactnative.dev/blog/2021/10/26/toward-hermes-being-the-default) for React Native!\\n- Our own [Kevin Gozali](https://twitter.com/fkgozali) appeared on [an episode of React Native Radio podcast](https://reactnativeradio.com/episodes/rnr-222-the-new-architecture-with-kevin-gozali-from-the-rn-core-team) to talk about the new architecture.\\n- At [ReactConf 2021](https://conf.reactjs.org/), ReactConf [Rick Hanlon](https://twitter.com/rickhanlonii) shared the unified many-platform vision for React and React Native. Moreover, [Eric Rozell](https://twitter.com/EricRozell) and [Steven Moyes](https://twitter.com/moyessa) got to share the amazing progress React Native Desktop has made in supporting both Meta and Microsoft apps and showcasing the Many Platform Vision in practice.\\n\\nBeyond sharing more updates in H2 2021, we also **leaned** on our community more than ever. We relied on critical feedback from contributors as they dogfooded early drafts of the New Architecture material. As well, we were heavily supported by the expertise of our community in debugging critical release issues and improvements.\\n\\nThere is a wealth of knowledge that our community brings into React Native, and we need to continue to nurture it.\\n\\n## The New Architecture Rollout and Releases\\n\\n2022 is going to be the year of the **New Architecture in open source**.\\n\\nWe\u2019ve been working hard to deliver the infrastructure needed to rollout the New Architecture to apps and libraries. We involved some of our partners and core contributors/library maintainers to refine our support for the new architecture to get early stage feedback.\\n\\nWe are now preparing to release a new guide on our website: [Getting Started with the New Architecture](https://github.com/facebook/react-native-website/pull/2879). That will be the entry point to a collection of material that we\u2019re going to release in 2022 and will help you migrate/start your project with the new architecture.\\n\\nMoreover, we would like to stress the [importance of **giving feedback**](https://github.com/facebook/react-native-website/pull/2879) on the New Architecture material. We\u2019re still in the process of finalizing the last details and your input will help everyone adopt the new architecture more seamlessly.\\n\\n**Releases** play a critical role in the New Architecture rollout. Our goal last half was to ensure any release blocking issues did not stagnate. We approached the problem by [clarifying and improving process and responsibilities](https://github.com/facebook/react-native/wiki/Releases) for better accountability. Our release coordination now occurs in a [dedicated discussions repository](https://github.com/reactwg/react-native-releases/discussions) with [clearer release issue reporting](https://github.com/facebook/react-native/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2CType%3A+Upgrade+Issue&template=upgrade-regression-form.yml).\\n\\nIn H1 2022, we will continue to iterate on release responsibilities to support new architecture rollout. If you\u2019d like to help out testing release candidates or [working on improvements](https://github.com/facebook/react-native/projects/18), feel free to [join the discussion](https://github.com/reactwg/react-native-releases/discussions/categories/improvements)!\\n\\n## To Mobile and beyond\\n\\nAs you can see from [the ReactConf talk lineup](https://conf.reactjs.org/), React Native is not only Android & iOS.\\n\\nEarlier in 2021, we shared our [Many Platform Vision](https://reactnative.dev/blog/2021/08/26/many-platform-vision), and we had a successful time rolling out React Native on both Desktop and VR.\\n\\nWe\u2019re looking forward to **converging patterns** that are platform-specific into the React Native experience.\\n\\nFinally, we want to thank again the community for the enormous support in H2 2021. It\u2019s always amazing to see how contributors come together and support each other on GitHub, fixing bugs, sharing their and helping us deliver React Native to millions of users.\\n\\nStay tuned and looking forward to an **even more amazing 2022** \ud83c\udf89!"},{"id":"/2022/01/19/version-067","metadata":{"permalink":"/blog/2022/01/19/version-067","source":"@site/blog/2022-01-19-version-067.md","title":"Announcing React Native 0.67","description":"Happy new year everyone! Today we are announcing the latest release of React Native, 0.67.0, along with some updates on the release process that we have been working on in the past few months.","date":"2022-01-19T00:00:00.000Z","formattedDate":"January 19, 2022","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"},{"label":"release","permalink":"/blog/tags/release"}],"readingTime":3.895,"hasTruncateMarker":true,"authors":[{"name":"Lorenzo Sciandra","title":"Senior Software Engineer at Microsoft","url":"https://twitter.com/kelset","imageURL":"https://github.com/kelset.png","key":"kelset"},{"name":"Luna Wei","title":"Software Engineer at Meta","url":"https://twitter.com/lunaleaps","imageURL":"https://github.com/lunaleaps.png","key":"lunaleaps"}],"frontMatter":{"title":"Announcing React Native 0.67","authors":["kelset","lunaleaps"],"tags":["announcement","release"]},"unlisted":false,"prevItem":{"title":"React Native - H2 2021 Recap","permalink":"/blog/2022/01/21/react-native-h2-2021-recap"},"nextItem":{"title":"Toward Hermes being the Default","permalink":"/blog/2021/10/26/toward-hermes-being-the-default"}},"content":"Happy new year everyone! Today we are announcing the latest release of React Native, 0.67.0, along with some updates on the release process that we have been working on in the past few months.\\n\\n### Sections\\n\\n- [Highlights of 0.67](/blog/2022/01/19/version-067#highlights-of-067)\\n- [Improvements to Release Process](/blog/2022/01/19/version-067#improvements-to-release-process)\\n- [Interested in helping React Native stabilise new releases?](/blog/2022/01/19/version-067#interested-in-helping-react-native-stabilise-new-releases)\\n\\n\x3c!--truncate--\x3e\\n\\n## Highlights of 0.67\\n\\nAs mentioned in Meta\'s [H2 2021 plans](https://reactnative.dev/blog/2021/08/19/h2-2021), React Native is attempting more frequent releases for a shorter turnaround time for new features and fixes (like the new architecture) to land in the community. Naturally, many releases will focus on fixes and improvements.\\n\\nHere are some notable changes coming in 0.67.0:\\n\\n- Lean-core removals: [DatePickerAndroid](https://github.com/facebook/react-native/commit/7a770526c626e6659a12939f8c61057a688aa623#diff-e727e4bdf3657fd1d798edcd6b099d6e092f8573cba266154583a746bba0f346)\\n- Bump Gradle version to 7.2, Bump Kotlin version to 1.5.31 [Bump Kotlin and Gradle versions (#32319)](https://github.com/facebook/react-native/commit/9ae3367431428748f5486c782199beb4f9c6b477)\\n- A notable callout: 0.67 continues to depend on Hermes 0.9.0, unchanged from 0.66\\n\\nYou can find the [full changelog here](https://github.com/facebook/react-native/blob/main/CHANGELOG.md#v0670).\\n\\nYou can participate in the conversation on the status of this release at [this discussion](https://github.com/reactwg/react-native-releases/discussions/10) - and, as always, to help you upgrade to this version, you can use the [upgrade helper](https://react-native-community.github.io/upgrade-helper/) \u269b\ufe0f\\n\\n### Acknowledgements\\n\\nThis release includes [379 commits with 74 contributors](https://github.com/facebook/react-native/compare/0.66-stable...0.67-stable)! Thank you, to all our contributors (old and new)! You can find the [full changelog here](https://github.com/facebook/react-native/blob/main/CHANGELOG.md#v0670).\\n\\nWe wanted to also thank the release testers who helped us make sure that 0.67.0 could reach your codebases without any massive regression. Specifically, we wanted to thank:\\n\\n- Marc Rousavy ([@mrousavy](https://github.com/mrousavy)) from [Margelo](https://margelo.io/), that surfaced a [regression for Hermes 0.10](https://github.com/facebook/hermes/issues/649) (that would have never been caught on CI testing) which will be fixed in Hermes 0.11 in the 0.68 release of React Native.\\n- The Reanimated team for quickly preparing a [0.67 compatible version](https://github.com/software-mansion/react-native-reanimated/releases/tag/2.2.4) of their lib early in the 0.67 RC phase.\\n- Elias Nahum ([@enahum](https://github.com/enahum)) from [Mattermost](https://mattermost.com/)\\n- Mike Hardy ([@mikeHardy](https://github.com/mikeHardy)) working with [Invertase](https://invertase.io/)\\n\\nWe appreciate also [Rainbow](https://rainbow.me/), [Comm](https://comm.app/) and [Ledger Live](https://www.ledger.com/ledger-live) for also being part of the pilot of the \\"Release Tester\\" program (more details below).\\n\\n## Improvements to Release Process\\n\\nAs mentioned, React Native has been restructuring the release pipeline to allow for more frequent releases such that new features and fixes can roll out faster to the community.\\n\\nOver the last few months we tackled some issues that delay releases.\\n\\n### Coordination and Knowledge Sharing\\n\\nWe invested in our documentation of releases to cover how to run a release, FAQs, coordination of release issues, etc \u2013 all of which can be found in this section of the [react-native wiki](https://github.com/facebook/react-native/wiki/Releases).\\nBy documentation, releases are no longer blocked on any individual or tribal knowledge.\\n\\nIn addition to documentation, we have also revamped the coordination of releases and have moved discussion of pre-release status and patches to a dedicated discussion group: [react-wg/react-native-releases](https://github.com/reactwg/react-native-releases/discussions).\\n\\n### Clarity of responsibility\\n\\nFollowing more documentation, release work can scale such that no one person is critical to running a release.\\n\\nA React Native release is susceptible to a broad spectrum of potential points of failure and has a lot of dependencies and follow-up. Considering that usage of React Native varies across the community, it\u2019s essential to have stakeholders involved in releases. We have defined a set of [roles and responsibilities in supporting a release](https://github.com/facebook/react-native/wiki/Release-Roles-and-Responsibilities).\\n\\n### Release candidate signal\\n\\nAnother issue with releases is getting a good signal that a release will not suffer from build regressions. This can be addressed with growing investment in testing build variants, etc. but signal from adoption will continue to be useful for some time.\\n\\nIn the 0.67 release we piloted a \u201cRelease Tester\u201d program where React Native developers working on Open Source apps [commit to testing release candidates](https://github.com/facebook/react-native/wiki/Release-Roles-and-Responsibilities#release-tester-responsibilities) on their apps. Prior, there was no formal expectation that the community will test out release candidates to raise any potential issues. This program helps us get faster signal to ensure a level of stability of the release.\\n\\nOpen source React Native apps are particularly useful due to availability of source code to help debug any regressions. With this program in place, a release tester surfaced a regression in 0.67 and we were able to resolve it without thrashing the larger community with a faulty release.\\n\\n## Interested in helping React Native stabilise new releases?\\n\\nA great way to help us catch regressions is to integrate the React Native pre-release version [`react-native@next`](https://www.npmjs.com/package/react-native) or [`react-native@nightly`](https://www.npmjs.com/package/react-native) to your CI. For any regressions, you can [file a release issue](https://github.com/facebook/react-native/issues/new?assignees=&labels=Needs%3A+Triage+%3Amag%3A%2CType%3A+Upgrade+Issue&template=upgrade-regression-form.yml) and notify the appropriate discussion.\\n\\nIf your app or company is interested in joining the \u201cRelease Tester\u201d program, head to the dedicated section at the bottom of the [Release Roles and Responsibilities wiki](https://github.com/facebook/react-native/wiki/Release-Roles-and-Responsibilities#release-tester-responsibilities) to learn more.\\n\\nLastly any help on trying our release candidates or helping unblock release issues is much appreciated!"},{"id":"/2021/10/26/toward-hermes-being-the-default","metadata":{"permalink":"/blog/2021/10/26/toward-hermes-being-the-default","source":"@site/blog/2021-10-26-toward-hermes-being-the-default.md","title":"Toward Hermes being the Default","description":"Since we announced Hermes in 2019, it has been increasingly gaining adoption in the community. The team at Expo, who maintain a popular meta-framework for React Native apps, recently announced experimental support for Hermes after being one of the most requested features of Expo. The team at Realm, a popular mobile database, also recently shipped its alpha support for Hermes. In this post, we want to highlight some of the most exciting progress we\'ve made over the past two years to push Hermes towards being the best JavaScript engine for React Native. Looking forward, we are confident that with these improvements and more to come, we can make Hermes the default JavaScript engine for React Native across all platforms.","date":"2021-10-26T00:00:00.000Z","formattedDate":"October 26, 2021","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":11.055,"hasTruncateMarker":true,"authors":[{"name":"Xuan Huang","title":"Software Engineer at Meta","url":"https://twitter.com/huxpro","imageURL":"https://github.com/huxpro.png","key":"huxpro"}],"frontMatter":{"title":"Toward Hermes being the Default","authors":["huxpro"],"tags":["announcement"]},"unlisted":false,"prevItem":{"title":"Announcing React Native 0.67","permalink":"/blog/2022/01/19/version-067"},"nextItem":{"title":"Announcing React Native 0.66","permalink":"/blog/2021/10/01/version-066"}},"content":"Since [we announced Hermes in 2019](https://engineering.fb.com/2019/07/12/android/hermes/), it has been increasingly gaining adoption in the community. The team at [Expo](https://expo.dev/), who maintain a popular meta-framework for React Native apps, recently [announced experimental](https://blog.expo.dev/expo-sdk-42-579aee2348b6) [support](https://blog.expo.dev/expo-sdk-43-beta-is-now-available-47dc54a8d29f) for Hermes after being [one of the most requested features of Expo](https://expo.canny.io/feature-requests/p/enabling-hermes). The team at [Realm](https://realm.io/), a popular mobile database, also recently shipped its [alpha support](https://github.com/realm/realm-js/issues/3940) for Hermes. In this post, we want to highlight some of the most exciting progress we\'ve made over the past two years to push Hermes towards being _the best_ JavaScript engine for React Native. Looking forward, we are confident that with these improvements and more to come, we can make Hermes the default JavaScript engine for React Native across all platforms.\\n\\n\x3c!--truncate--\x3e\\n\\n## Optimizing for React Native\\n\\nHermes\u2019s defining feature is how it performs compilation work ahead-of-time, meaning that React Native apps with Hermes enabled ship with precompiled optimized bytecode instead of plain JavaScript source. This drastically reduces the amount of work needed to start up your product for users. Measurements from both Facebook and community apps have suggested that enabling Hermes often cut a product\u2019s TTI (or [Time-To-Interactive](https://web.dev/interactive/)) metric by nearly half.\\n\\nThat being said, we\u2019ve been working on improving Hermes in many other aspects to make it even better as a JavaScript engine specialized for React Native.\\n\\n### Building a New Garbage Collector for Fabric\\n\\nWith the upcoming [Fabric](https://github.com/react-native-community/discussions-and-proposals/issues/4) renderer in the new React Native architecture, it will be possible to synchronously call JavaScript on the UI thread. However, this means if the JavaScript thread takes too long to execute, it can cause noticeable UI frame drops and block user inputs. The [concurrent rendering](https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html) enabled by React [Fiber](https://reactjs.org/docs/faq-internals.html#what-is-react-fiber) will avoid scheduling long JavaScript tasks by splitting rendering work into chunks. However, there is another common source of latency from the JavaScript thread \u2014 when the JavaScript engine has to \u201cstop the world\u201d to perform a garbage collection (GC).\\n\\nThe previous default garbage collector in Hermes, [GenGC](https://hermesengine.dev/docs/gengc/), was a single-threaded generational garbage collector. The new generations uses a typical semi-space copying strategy, and the old generations uses a mark-compact strategy to make it really good at aggressively returning memory to the operating system. Due to its single-thread, GenGC has the downside of causing long GC pauses. On apps that are as complicated as Facebook for Android, we observed an average pause of 200ms, or 1.4s at p99. We have even seen it be as long as 7 seconds, considering the large and diverse user base of Facebook for Android.\\n\\nIn order to mitigate this, we implemented a brand new _mostly concurrent_ GC named [Hades](https://hermesengine.dev/docs/hades). Hades collects its young generation exactly the same as GenGC, but it manages its old generation with a snapshot-at-the-beginning style mark-sweep collector. which can significantly reduce GC pause time by performing most of its work in a background thread without blocking the engine\u2019s main thread from executing JavaScript code. **Our statistics show that Hades only pauses for 48ms at p99.9 on 64-bit devices (34x faster than GenGC!)** and around 88ms at p99.9 on 32-bit devices (where it operates as a single-threaded _incremental_ GC). These pause time improvements can come at the cost of overall throughput, due to the need for more expensive write barriers, slower freelist based allocation (as opposed to a bump pointer allocator), and increased heap fragmentation. We think those are the right trade-offs, and we were able to achieve overall lower memory consumption via coalescing and additional memory optimizations that we\u2019ll talk about.\\n\\n### Striking on Performance Pain Points\\n\\nStartup time of applications is critical to the success of many apps, and we are continuously pushing the boundary for React Native. For any new JavaScript feature we implement in Hermes, we carefully monitor their impact on production performance and ensure that they don\u2019t regress metrics. At Facebook, we are currently experimenting with a [dedicated Babel transform profile for Hermes in Metro](https://github.com/facebook/react-native/blob/main/packages/react-native-babel-preset/src/configs/main.js#L41) to replace a dozen Babel transforms with Hermes\u2019s native ESNext implementations. We were able to observe **18-25% TTI improvements** on many surfaces and **overall bytecode size decreases** and we expect to see similar results for OSS.\\n\\nIn addition to startup performance, we identified memory footprint as an opportunity for improvement in React Native apps especially for [virtual reality.](https://reactnative.dev/blog/2021/08/26/many-platform-vision#expanding-to-new-platforms) Thanks to the low-level control we have as a JavaScript engine, we were able to deliver rounds of memory optimizations by squeezing bits and bytes out:\\n\\n1. Previously, all JavaScript values were represented as 64-bit NaN-boxing encoded tagged values to represent floating point doubles and pointers on 64-bit architecture. However, this is wasteful in practice because most numbers are small integers (SMI) and JavaScript heap of client-side applications is not expected to be larger than 4GiB generally. To address this, we introduced a new 32-bit encoding in which SMI and pointers are encoded in 29 bits (because pointers are 8-byte aligned, we can assume the bottom 3 bits are always zero), and the rest of JS numbers are boxed onto the heap. **This reduced the JavaScript heap size by ~30%.**\\n2. Different kinds of JavaScript objects are represented as different kinds of GC-managed cells in the JavaScript heap. By aggressively optimizing the memory layout of headers for those cells, **we are able to reduce memory usage by another ~15%**.\\n\\nOne of our key decisions with Hermes was to not implement a [just-in-time (JIT) compiler](https://en.wikipedia.org/wiki/Just-in-time_compilation) because we believe that for most React Native apps, the additional warm-up costs and extra footprints on binary and memory would not actually be worthwhile. For years, we invested a lot of effort in optimizing interpreter performance and compiler optimizations to make Hermes\u2019s throughput competitive with other engines for React Native workloads. We are continuing to focus on improving throughput by identifying performance bottlenecks from everywhere (interpreter dispatch loop, stack layout, object model, GC, etc.). Expect some more numbers in upcoming releases!\\n\\n### Pioneering at Vertical Integrations\\n\\nAt Facebook, we prefer to colocate projects within a large [monorepo](https://en.wikipedia.org/wiki/Monorepo). By having the engine (Hermes) and the host (React Native) closely iterating together, we opened a lot of room for vertical integrations. To name a few:\\n\\n- Hermes supports [on-device JavaScript debugging with the Chrome debugger](https://reactnative.dev/docs/hermes#debugging-js-on-hermes-using-google-chromes-devtools) by speaking the [Chrome DevTools Protocol](https://chromedevtools.github.io/devtools-protocol/). It\u2019s better than the legacy \u201c[Remote JS Debugging](https://reactnative.dev/docs/debugging#chrome-developer-tools)\u201d (which uses an in-app proxy to run JS in desktop Chrome) because it supports debugging synchronous native calls and guaranteed a consistent runtime environment. Together with React DevTools, Metro, Inspector, and so on, Hermes debugger is now part of [Flipper](https://reactnative.dev/blog/2020/03/26/version-0.62) to provide a one-stop developer experience.\\n- Objects allocated during the initialization path of React Native apps are often long-lived and don\u2019t follow the _generational_ _hypothesis_ leveraged by generational GCs. Therefore, we [configured Hermes in React Native](https://github.com/facebook/react-native/blob/main/ReactAndroid/src/main/java/com/facebook/hermes/reactexecutor/OnLoad.cpp#L37-L42) to allocate the first 32MiB directly into old generations (known as _pre-tenuring_) to avoid triggering GC pauses and delaying TTI.\\n- The new React Native architecture is heavily based on [JSI (or JavaScript Interface)](https://github.com/react-native-community/discussions-and-proposals/issues/91), a lightweight, general-purposed API for embedding a JavaScript engine into a C++ program. By having the team maintaining the JS engine also maintains the JSI API implementation, we are confident in providing the best possible integration that is reliable, performant and battle-tested at the Facebook\u2019s scale.\\n- Getting JavaScript concurrency primitives (e.g. [promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises)) and platform concurrency primitives (e.g. [microtasks](https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide)) both semantically correct and performant are critical to React concurrent rendering and the future of React Native apps. Historically, promises in React Native were [polyfilled](https://github.com/facebook/react-native/blob/main/Libraries/Core/polyfillPromise.js#L37) using non-standardized [`setImmediate`](https://developer.mozilla.org/en-US/docs/Web/API/Window/setImmediate) APIs. We are working on making native promises and microtasks from JS engines available via JSI, and introducing [`queueMicrotask`](https://developer.mozilla.org/en-US/docs/Web/API/queueMicrotask), a recent addition to the web standard, to the platform, to better support modern asynchronous JavaScript code.\\n\\n## Bringing Along the Whole Community\\n\\nHermes has been really great for us at Facebook. But our work is not done until our community can use Hermes to power experiences throughout the ecosystem, so that everyone leverage all of its features and to embrace its full potential.\\n\\n### Expanding to New Platforms\\n\\nHermes was initially open sourced only for React Native on Android. Since then, we have been thrilled to see our members of the community expanding Hermes support into [many other platforms that React Native\u2019s ecosystem has expanded](https://reactnative.dev/blog/2021/08/26/many-platform-vision).\\n\\n[Callstack](https://callstack.com/) led the effort of bringing [Hermes to iOS in React Native 0.64](https://reactnative.dev/blog/2021/03/12/version-0.64). They wrote a [series of articles](https://callstack.com/blog/bringing-hermes-to-ios-in-react-native/) and hosted a [podcast](https://callstack.com/podcasts/react-native-0-64-with-hermes-for-ios-ep-5) on how they achieved it. According to their benchmarks, Hermes was able to **consistently deliver ~40% improvement to startup and ~18% reduced memory on iOS** compared to JSC for the Mattermost app, with only 2.4 MiB of app size overhead. I encourage you to [see it live with your own eyes](https://callstack.com/blog/hermes-performance-on-ios/).\\n\\nMicrosoft has been bringing [Hermes to React Native for Windows and macOS](https://microsoft.github.io/react-native-windows/docs/hermes). [At Microsoft Build 2020](https://youtu.be/QMFbrHZnvvw?t=389), Microsoft shared that Hermes\u2019s memory impact ([working set](https://en.wikipedia.org/wiki/Working_set)) is 13% lower than the Chakra engine on React Native for Windows. Recently, on some synthetic benchmarks, they\u2019ve found Hermes 0.8 (shipped with Hades and aforementioned SMI and pointer compression optimization) **uses 30%-40% less memory than other engines**. Not surprisingly, the [desktop Messenger](https://www.messenger.com/desktop) video calling experience built on React Native, is also powered by Hermes.\\n\\nLast but not least, Hermes has also been powering all virtual reality experiences built with the React family of technologies on Oculus, including Oculus Home.\\n\\n### Supporting our Community\\n\\nWe acknowledge there are still blockers that prevent parts of the community from adopting Hermes and we are committed to building support for these missing features. Our goal is to be fully featured so that Hermes is the right choice for most React Native apps. Here is how the community has already shaped the Hermes roadmap:\\n\\n\x3c!-- alex ignore just fellowship --\x3e\\n\\n- [`Proxy` and `Reflect`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Meta_programming) were originally excluded from Hermes because Facebook does not use them. We were also concerned that adding Proxy would hurt property lookup performance even when Proxy is not used. But Proxy quickly become [the most requested feature](https://github.com/facebook/hermes/issues/33) of Hermes due to popular libraries such as [MobX](https://mobx.js.org/README.html) and [Immer](https://immerjs.github.io/immer/). We carefully evaluated and decided to build it just for the community, and we managed to implement it with very low cost. Since this is a feature we don\u2019t use, we relied on our community to prove its stability. We started by testing Proxy behind a flag and created opt-in npm packages for [release v0.4](https://github.com/facebook/hermes/issues/33#issuecomment-668374607) and [v0.5](https://github.com/facebook/hermes/issues/33#issuecomment-668374607), and it\u2019s [enabled by default starting from v0.7](https://github.com/facebook/hermes/releases/tag/v0.7.0).\\n- [ECMAScript Internationalization API Specification (ECMA-402, or `Intl`)](https://hermesengine.dev/docs/intl) was [the second most requested feature](https://github.com/facebook/hermes/issues/23). `Intl` is a huge set of APIs and often requires the implementation to include **6MB worth** of [Unicode CLDR](https://cldr.unicode.org/index) data. This is why polyfills like [FormatJS (a.k.a. `react-intl`)](https://github.com/formatjs/formatjs) and JS engines like the [international variant build of community JSC](https://github.com/react-native-community/jsc-android-buildscripts#international-variant) are so huge. To avoid substantially increasing the binary size of Hermes, we decided to implement it with another strategy by consuming and mapping the ICU facilities provided by the libraries included in the operating systems, at the cost of some (often minor) variance in behaviors across platforms.\\n  - Microsoft collaborated to build support on Android. It covers almost everything from ECMA-402 up to ES2020, **with only a size impact as small as 3% (57-62K per ABI)**. We ran [a poll on Twitter](https://twitter.com/tmikov/status/1336442786694893568) and the results were strongly in favor of including `Intl` by default, so that\u2019s what we did and it\u2019s available starting from [release v0.8](https://github.com/facebook/hermes/releases/tag/v0.8.0).\\n  - Facebook has sponsored [Major League Hacking](https://mlh.io/) to launch a [remote open source fellowship program](https://news.mlh.io/welcoming-facebook-back-as-a-sponsor-of-the-2020-2021-mlh-fellowship-08-12-2020). Last year, we launched the [Hermes sampling profiler](https://reactnative.dev/docs/profile-hermes). This year, our fellows will be working with members from Hermes, React Native, and Callstack, to add support for Hermes `Intl` on iOS. Stayed tuned!\\n- We appreciate that people have been working with us to discover issues affecting the community.\\n  - People have helped us identify critical spec divergence such as [stability of `Array.prototype.sort`](https://github.com/facebook/hermes/issues/212) amended in [ES2019](https://github.com/tc39/ecma262/pull/1340). This has been fixed and will be available in the next release.\\n  - People found out that our default heap size limit was too small and caused [unnecessary GC pressure](https://github.com/facebook/hermes/issues/295) and [OOM crashes](https://github.com/facebook/hermes/issues/511) for many users who are not familiar with customizing Hermes\u2019s GC configs. So we increased it from 512MiB to 3GiB to be more than sufficient for most users by default.\\n  - People also reported that our specialized `Function.prototype.toString` implementation [caused performance to drop in libraries doing improper feature detection](https://github.com/facebook/hermes/issues/471#issuecomment-820123463) and [blocked users from doing source code injecting](https://github.com/facebook/hermes/issues/114#issuecomment-887106990). This helped us strengthen our stance that Hermes, whenever possible, should not get in the way of developers and to respect de-facto practices.\\n\\n## Summary\\n\\nIn summary, our vision is to make Hermes ready to be the default JavaScript engine across all React Native platforms. We\u2019ve already started working towards it, and we want to hear from all of you about this direction.\\n\\nIt\u2019s extremely important for us to prepare the ecosystem for a smooth adoption. We encourage you to try out Hermes, and file issues on our [GitHub repository](https://github.com/facebook/hermes) for any feedbacks, questions, feature requests and incompatibilities.\\n\\n## Thanks\\n\\nWe\u2019d love to thank the Hermes team, the React Native team, and the many contributors from the React Native community for their work to improve Hermes.\\n\\n\x3c!-- alex ignore white --\x3e\\n\\nI\u2019d also love to personally thank (in alphabetic order) Eli White, Luna Wei, Neil Dhar, Tim Yung, Tzvetan Mikov, and many others for their help during the writing."},{"id":"/2021/10/01/version-066","metadata":{"permalink":"/blog/2021/10/01/version-066","source":"@site/blog/2021-10-01-version-066.md","title":"Announcing React Native 0.66","description":"Today we\u2019re releasing React Native v0.66 for Android 12 and iOS 15 support alongside fixes and general updates.","date":"2021-10-01T00:00:00.000Z","formattedDate":"October 1, 2021","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"},{"label":"release","permalink":"/blog/tags/release"}],"readingTime":3.96,"hasTruncateMarker":true,"authors":[{"name":"Luna Wei","title":"Software Engineer at Meta","url":"https://twitter.com/lunaleaps","imageURL":"https://github.com/lunaleaps.png","key":"lunaleaps"}],"frontMatter":{"title":"Announcing React Native 0.66","authors":["lunaleaps"],"tags":["announcement","release"]},"unlisted":false,"prevItem":{"title":"Toward Hermes being the Default","permalink":"/blog/2021/10/26/toward-hermes-being-the-default"},"nextItem":{"title":"Preparing Your App for iOS 15 and Android 12","permalink":"/blog/2021/09/01/preparing-your-app-for-iOS-15-and-android-12"}},"content":"Today we\u2019re releasing React Native v0.66 for Android 12 and iOS 15 support alongside fixes and general updates.\\n\\n## Highlights\\n\\n- [Handle taps on views outside parent bounds on Android](/blog/2021/10/01/version-066#handle-taps-on-child-views-outside-parent-boundaries-on-android)\\n- [New Bluetooth Permissions on Android](/blog/2021/10/01/version-066#new-bluetooth-permissions-on-android)\\n- [Better Support for Apple Silicon, Xcode 13, and iOS 15](/blog/2021/10/01/version-066#better-support-for-apple-silicon-xcode-13-and-ios-15)\\n- [Hermes 0.9.0](/blog/2021/10/01/version-066#hermes-090)\\n- [Nightly and \u201cCommitly\u201d Releases](/blog/2021/10/01/version-066#nightly-and-commitly-releases)\\n\\n\x3c!--truncate--\x3e\\n\\n### Handle taps on child views outside parent boundaries on Android\\n\\nThanks to [@hsource](https://github.com/hsource) for adding interaction support for children rendered outside of parent view boundaries via `overflow: visible`. This is a common use-case and aligns React Native on Android more closely with web standards.\\n\\nFind more details on the [pull request](https://github.com/facebook/react-native/pull/29039).\\n\\n### New Bluetooth Permissions on Android\\n\\nWe\u2019ve added support for [new Bluetooth permissions](https://developer.android.com/about/versions/12/features/bluetooth-permissions) in preparation for Android 12 and we plan to update the `targetSDKVersion` to 31 in the next release.\\n\\n### Better Support for Apple Silicon, Xcode 13, and iOS 15\\n\\nThis release provides a number of solutions to make Xcode builds for iOS on Apple Silicon (M1) Mac machines more reliable.\\n\\nNotably, the new app template now includes a CocoaPods workaround (thanks to [@mikehardy](https://github.com/MikeHardy)!).\\nTo apply, make sure your app\u2019s Podfile has `__apply_Xcode_12_5_M1_post_install_workaround(installer)` added in the `post_install` step.\\n\\nIn addition `RCT-Folly.podspec` has been [updated to prevent arm64 linker failure](https://github.com/facebook/react-native/commit/8b6d7fddd65a9b5caf599e8ff7b090a176a6f11f).\\n\\nCheck out this [post](/blog/2021/09/01/preparing-your-app-for-iOS-15-and-android-12) we shared on preparing your app for iOS 15 and Android 12.\\n\\n### Hermes 0.9.0\\n\\nHermes 0.9.0 is primarily about closing the gap between Hermes release cut point and this React Native release.\\n\\nAmong ~400 commits, there have been general bug fixes alongside memory and size wins.\\n\\nSee [Hermes 0.9.0 release issue](https://github.com/facebook/hermes/issues/586) for more details\\n\\n### Nightly and \u201cCommitly\u201d Releases\\n\\nIn a [recent blog post](/blog/2021/08/19/h2-2021) we shared that one of our goals in the second half of 2021 is to improve our release process to be faster and more stable. As part of this effort we are working to make React Native more stable on main and to reduce the bugs identified during our Release Candidate process.\\n\\nWhile we have been publishing nightly releases of React Native for over a year, these releases haven\u2019t been effectively used by most projects. They are now easier to access and we hope to use them as release candidates going forward. Nightly releases are published to npm under the \u201cnightly\u201d tag.\\n\\nTo improve the process of testing individual commits, React Native\u2019s CI will now create a tarball artifact for each commit on the main and release branches as well as for each PR. We refer to them as commitlies. These commitlies will not be published to npm, but they can be downloaded directly from CircleCI. See instructions below.\\n\\nWant to help get a PR merged? By trying out the related commitly and verifying the change, you will be providing valuable signal to help get the change landed!\\n\\n#### Using Nightly Releases (Nightlies)\\n\\nThe process for migrating your project to a React Native nightly release is very similar to the one you would follow when upgrading to a regular version, with the exception that tools like the Upgrade Helper do not currently work with nightlies. With that in mind, we recommend that you first upgrade your project to the most recent stable release if you have not done so yet. Then, run `yarn upgrade react-native@nightly` to install the most recent nightly release. Note that there may be additional changes that are needed for your project to work properly on a nightly release.\\n\\n#### Using Commitly Releases (Commitlies)\\n\\n<figure>\\n  <img src=\\"/blog/assets/0.66-artifact.png\\" alt=\\"Screenshot of CircleCI artifact panel to find tarball\\" />\\n  <figcaption>\\n    Find the \\"build_npm_package-1\\" job related to a commit and head to the \\"Artifacts\\" panel to download the tarball for the commitly.\\n  </figcaption>\\n</figure>\\n\\n\x3c!-- alex ignore just --\x3e\\n\\nJust like with a nightly release, first make sure that your project has been upgraded to the most recent stable version. Then, go to the [`react-native` dashboard on Circle CI](https://app.circleci.com/pipelines/github/facebook/react-native) and look up the workflow that was triggered by the commit in question. There, you should see a job named `build_npm_package`. That job will have an \u201cArtifacts\u201d panel which will provide a link that you may use to download a tarball file. You can then run the following:\\n\\n```bash\\n# Update your react-native dependency to the tarball\\n# using your preferred package manager\\n$ yarn add <path to tarball>\\n$ npm add <path to tarball>\\n```\\n\\n### Acknowledgements\\n\\nThis release includes **621 commits** with **92 contributors**! Thank you to all our contributors new and old! You can find the [full changelog here](https://github.com/facebook/react-native/blob/main/CHANGELOG.md#v0660).\\n\\nAs well, thank you to the following contributors for their support in preparing, testing and unblocking this release!\\n\\n- [@acoates-ms](https://github.com/acoates-ms)\\n- [@dulmandakh](https://github.com/dulmandakh)\\n- [@kelset](https://github.com/kelset)\\n- [@kraenhansen](https://github.com/kraenhansen)\\n- [@mikehardy](https://github.com/MikeHardy)\\n- [@NickGerleman](https://github.com/NickGerleman)\\n- [@pvinis](https://github.com/pvinis)\\n- [@satya164](https://github.com/satya164)\\n- [@Simek](https://github.com/Simek)\\n- [@swrobel](https://github.com/swrobel)\\n- [@thymikee](https://github.com/thymikee)\\n- [@tido64](https://github.com/tido64)\\n- [@titozzz](https://github.com/titozzz)"},{"id":"/2021/09/01/preparing-your-app-for-iOS-15-and-android-12","metadata":{"permalink":"/blog/2021/09/01/preparing-your-app-for-iOS-15-and-android-12","source":"@site/blog/2021-09-01-preparing-your-app-for-iOS-15-and-android-12.md","title":"Preparing Your App for iOS 15 and Android 12","description":"Hello everyone!","date":"2021-09-01T00:00:00.000Z","formattedDate":"September 1, 2021","tags":[{"label":"engineering","permalink":"/blog/tags/engineering"}],"readingTime":2.675,"hasTruncateMarker":true,"authors":[{"name":"Samuel Susla","title":"Software Engineer at Meta","url":"https://twitter.com/SamuelSusla","imageURL":"https://github.com/sammy-SC.png","key":"SamuelSusla"}],"frontMatter":{"title":"Preparing Your App for iOS 15 and Android 12","authors":["SamuelSusla"],"tags":["engineering"]},"unlisted":false,"prevItem":{"title":"Announcing React Native 0.66","permalink":"/blog/2021/10/01/version-066"},"nextItem":{"title":"React Native Is Hiring Managers, To Expand Beyond Mobile","permalink":"/blog/2021/08/30/react-native-is-hiring-managers"}},"content":"Hello everyone!\\n\\nWith new mobile OS versions releasing late this year, we recommend preparing your React Native apps beforehand to avoid regressions when the releases become generally available.\\n\\n\x3c!--truncate--\x3e\\n\\n## iOS 15\\n\\nThe release date of iOS 15 hasn\u2019t been announced yet, but based on previous iOS releases, it will likely be around September 16th. Please also account for App Store review time if any changes are required to prepare your app for iOS 15.\\n\\n### What to watch out for\\n\\n#### QuickType Bar\\n\\nThe way to disable _QuickType_ bar in _[TextInput](/docs/textinput)_ has changed. _QuickType_ bar is the bar above keyboard with three suggested words. In case your UI needs to have the bar hidden, setting [autoCorrect](/docs/textinput#autocorrect) to `false` no longer disables _QuickType_ bar in iOS 15 like earlier versions. In order to hide the _QuickType_ bar, you need to also set [spellCheck](/docs/textinput#spellcheck-ios) to `false`. This will disable spell check, the red underlines, in your _TextInput_. Disabling QuickType bar with spell check enabled is no longer an option.\\n\\n<figure>\\n  <img src=\\"/blog/assets/ios-15-quicktype-bar.png\\" alt=\\"Screenshot of QuickType bar\\" />\\n  <figcaption>\\n    QuickType bar with three suggested words\\n  </figcaption>\\n</figure>\\n\\nTo disable QuickType bar in iOS 15, set prop [spellCheck](/docs/textinput#spellcheck-ios) and [autoCorrect](/docs/textinput#autocorrect) to `false`.\\n\\n```jsx\\n<TextInput\\n  placeholder=\\"something\\"\\n  autoCorrect={false}\\n  spellCheck={false}\\n/>\\n```\\n\\n#### Transparent Navigation Bar\\n\\niOS 15 changes the default behaviour of the navigation bar. Unlike in iOS 14, the navigation bar becomes transparent when the content is scrolled all the way up. Make sure to watch out for this as it can make content difficult to read. For tips on how to work around this issue, check out [this thread](https://developer.apple.com/forums/thread/682420).\\n\\n![Screenshot of navigation bar on iOS 14 and iOS 15](/blog/assets/ios-15-navigation-bar.jpg)\\n\\n### How to install iOS 15\\n\\n#### Device\\n\\nIf you have a spare device, you can join the [beta program](https://beta.apple.com/sp/betaprogram/) and install iOS 15. At this point, beta releases are generally stable, but keep in mind that **the upgrade to iOS 15 is irreversible**.\\n\\n#### Simulator\\n\\nTo test your app on a simulator with iOS 15, you will need to download Xcode 13. You can find Xcode 13 [here](https://developer.apple.com/xcode/).\\n\\n## Android 12\\n\\nAndroid 12 will be released this autumn and it introduces some changes which can potentially affect your app experience. Traditionally, Google Play requires target SDK of your app to be upgraded before November of the following year. (see requirements for previous release [here](https://developer.android.com/distribute/best-practices/develop/target-sdk)).\\n\\n### What to watch out for\\n\\n#### Overscroll Effect\\n\\nAndroid 12 introduces new [overscroll effect](https://developer.android.com/about/versions/12/overscroll) which affects all scroll containers. As React Native scroll views are based on the native views, we recommend to check your scrollable containers to ensure the effect is applied correctly. You can opt-out from it by setting [`overScrollMode`](/docs/scrollview#overscrollmode-android) prop to `never`.\\n\\n#### Permission Updates\\n\\nAndroid 12 allows users of your app to only provide access to the approximate location if you request it with **`ACCESS_FINE_LOCATION`** permission. Learn more about it [here](https://developer.android.com/about/versions/12/approximate-location).\\n\\nCheck out Google\u2019s [detailed behavior changes](https://developer.android.com/about/versions/12/behavior-changes-all) for all apps running on Android 12.\\n\\n### How to install Android 12\\n\\n#### Device\\n\\nIf you have a spare Android device, check if you\u2019re able to install Android 12 Beta via [instructions here.](https://developer.android.com/about/versions/12/get)\\n\\n#### Emulator\\n\\nIf you don\u2019t have a device available, you can set up an emulator following [instructions here](https://developer.android.com/about/versions/12/get#on_emulator)."},{"id":"/2021/08/30/react-native-is-hiring-managers","metadata":{"permalink":"/blog/2021/08/30/react-native-is-hiring-managers","source":"@site/blog/2021-08-30-react-native-is-hiring-managers.md","title":"React Native Is Hiring Managers, To Expand Beyond Mobile","description":"We recently shared React Native\u2019s Many Platform Vision for how expanding React to other platforms improves the framework for everyone else. We\u2019ve been making significant progress on this vision over the last couple years by partnering with Microsoft on React Native for Windows and macOS, and Oculus on React Native in VR.","date":"2021-08-30T00:00:00.000Z","formattedDate":"August 30, 2021","tags":[{"label":"hiring","permalink":"/blog/tags/hiring"}],"readingTime":1.175,"hasTruncateMarker":true,"authors":[{"name":"Eli White","title":"Engineering Manager at Meta","url":"https://twitter.com/Eli_White","imageURL":"https://github.com/TheSavior.png","key":"Eli_White"}],"frontMatter":{"title":"React Native Is Hiring Managers, To Expand Beyond Mobile","authors":["Eli_White"],"tags":["hiring"]},"unlisted":false,"prevItem":{"title":"Preparing Your App for iOS 15 and Android 12","permalink":"/blog/2021/09/01/preparing-your-app-for-iOS-15-and-android-12"},"nextItem":{"title":"React Native\'s Many Platform Vision","permalink":"/blog/2021/08/26/many-platform-vision"}},"content":"We recently shared [React Native\u2019s Many Platform Vision](https://reactnative.dev/blog/2021/08/26/many-platform-vision) for how expanding React to other platforms improves the framework for everyone else. We\u2019ve been making significant progress on this vision over the last couple years by partnering with Microsoft on React Native for Windows and macOS, and Oculus on React Native in VR.\\n\\nAs [part of our plans beginning earlier this year](https://reactnative.dev/blog/2021/08/19/h2-2021), we are growing our focus on these platforms and growing our teams to help us achieve our vision. In order to support our new teammates, and many more to come, **we are hiring two Engineering Managers: one to help support React Native for Desktop, and one to support React Native for VR**.\\n\\n\x3c!--truncate--\x3e\\n\\n<figure>\\n  <img src=\\"/blog/assets/many-platform-vision-messenger-desktop.png\\" alt=\\"Screenshot of the Messenger app on macOS\\" />\\n  <figcaption>\\n    React Native powers Video Calling in Messenger for Windows and macOS.\\n  </figcaption>\\n</figure>\\n\\n<figure>\\n  <img src=\\"/blog/assets/many-platform-vision-oculus-home.png\\" alt=\\"Screenshot of Oculus Home in virtual reality\\" />\\n  <figcaption>\\n    React and Relay power the Oculus Home and many other virtual reality experiences.\\n  </figcaption>\\n</figure>\\n\\nWe are looking for managers who will care deeply about the growth and success of our engineers, and are excited about our vision. Previous React or React Native experience is not required. This role is open to anyone in the United States. If this sounds like an interesting opportunity and you are interested in learning more, please apply on [Facebook\u2019s Career\u2019s Page](https://www.facebook.com/careers/v2/jobs/438516437547870). We look forward to hearing from you!"},{"id":"/2021/08/26/many-platform-vision","metadata":{"permalink":"/blog/2021/08/26/many-platform-vision","source":"@site/blog/2021-08-26-many-platform-vision.md","title":"React Native\'s Many Platform Vision","description":"React Native has been very successful at raising the bar for mobile development, both at Facebook and elsewhere in the industry. As we interact with computers in new ways and as new devices are invented, we want React Native to be there for everyone. Although React Native was originally created to build mobile apps, we believe that focusing on many platforms and building to each platform\u2019s strengths and constraints has a symbiotic effect. We have seen huge benefits when we extended this technology to desktop and virtual reality, and we\'re excited to share what this means for the future of React Native.","date":"2021-08-26T00:00:00.000Z","formattedDate":"August 26, 2021","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":7.875,"hasTruncateMarker":true,"authors":[{"name":"Christine Abernathy","title":"Developer Advocate at Meta","url":"https://twitter.com/abernathyca","imageURL":"https://github.com/caabernathy.png","key":"abernathyca"},{"name":"Eli White","title":"Engineering Manager at Meta","url":"https://twitter.com/Eli_White","imageURL":"https://github.com/TheSavior.png","key":"Eli_White"},{"name":"Luna Wei","title":"Software Engineer at Meta","url":"https://twitter.com/lunaleaps","imageURL":"https://github.com/lunaleaps.png","key":"lunaleaps"},{"name":"Timothy Yung","title":"Software Engineer at Meta","url":"https://twitter.com/yungsters","imageURL":"https://github.com/yungsters.png","key":"yungsters"}],"frontMatter":{"title":"React Native\'s Many Platform Vision","authors":["abernathyca","Eli_White","lunaleaps","yungsters"],"tags":["announcement"]},"unlisted":false,"prevItem":{"title":"React Native Is Hiring Managers, To Expand Beyond Mobile","permalink":"/blog/2021/08/30/react-native-is-hiring-managers"},"nextItem":{"title":"React Native in H2 2021","permalink":"/blog/2021/08/19/h2-2021"}},"content":"React Native has been very successful at raising the bar for mobile development, both at Facebook and elsewhere in the industry. As we interact with computers in new ways and as new devices are invented, we want React Native to be there for everyone. Although React Native was originally created to build mobile apps, we believe that focusing on many platforms and building to each platform\u2019s strengths and constraints has a symbiotic effect. We have seen huge benefits when we extended this technology to desktop and virtual reality, and we\'re excited to share what this means for the future of React Native.\\n\\n\x3c!--truncate--\x3e\\n\\n## Respecting the Platform\\n\\nOur first guiding principle is [to match the expectations people have for each platform](https://reactnative.dev/blog/2020/07/17/react-native-principles#native-experience). Android users expect accessible apps using TalkBack. Navigation should work the way it does in other Android apps. A button should look and feel the way buttons look and feel on Android. It should not look and feel like an iOS button. Although we seek to offer a consistent cross-platform developer experience, we resist the temptation to sacrifice users\u2019 expectations.\\n\\nWe believe that React Native enables developers to meet users\u2019 expectations while also gaining the benefits of a better developer experience. In this section, we share the following:\\n\\n1. By embracing platform constraints, we actually improve the experience on other platforms.\\n2. We can learn from institutional knowledge to build higher level cross-platform abstractions.\\n3. Other players on each platform inspire us to build better developer and user experiences.\\n\\n### Embracing Platform Constraints\\n\\n\x3c!-- alex ignore easy --\x3e\\n\\nSpecific device hardware or user expectations impose unique constraints and requirements. As an example, memory is typically more constrained on Android and VR headsets than on iOS, macOS, and Windows. As another example, users expect mobile apps to start up almost instantaneously, but they are less frustrated when desktop apps take longer to start up. **We have found that by approaching these problems with React Native, we can more easily borrow lessons learned and code written for one platform, and apply them to other platforms.**\\n\\n<figure>\\n  <img src=\\"/blog/assets/many-platform-vision-facebook-dating.png\\" alt=\\"Screenshot of Facebook Dating on mobile\\" />\\n  <figcaption>\\n    React Native and Relay power over 1000 Facebook surfaces on Android and iOS.\\n  </figcaption>\\n</figure>\\n\\nFor example, React Native relies on an optimization known as \u201cview flattening\u201d which is critical for reducing memory usage on Android. We never built this optimization for iOS because it does not bear the same memory constraints. Over the past few years as we built our new cross-platform renderer, we had to reimplement \u201cview flattening\u201d. But this time, it was written in C++ instead of platform-specific Java. Trying out this same optimization on iOS was now only a matter of flipping a switch. In the production Facebook app, we observed that this improved performance on iOS! We likely never would have built this for iOS, but our investment on Android was able to benefit our investment on iOS.\\n\\n### Learning from Institutional Knowledge\\n\\nOne of the reasons that React Native was originally created was to reduce engineering silos. There is a tendency for Android engineers to be siloed from iOS engineers working on the same product. Android engineers review code for Android engineers and attend Android meetups and conferences. iOS engineers review code for iOS engineers and attend iOS meetups and conferences. Engineers working on different platforms bring unique domain and institutional knowledge about how to build great product experiences.\\n\\nOne of the best outcomes of cross-platform frameworks like React Native is how they bring together engineers with vastly different domain expertise. **We believe that by targeting more platforms, we can accelerate cross-pollination of institutional knowledge between platform experts.**\\n\\nAs an example, the accessibility abstractions in React Native are influenced by how Android, iOS, and web each approach accessibility in different ways. This enabled us to build a common interface that improves how accessibility hints are handled on both mobile platforms.\\n\\nAs another example, our research into user perception of speed on the web led to concurrent features like Suspense. Over the past year, these features were vetted by the new [Facebook.com](https://facebook.com/) website. Now with our new renderer, these features are making their way to React Native and influencing how we design event scheduling and priorities. The React team\u2019s investment into improving the web experience is benefiting React Native for native platforms.\\n\\n### Competition Drives Innovation\\n\\nIn addition to domain-specific engineers and meetups and conferences, each platform also brings other unique players solving similar problems. On the web, React (which directly powers React Native) frequently draws inspiration from other open source web frameworks like [Vue](https://vuejs.org/), [Preact](https://preactjs.com/), and [Svelte](https://svelte.dev/). On mobile, React Native has been inspired by other open source mobile frameworks, and we have been learning from other mobile frameworks built inside Facebook.\\n\\n\x3c!-- alex ignore special --\x3e\\n\\n**We believe that competition leads to better outcomes for everyone in the long run.** By studying what makes other players on each platform great, we can learn lessons that may apply to other platforms. For example, the race to simplify complex websites influenced the development of React and gave React Native a head start to offer a declarative framework for mobile apps. The demand for faster iteration cycles and build times for the web also led to the development of Fast Refresh which significantly benefited React Native. Similarly, performance optimizations in our internal mobile frameworks \u2014 especially around data fetching and parallelization \u2014 challenged us to improve React Native in a way that has also influenced React when we built the new [Facebook.com](https://facebook.com/) website.\\n\\n<figure>\\n  <img src=\\"/blog/assets/many-platform-vision-facebook-website.png\\" alt=\\"Screenshot of the Facebook.com website\\" />\\n  <figcaption>\\n    React and Relay powers the <a href=\\"https://facebook.com/\\">Facebook.com</a> website.\\n  </figcaption>\\n</figure>\\n\\n## Expanding to New Platforms\\n\\nReact and React Native are at a turning point. React has [started the road to a React 18 release](https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html), and [the new React Native renderer is now fully powering the Facebook mobile apps](https://twitter.com/reactnative/status/1415099806507167745). Our team has grown substantially this year in order to support the growing adoption at Facebook. Teams developing on other platforms have noticed the adoption and see the opportunity for them to also reap the benefits of React Native.\\n\\n**For the past year, we have been partnering with Microsoft and the Messenger team to create a truly native video calling experience on Windows and macOS.** Due to the high scrutiny that we place on startup time for mobile apps, our initial implementation of desktop video calling using React Native completely blew away the performance of the Electron implementation that it replaced. For the first couple weeks of building this experience, we recorded videos of us resizing a window with multiple live video calls and marveled at the smooth frame rates.\\n\\nBuilding for desktop has been very exciting for us. We have taken what we know about building mobile experiences and applied them to desktop with eyes wide open. We\u2019ve expanded our horizons with multiple child windows, menu bars, system trays, and more. As we continue collaborating on new desktop Messenger features, we expect to find opportunities that influence how we build on web and mobile. If you want to stay up to date, our desktop collaboration work is taking place [on GitHub](https://github.com/microsoft/react-native-windows).\\n\\n<figure>\\n  <img src=\\"/blog/assets/many-platform-vision-messenger-desktop.png\\" alt=\\"Screenshot of the Messenger app on macOS\\" />\\n  <figcaption>\\n    React Native powers Video Calling in Messenger for Windows and macOS.\\n  </figcaption>\\n</figure>\\n\\n**We are also partnering more closely with [Facebook Reality Labs](https://tech.fb.com/ar-vr/) to understand how React is uniquely positioned to deliver virtual reality experiences on Oculus.** Building experiences in VR with React Native will be particularly interesting because of tighter memory constraints and user sensitivity to interaction latency.\\n\\nSimilar to how we approach React Native for mobile, we will be validating our technology at Facebook scale before we share anything publicly. A lot is still changing and we still have many questions. We want to have confidence that the technology is production-ready and reliable before sharing with the community.\\n\\nAlthough most of the development for VR will still be internal, we hope to share more as soon as we can. We also anticipate that improvements to React Native for VR will surface in open source. For example, we anticipate that projects to reduce memory usage for VR use cases will also reduce memory usage for React Native on mobile and desktop experiences.\\n\\n<figure>\\n  <img src=\\"/blog/assets/many-platform-vision-oculus-home.png\\" alt=\\"Screenshot of Oculus Home in virtual reality\\" />\\n  <figcaption>\\n    React and Relay power the Oculus Home and many other virtual reality experiences.\\n  </figcaption>\\n</figure>\\n\\nWhen we reflect back on how the industry has adopted React, there has always been an appetite in the community for React on more platforms. Even before we announced React Native to the community, Netflix had already been crafting Gibbon, their custom renderer for building TV experiences with React. And before Facebook started building Messenger for desktop, [Microsoft was already using React to build native desktop experiences in Office and Windows 10](https://www.youtube.com/watch?v=IUMWFExtDSg&t=382s).\\n\\n## Summary\\n\\nIn summary, our vision is to expand React Native\'s reach beyond mobile and we\'ve already started by partnering with desktop and VR teams at Facebook. We know that when we embrace the platform constraints of each platform, learn from institutional knowledge, and gather inspiration from other players, it benefits every platform in the ecosystem. And most importantly, in doing so, we stay true to [our guiding principles](https://reactnative.dev/blog/2020/07/17/react-native-principles).\\n\\nWe are excited about what\'s to come as we continue to explore what many platforms unlocks for React Native. Connect with us ([@reactnative](https://twitter.com/reactnative)) for more updates and share your thoughts!"},{"id":"/2021/08/19/h2-2021","metadata":{"permalink":"/blog/2021/08/19/h2-2021","source":"@site/blog/2021-08-19-h2-2021.md","title":"React Native in H2 2021","description":"Over the past year so much has changed in our world, React Native being no exception. We\'ve welcomed new members to our team (whom we are excited to eventually meet in person!), our projects have matured and new opportunities have arisen. We\'re excited to share all this with you in this post and others to come!","date":"2021-08-19T00:00:00.000Z","formattedDate":"August 19, 2021","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":5.055,"hasTruncateMarker":true,"authors":[{"name":"Luna Wei","title":"Software Engineer at Meta","url":"https://twitter.com/lunaleaps","imageURL":"https://github.com/lunaleaps.png","key":"lunaleaps"}],"frontMatter":{"title":"React Native in H2 2021","authors":["lunaleaps"],"tags":["announcement"]},"unlisted":false,"prevItem":{"title":"React Native\'s Many Platform Vision","permalink":"/blog/2021/08/26/many-platform-vision"},"nextItem":{"title":"Announcing React Native 0.65","permalink":"/blog/2021/08/17/version-065"}},"content":"Over the past year so much has changed in our world, React Native being no exception. We\'ve welcomed new members to our team (whom we are excited to eventually meet in person!), our projects have matured and new opportunities have arisen. We\'re excited to share all this with you in this post and others to come!\\n\\nAt Facebook, our team works in half-year cycles. Each half we review our strategy, set plans, and share them internally. Today, we want to share our H2 plans with you, our community.\\n\\nH2 2021 is an exciting half for React Native. Our areas of focus include nurturing the community, beginning to roll out the new architecture to open source, and pushing the technology forward.\\n\\n\x3c!--truncate--\x3e\\n\\n## Setting up the Community for Success\\n\\nReact Native\u2019s open source ecosystem is one of its greatest strengths. We\u2019ve identified the following areas as the best ways to grow our partnership with the community.\\n\\n### Community Engagement\\n\\nIn order for everyone to move in the same direction, we want to continually communicate our vision and status to the community. Sharing our incremental progress publicly isn\u2019t second-nature for us (yet). This half, we are committing to a more consistent content schedule that exercises the muscle and sets up processes to reduce friction. Beyond sharing our updates, we also want to use this opportunity to showcase the accomplishments of the community.\\n\\n### New Architecture Rollout and Releases\\n\\nIn H1, [we finished rolling out the new React Native architecture](https://twitter.com/reactnative/status/1415099806507167745) to all React Native mobile products in the Facebook app. Facebook is made up of surfaces like Marketplace Tab and Dating Profile, and we have migrated over 1000 surfaces!\\n\\nIn H2, we are beginning to bring this new architecture to the community. We have put together a playbook that shows how to migrate libraries and applications. We have already shared drafts with early partners that maintain popular React Native libraries. We expect to get their feedback, support them in upgrading their libraries, and learn how to improve our playbook and implementations. We plan on sharing the playbook more broadly as soon as the work stabilizes.\\n\\nWe are also focused on improving React Native\u2019s release process. We will need frequent reliable releases to progressively ship the new React Native architecture. Our aim is to catch release-blockers earlier and to reduce the turn-around time. This will enable more predictable release timelines with less burden on contributors and developers.\\n\\n### Repository Health\\n\\nWhen developers evaluate a technology, an essential signal is the health of its repository. This impression is informed by signals such as pull request throughput, stars, age of last commit, and others. The React Native repository has historically lacked a process to ensure that issues and pull requests are reviewed in a timely manner. Our work this half is two-fold: we need to resolve a large backlog of contributions, and we need to build sustainable practices for handling incoming contributions. We hope this work will also set us up for success for more engagement from the community via issues and PRs as the community starts using the new architecture. You can follow our progress on the backlog using this [project board.](https://github.com/facebook/react-native/projects/17)\\n\\n## Pushing the Technology Forward\\n\\n### New Architectural Capabilities\\n\\nAs mentioned, our new architecture recently finished rolling out to the Facebook mobile apps! We are already building new capabilities that will change the performance curve for React Native. This includes supporting Concurrent Rendering in React Native. Concurrent Rendering enables React to pause and resume work and quickly respond to high priority events like a touch gesture. Something we are also really excited about is using Concurrent Rendering to make use of idle CPU cycles for rendering offscreen product features without slowing down onscreen user interactions.\\n\\n### Mobile and Beyond\\n\\nWe have had overwhelming success with powering mobile experiences using React at Facebook, and we have seen amazing mobile products from our partners. Now we want to bring that success to more platforms! We believe that targeting many platforms lets us learn new lessons and further improve our offering on mobile platforms. (We will share more about this in a later post.) The exciting news is that we\u2019ve already started taking steps towards making this a reality!\\n\\n#### Messenger Desktop\\n\\nLast summer, we [expanded our focus beyond mobile](https://twitter.com/reactnative/status/1286061933293010944) by partnering with Microsoft to accelerate React Native development on Windows and macOS. We partnered with the Messenger team at Facebook to enable user experiences that are only possible on desktop, and to deliver huge performance wins over their previous Electron implementation. Our vision is to combine high quality, delightful, _native_ desktop user experiences with the great developer experience of React Native.\\n\\nThe Messenger team has ambitious plans for the Messenger desktop apps, including finding new ways to further unleash the unique capabilities of desktop platforms and large screens. We are excited to continue enabling these experiences by investing more into React Native on desktop.\\n\\n#### React Native in Virtual Reality\\n\\nOculus has long used React Native to power core experiences like Store, where people buy applications and games in VR. In H2, React Native and Oculus are partnering to bring new exciting experiences to VR. We are also bringing optimizations and improvements from VR to mobile, and from mobile to VR. This will include expanding React Native to support unique requirements of VR \u2014 from new input types like controllers to new memory usage optimizations. This is the start of an exciting journey to explore and influence how immersive experiences can built for VR using React Native.\\n\\n### Summary\\n\\n\x3c!--alex ignore gross--\x3e\\n\\nWe hope our H2 plans excite you as much as it does us, and we look forward to sharing more with you in the upcoming months! We will also be attending React Native EU on September 1, 2021 where teammate Joshua Gross ([@joshuaisgross](https://twitter.com/joshuaisgross)) will share how we replaced the architecture for the world\u2019s largest React Native app. [Register for React Native EU](https://www.react-native.eu/) if you haven\u2019t already! In the meantime, connect with us on Twitter ([@reactnative](https://twitter.com/reactnative)) for updates on events, our roadmap, and much more."},{"id":"/2021/08/17/version-065","metadata":{"permalink":"/blog/2021/08/17/version-065","source":"@site/blog/2021-08-17-version-065.md","title":"Announcing React Native 0.65","description":"Today we\u2019re releasing React Native version 0.65 with a new version of Hermes, improvements to accessibility, package upgrades, and more.","date":"2021-08-17T00:00:00.000Z","formattedDate":"August 17, 2021","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"},{"label":"release","permalink":"/blog/tags/release"}],"readingTime":2.31,"hasTruncateMarker":false,"authors":[{"name":"Luna Wei","title":"Software Engineer at Meta","url":"https://twitter.com/lunaleaps","imageURL":"https://github.com/lunaleaps.png","key":"lunaleaps"}],"frontMatter":{"title":"Announcing React Native 0.65","authors":["lunaleaps"],"tags":["announcement","release"]},"unlisted":false,"prevItem":{"title":"React Native in H2 2021","permalink":"/blog/2021/08/19/h2-2021"},"nextItem":{"title":"The GAAD Pledge - One Year Later","permalink":"/blog/2021/05/20/GAAD-One-Year-Later"}},"content":"Today we\u2019re releasing React Native version 0.65 with a new version of Hermes, improvements to accessibility, package upgrades, and more.\\n\\n## What\'s new in Hermes 0.8?\\n\\n[Hermes](https://hermesengine.dev), Facebook\u2019s open source JavaScript VM optimized for React Native, has been upgraded to version 0.8.1. Some of the stand-out features in this release are:\\n\\n- A new concurrent garbage collector titled \u201cHades\u201d which delivers up to 30 times shorter pause times on 64 bit devices. At Facebook, we saw this improve some CPU-intensive workloads by 20%-50%. You can [learn more about Hades here](https://hermesengine.dev/docs/hades/).\\n- [ECMAScript Internationalization API (ECMA-402, or `Intl`)](https://hermesengine.dev/docs/intl) is now built into Hermes on Android and enabled by default, with only 57-62K per API size overhead (compared to [JSC\'s 6MiB](https://github.com/react-native-community/jsc-android-buildscripts)). With this change, Hermes users no longer require locale polyfills. A big thank you to [@mganandraj](https://github.com/mganandraj) and other partners at Microsoft for driving the implementation to make this happen!\\n- [Hermes on iOS](/blog/2021/03/12/version-0.64) now [supports Apple M1 Macs and Mac Catalyst](https://github.com/facebook/hermes/pull/546)!\\n- Memory improvements including SMI (Small Integers) and pointer compression that [shrank JS heap by 30%](https://twitter.com/tmikov/status/1385629737121243140).\\n- Changes to `Function.prototype.toString` that [fixed a performance drop due to improper feature detection](https://github.com/facebook/hermes/issues/471#issuecomment-820123463) and [supports the source code injecting use case](https://github.com/facebook/hermes/issues/114).\\n\\nYou can find the full [Hermes changelog here](https://github.com/facebook/hermes/releases).\\n\\n[Follow steps here](/docs/hermes#enabling-hermes) to opt-in your app to Hermes if you haven\u2019t already to leverage these new features and gains!\\n\\n## Accessibility Fixes and Additions\\n\\nLast year [Facebook took the GAAD pledge](https://reactnative.dev/blog/2021/05/20/GAAD-One-Year-Later) to improve accessibility within React Native. 0.65 shares the results of this pledge and other accessibility wins! Some notable changes include:\\n\\n- Allow specification of high contrast light and dark values for iOS. See [documentation](/docs/dynamiccolorios) for more details.\\n- Added [`getRecommendedTimeoutMillis`](/docs/accessibilityinfo#getrecommendedtimeoutmillis-android) API on Android. This exposes a user\u2019s preferred default timeout value as set in Android\u2019s accessibility options and is for users who may need extra time to review or reach controls, etc.\\n- General fixes to ensure TalkBack/VoiceOver properly announce UI states such as `disabled` and `unselected` on components.\\n\\nYou can follow along or contribute to our [outstanding accessibility issues](https://github.com/facebook/react-native/projects/15) here!\\n\\n## Notable Dependency Version Updates and Gotchas\\n\\n- `react-native-codegen` version `0.0.7` is now needed as a `devDependency` in the `package.json`.\\n- JCenter has been sunsetted and read-only now. We have removed JCenter as a maven repository and updated dependencies to use MavenCentral and Jitpack.\\n- Upgraded OkHttp from v3 to v4.9.1. See [Upgrading to OkHttp 4](https://square.github.io/okhttp/upgrading_to_okhttp_4/) for more details on changes.\\n- Upgraded to Flipper 0.93 to support Xcode 12.5. See [Flipper changelog here](https://github.com/facebook/flipper/blob/master/desktop/static/CHANGELOG.md).\\n- Android Gradle Plugin 7 support\\n- Apple Silicon requires a linker workaround. See [@mikehardy\u2019s note](https://github.com/react-native-community/releases/issues/238#issuecomment-890367992) about this.\\n\\n## Thank You!\\n\\nThis release includes over **1100 commits** from **61 contributors**. Thank you to everyone who has contributed and supported this release! You can find the [full changelog here](https://github.com/facebook/react-native/blob/main/CHANGELOG.md#v0650)."},{"id":"/2021/05/20/GAAD-One-Year-Later","metadata":{"permalink":"/blog/2021/05/20/GAAD-One-Year-Later","source":"@site/blog/2021-05-20-GAAD-One-Year-Later.md","title":"The GAAD Pledge - One Year Later","description":"It has been one year since Facebook took the GAAD Pledge to make React Native accessible and the project has exceeded our expectations. We are excited to announce that this project will continue throughout 2021 and want to update everyone on our progress so far. Following a thorough analysis of the accessibility gaps in React Native last year, work began on filling these gaps.","date":"2021-05-20T00:00:00.000Z","formattedDate":"May 20, 2021","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":3.995,"hasTruncateMarker":true,"authors":[{"name":"Alexandra Marlette","title":"GAAD Pledge Open Source Accessibility Community Manager for React Native","url":"https://twitter.com/alexmarlette","imageURL":"https://avatars.githubusercontent.com/u/10052470?s=460&u=7f2304cb929d1de703856717af86324c66728f3a&v=4"}],"frontMatter":{"title":"The GAAD Pledge - One Year Later","author":"Alexandra Marlette","authorTitle":"GAAD Pledge Open Source Accessibility Community Manager for React Native","authorURL":"https://twitter.com/alexmarlette","authorImageURL":"https://avatars.githubusercontent.com/u/10052470?s=460&u=7f2304cb929d1de703856717af86324c66728f3a&v=4","authorTwitter":"alexmarlette","tags":["announcement"]},"unlisted":false,"prevItem":{"title":"Announcing React Native 0.65","permalink":"/blog/2021/08/17/version-065"},"nextItem":{"title":"The GAAD Pledge - March Accessibility Issues Update","permalink":"/blog/2021/04/08/GAAD-March-Accessibility-Issue-Update"}},"content":"It has been one year since Facebook took the [GAAD Pledge](https://diamond.la/GAADPledge/) to make React Native accessible and the project has exceeded our expectations. We are excited to announce that this project will continue throughout 2021 and want to update everyone on our progress so far. Following a thorough analysis of the accessibility gaps in React Native last year, work began on filling these gaps.\\n\\nWe started with 90 outstanding gap analysis issues and from March 2021, when the project launched on GitHub, until now:\\n\\n- 11 issues have been closed by the community.\\n\\n- 19 issues were evaluated and closed by the React Native team.\\n\\n- 9 pull requests were merged.\\n\\n- 1 pull request was merged into the React Native docs.\\n\\nWe want to recognize and thank the React Native community for the significant progress towards a more accessible React Native over the past year. Every contributor\'s effort has counted in making progress on improving React Native Accessibility.\\n\\n\x3c!--truncate--\x3e\\n\\n## Fixes\\n\\nTwo types of issues have been fixed in multiple components and one new functionality has been added to the API by the 9 pull requests.\\n\\n- An issue with Disabled state has been addressed in seven components\\n\\n- An issue with Selected state was addressed in two components\\n\\n- A new addition to the React Native API added the ability to query AccessibilityManager.getRecommendedTimeoutMillis().\\n\\n### Disabled State Announcement and Disable function\\n\\nOne of the most prevalent issues found during the gap analysis was that some components do not announce or disable functionality. Now seven components announce their disabled state or disable click functionality.\\n\\nAnnounces when Disabled\\n\\n- `Button` - [#31001](https://github.com/facebook/react-native/pull/31001)\\n\\n- `Images` - [#31252](https://github.com/facebook/react-native/pull/31252)\\n\\n- `ImageBackground` - [#31252](https://github.com/facebook/react-native/pull/31252)\\n\\nDisables click functionality when the component has a disabled prop\\n\\n- `Button` - [#31001](https://github.com/facebook/react-native/pull/31001)\\n\\n- `Text` - [React Native Team commit](https://github.com/facebook/react-native/commit/33ff4445dcf858cd5e6ba899163fd2a76774b641)\\n\\n- `Pressable` - [React Native Team commit](https://github.com/facebook/react-native/commit/1c7d9c8046099eab8db4a460bedc0b2c07ed06df)\\n\\n- `TouchableHighlight` - [#31135](https://github.com/facebook/react-native/pull/31135)\\n\\n- `TouchableOpacity` - [#31108](https://github.com/facebook/react-native/pull/31108)\\n\\n- `TouchableNativeFeedback` - [#31224](https://github.com/facebook/react-native/pull/31224)\\n\\n- `TouchableWithoutFeedback` - [#31297](https://github.com/facebook/react-native/pull/31297)\\n\\n### Selected State Announcement\\n\\nThere were some components that did not announce their selection when in focus. This behavior has now been fixed when the component is in focus and the AccessibilityState is set to selected or the component is changed to selected.\\n\\nAnnounces when Selected\\n\\n- `Button` - [#31001](https://github.com/facebook/react-native/pull/31001)\\n\\n- `TextInput` - [#31144](https://github.com/facebook/react-native/pull/31144)\\n\\n### Accessibility Timeout Setting\\n\\nThere was previously no way to query the accessibility timeout setting on Android. The fix added the ability to query `AccessibilityManager.getRecommendedTimeoutMillis()`. This queries the \\"Time to take action\\" before the UI elements auto-dismisses or auto-progresses.\\n\\n## Documentation Additions\\n\\nThe React Native documentation must be updated to reflect each addition or change to the available APIs. The [new addition to the React Native documentation](https://reactnative.dev/docs/next/accessibilityinfo#getrecommendedtimeoutmillis-android) covered the addition of `getRecommendedTimeoutMillis()` to AccessibilityInfo.\\n\\n## Community Involvement\\n\\nWe want to thank all the contributors mentioned below who have submitted and merged pull requests as well as those who have reviewed and commented on issues.\\n\\n### Merged Pull Requests\\n\\n- [@huzaifaaak](https://twitter.com/huzaifaaak) closed 3 issues with:\\n  - [Added talkback support for button accessibility: disabled prop #31001](https://github.com/facebook/react-native/pull/31001)\\n  - [Accessibility/button test #31189](https://github.com/facebook/react-native/pull/31189)\\n- [@natural_clar](https://twitter.com/natural_clar) closed 1 issue with:\\n  - [feat: set disabled accessibilityState when `TouchableHighlight` is disabled #31135](https://github.com/facebook/react-native/pull/31135)\\n- [fabriziobertoglio1987](https://github.com/fabriziobertoglio1987) closed 2 issues with:\\n  - [[Android] Selected State does not annonce when `TextInput` Component selected #31144](https://github.com/facebook/react-native/pull/31144)\\n  - [Accessibility Fix Image does not announce \\"disabled\\" #31252](https://github.com/facebook/react-native/pull/31252)\\n- [@kyamashiro73](https://twitter.com/kyamashiro73) closed 1 issue with:\\n  - [Added talkback support for `TouchableNativeFeedback` accessibility: disabled prop #31224](https://github.com/facebook/react-native/pull/31224)\\n- [@grgr-dkrk](https://twitter.com/dkrk0901) closed 1 issue and added to the React Native documentation with:\\n  - [add `getRecommendedTimeoutMillis` to AccessibilityInfo #31063](https://github.com/facebook/react-native/pull/31063)\\n  - [feat: add `getRecommendedTimeoutMillis` section on accessibilityInfo #2581](https://github.com/facebook/react-native-website/pull/2581)\\n- [@crloscuesta](https://twitter.com/crloscuesta) closed 1 issue with:\\n  - [Disable accessibilityState when `TouchableWithoutFeedback` is disabled #31297](https://github.com/facebook/react-native/pull/31297)\\n- [@chakrihacker](https://twitter.com/chakrihacker) closed 1 issue with:\\n  - [Disable `TouchableOpacity` when accessibility disabled is set #31108](https://github.com/facebook/react-native/pull/31108)\\n\\nThank you to the community members who gave their time in other ways!\\n\\n[Simek](https://github.com/Simek), [saurabhkacholiya](https://github.com/saurabhkacholiya), [meehawk](https://github.com/meehawk), [intergalacticspacehighway](https://github.com/intergalacticspacehighway), [chrisglein](https://github.com/chrisglein), [jychiao](https://github.com/jychiao) and [Waltari10](https://github.com/Waltari10)\\n\\n## Get Involved!\\n\\nWe\'ve come a long way but we\'re not done yet. We need your support to reach the finish line. Facebook\'s React Native team has committed to supporting contributors working on gap analysis issues. They will continue to respond to comments on Accessibility issues and triage pull requests. The React Native team is also tackling some of the toughest gap analysis issues. This work includes the correct translation of accessibilityRoles to other languages and specifying error text for specific components.\\n\\nJoin us in tackling the rest. There are still open accessibility issues on the [Improved React Native Accessibility project board](https://github.com/facebook/react-native/projects/15). Issues with [Checked/Unchecked State](https://github.com/facebook/react-native/issues/30843), [Entrance/exit from Collection](https://github.com/facebook/react-native/issues/30861), and [Position in Collection](https://github.com/facebook/react-native/issues/30977) are great opportunities for current and new contributors to contribute to a more accessible React Native.\\n\\n### Learn More\\n\\nRead about how the gap analysis was conducted on the [Facebook Tech blog](https://tech.fb.com/react-native-accessibility/) or about the launch of the GitHub issues on the [React Native Blog](https://reactnative.dev/blog/2021/03/08/GAAD-React-Native-Accessibility)."},{"id":"/2021/04/08/GAAD-March-Accessibility-Issue-Update","metadata":{"permalink":"/blog/2021/04/08/GAAD-March-Accessibility-Issue-Update","source":"@site/blog/2021-04-08-GAAD-March-Accessibility-Issue-Update.md","title":"The GAAD Pledge - March Accessibility Issues Update","description":"It has been four weeks since we reached out to the GitHub community with a thoroughly reviewed gap analysis and list of issues to improve React Native\'s accessibility. With the help of the React Native community, we are already making great progress on improving accessibility. Community members have been helping contributors, reviewing tests, and bringing attention to prior accessibility issues. Since March 8th the community has closed six issues with four pull requests and seven other pull requests are in the pipeline for review.","date":"2021-04-08T00:00:00.000Z","formattedDate":"April 8, 2021","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":2.715,"hasTruncateMarker":true,"authors":[{"name":"Alexandra Marlette","title":"GAAD Pledge Open Source Accessibility Community Manager for React Native","url":"https://twitter.com/alexmarlette","imageURL":"https://avatars.githubusercontent.com/u/10052470?s=460&u=7f2304cb929d1de703856717af86324c66728f3a&v=4"}],"frontMatter":{"title":"The GAAD Pledge - March Accessibility Issues Update","author":"Alexandra Marlette","authorTitle":"GAAD Pledge Open Source Accessibility Community Manager for React Native","authorURL":"https://twitter.com/alexmarlette","authorImageURL":"https://avatars.githubusercontent.com/u/10052470?s=460&u=7f2304cb929d1de703856717af86324c66728f3a&v=4","authorTwitter":"alexmarlette","tags":["announcement"]},"unlisted":false,"prevItem":{"title":"The GAAD Pledge - One Year Later","permalink":"/blog/2021/05/20/GAAD-One-Year-Later"},"nextItem":{"title":"Announcing React Native 0.64 with Hermes on iOS","permalink":"/blog/2021/03/12/version-0.64"}},"content":"It has been four weeks since we reached out to the GitHub community with a thoroughly reviewed gap analysis and list of issues to improve React Native\'s accessibility. With the help of the React Native community, we are already making great progress on improving accessibility. Community members have been helping contributors, reviewing tests, and bringing attention to prior accessibility issues. Since March 8th the community has closed six issues with four pull requests and seven other pull requests are in the pipeline for review.\\n\\nWhile this work continues, the React Native and Accessibility teams at Facebook are evaluating accessibility bugs and issues that were submitted prior to this initiative, to determine if they are already covered by our current gap analysis or if there are additional issues that need to be brought into the project. One new issue has already been discovered and moved into the project, four others directly mapped to existing issues and two others are expected to be closed by addressing existing issues that address the root cause of their issue.\\n\\nThank you to all the community members who have participated. You are truly moving the needle in making React Native more accessible for everyone!\\n\\n\x3c!--truncate--\x3e\\n\\n## Closed Pull Requests \ud83c\udf89\\n\\n- [Added talkback support for button accessibility: disabled prop #31001](https://github.com/facebook/react-native/pull/31001) - closed by [@huzaifaaak ](https://twitter.com/huzaifaaak)\\n\\n- [feat: set disabled accessibilityState when TouchableHighlight is disabled #31135](https://github.com/facebook/react-native/pull/31135) closed by [@natural_clar](https://twitter.com/natural_clar)\\n\\n- [[Android] Selected State does not annonce when TextInput Component selected #31144](https://github.com/facebook/react-native/pull/31144) closed by [fabriziobertoglio1987](https://fabriziobertoglio.xyz/)\\n\\n- [Added talkback support for TouchableNativeFeedback accessibility: disabled prop #31224](https://github.com/facebook/react-native/pull/31224) closed by [@kyamashiro73](https://twitter.com/kyamashiro73)\\n\\n- [Accessibility/button test #31189](https://github.com/facebook/react-native/pull/31189) closed by [@huzaifaaak ](https://twitter.com/huzaifaaak)\\n\\n  - Adds a test for accessibilityState for button\\n\\n## Fixes\\n\\n- `Button` component (fixed by [#31001](https://github.com/facebook/react-native/pull/31001)):\\n\\n  - Now announces when it is disabled\\n\\n  - Disables click functionality for screen readers when the button is disabled\\n\\n  - Announces the selected state of the button\\n\\n- `TextInput` component (fixed by [#31144](https://github.com/facebook/react-native/pull/31144)):\\n\\n  - Announces \\"selected\\" when the \\"selected\\" accessibilityState is set to true and the element is focused\\n\\n- `TouchableHighlight` component (fixed by [#31135](https://github.com/facebook/react-native/pull/31135)):\\n\\n  - Disables click functionality for screen readers when the component is disabled\\n\\n- `TouchableNativeFeedback` component (fixed by [#31224](https://github.com/facebook/react-native/pull/31224)):\\n\\n  - Disables click functionality for screen readers when the component is disabled\\n\\n## Other Progress\\n\\n| Status                                  | Number of Issues |\\n| --------------------------------------- | :--------------: |\\n| Issues To Do                            |        53        |\\n| In Progress Issues by the Community     |        8         |\\n| In Progress Issues by React Native Team |        5         |\\n| Pull Request in Progress                |        3         |\\n| Pull Request in Reviews                 |        4         |\\n\\n## Get involved!\\n\\n- New contributors should read the [contribution guide](https://github.com/facebook/react-native/blob/master/CONTRIBUTING.md) and browse the list of 37 [good first issues](https://github.com/facebook/react-native/issues?q=is%3Aopen+is%3Aissue+label%3A%22Good+first+issue%22+label%3AAccessibility) in the React Native GitHub.\\n\\n- Contributors interested in issues requiring a bit more effort should visit [the project page for Improved React Native Accessibility](https://github.com/facebook/react-native/projects/15) to see the GitHub issues that need their knowledge of React Native.\\n\\n- Technical writers interested in updating React Native\'s documentation to reflect the accessibility gaps being closed should visit the [React Native Docs](https://github.com/facebook/react-native-website#-overview).\\n\\n- Share this initiative with anyone who may be able to help!\\n\\n- Follow the GAAD Pledge Open Source Accessibility Community Manager for React Native on [Twitter](https://twitter.com/alexmarlette) or [Facebook](https://www.facebook.com/React-Native-Open-Source-Accessibility-Community-Manager-102732258549941) to keep up to date on progress."},{"id":"/2021/03/12/version-0.64","metadata":{"permalink":"/blog/2021/03/12/version-0.64","source":"@site/blog/2021-03-12-version-0.64.md","title":"Announcing React Native 0.64 with Hermes on iOS","description":"Today we\u2019re releasing React Native 0.64 that ships with support for Hermes on iOS.","date":"2021-03-12T00:00:00.000Z","formattedDate":"March 12, 2021","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"},{"label":"release","permalink":"/blog/tags/release"}],"readingTime":3.14,"hasTruncateMarker":false,"authors":[{"name":"Mike Grabowski","title":"CTO and Co-Founder at Callstack","url":"https://twitter.com/grabbou","imageURL":"https://avatars0.githubusercontent.com/u/2464966?s=460&v=4"}],"frontMatter":{"title":"Announcing React Native 0.64 with Hermes on iOS","author":"Mike Grabowski","authorTitle":"CTO and Co-Founder at Callstack","authorURL":"https://twitter.com/grabbou","authorImageURL":"https://avatars0.githubusercontent.com/u/2464966?s=460&v=4","authorTwitter":"grabbou","tags":["announcement","release"]},"unlisted":false,"prevItem":{"title":"The GAAD Pledge - March Accessibility Issues Update","permalink":"/blog/2021/04/08/GAAD-March-Accessibility-Issue-Update"},"nextItem":{"title":"The GAAD Pledge - Improving React Native Accessibility","permalink":"/blog/2021/03/08/GAAD-React-Native-Accessibility"}},"content":"Today we\u2019re releasing React Native 0.64 that ships with support for Hermes on iOS.\\n\\n## Hermes opt-in on iOS\\n\\n[Hermes](https://hermesengine.dev) is an open source JavaScript engine optimized for running React Native. It improves performance by decreasing memory utilization, reducing download size and decreasing the time it takes for the app to become usable or \u201ctime to interactive\u201d (TTI).\\n\\nWith this release, we are happy to announce that you can now use Hermes to build on iOS as well. To enable Hermes on iOS, set `hermes_enabled` to `true` in your `Podfile` and run `pod install`.\\n\\n```ruby\\nuse_react_native!(\\n   :path => config[:reactNativePath],\\n   # to enable hermes on iOS, change `false` to `true` and then install pods\\n   :hermes_enabled => true\\n)\\n```\\n\\nPlease keep in mind that Hermes support on iOS is still early stage. We are keeping it as an opt-in as we are running further benchmarking. We encourage you to try it on your own applications and let us know how it is working out for you!\\n\\n## Inline Requires enabled by default\\n\\nInline Requires is a Metro configuration option that improves startup time by delaying execution of JavaScript modules until they are used, instead of at startup.\\n\\nThis feature has existed and been recommended for a few years as an opt-in configuration option, listed in the [Performance section of our documentation](/docs/performance). We are now enabling this option by default for new applications to help people have fast React Native applications without extra configuration.\\n\\nInline Requires is a Babel transform that takes module imports and converts them to be inline. As an example, Inline Requires transforms this module import call from being at the top of the file to where it is used.\\n\\n**Before:**\\n\\n```jsx\\nimport {MyFunction} from \'my-module\';\\n\\nconst MyComponent = props => {\\n  const result = MyFunction();\\n\\n  return <Text>{result}</Text>;\\n};\\n```\\n\\n**After:**\\n\\n```jsx\\nconst MyComponent = props => {\\n  const result = require(\'my-module\').MyFunction();\\n\\n  return <Text>{result}</Text>;\\n};\\n```\\n\\nMore information about Inline Requires is available in the [Performance documentation](/docs/ram-bundles-inline-requires#inline-requires).\\n\\n## View Hermes traces with Chrome\\n\\n\x3c!--alex ignore fellowship--\x3e\\n\\nOver the last year Facebook has sponsored the [Major League Hacking fellowship](https://fellowship.mlh.io/), supporting contributions to React Native. [Jessie Nguyen](https://twitter.com/jessie_anh_ng) and [Saphal Patro](https://twitter.com/saphalinsaan) added the ability to use the Performance tab on Chrome DevTools to visualize the execution of your application when it is using Hermes.\\n\\nFor more information, check out the [new documentation page](/docs/profile-hermes#record-a-hermes-sampling-profile).\\n\\n## Hermes with Proxy Support\\n\\nWe have added Proxy support to Hermes, enabling compatibility with popular community projects like react-native-firebase and mobx. If you have been using these packages you can now migrate to Hermes for your project.\\n\\nWe plan to make Hermes the default JavaScript engine for Android in a coming release so we are working to resolve the remaining issues people have when using Hermes. Please open an issue on the [Hermes GitHub repo](https://github.com/facebook/hermes) if there are remaining issues holding back your app from adopting Hermes.\\n\\n## React 17\\n\\nReact 17 does not include new developer-facing features or major breaking changes. For React Native applications, the main change is a [new JSX transform](https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html) enabling files to no longer need to import React to be able to use JSX.\\n\\nMore information about React 17 is available [on the React blog](https://reactjs.org/blog/2020/10/20/react-v17.html).\\n\\n## Major Dependency Version Changes\\n\\n- Dropped Android API levels 16-20. The Facebook app consistently drops support for Android versions with sufficiently low usage. As the Facebook app no longer supports these versions and is React Native\u2019s main testing surface, React Native is dropping support as well.\\n- Xcode 12 and CocoaPods 1.10 are required\\n- Minimum Node support bumped from 10 to Node 12\\n- Flipper bumped to 0.75.1\\n\\n## Thanks\\n\\nThank you to the hundreds of contributors that helped make 0.64 possible! The [0.64 changelog](https://github.com/facebook/react-native/blob/main/CHANGELOG.md#v0640) includes all of the changes included in this release."},{"id":"/2021/03/08/GAAD-React-Native-Accessibility","metadata":{"permalink":"/blog/2021/03/08/GAAD-React-Native-Accessibility","source":"@site/blog/2021-03-08-GAAD-React-Native-Accessibility.md","title":"The GAAD Pledge - Improving React Native Accessibility","description":"Hello React Native Community,","date":"2021-03-08T00:00:00.000Z","formattedDate":"March 8, 2021","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":1.695,"hasTruncateMarker":false,"authors":[{"name":"Alexandra Marlette","title":"GAAD Pledge Open Source Accessibility Community Manager for React Native","url":"https://twitter.com/alexmarlette","imageURL":"https://avatars.githubusercontent.com/u/10052470?s=460&u=7f2304cb929d1de703856717af86324c66728f3a&v=4"}],"frontMatter":{"title":"The GAAD Pledge - Improving React Native Accessibility","author":"Alexandra Marlette","authorTitle":"GAAD Pledge Open Source Accessibility Community Manager for React Native","authorURL":"https://twitter.com/alexmarlette","authorImageURL":"https://avatars.githubusercontent.com/u/10052470?s=460&u=7f2304cb929d1de703856717af86324c66728f3a&v=4","authorTwitter":"alexmarlette","tags":["announcement"]},"unlisted":false,"prevItem":{"title":"Announcing React Native 0.64 with Hermes on iOS","permalink":"/blog/2021/03/12/version-0.64"},"nextItem":{"title":"React Native Documentation Update","permalink":"/blog/2020/07/23/docs-update"}},"content":"## Hello React Native Community,\\n\\nIn May 2020 Facebook was the first company to take the [GAAD pledge](https://diamond.la/GAADPledge/), by doing so they committed to making accessibility a core part of the React Native open source project. Since May, Facebook has spent that time thoughtfully reviewing and documenting accessibility gaps within React Native. So far the gap analysis has surfaced 90 issues, all of which have been translated to [GitHub issues](https://github.com/facebook/react-native/projects/15).\\n\\nOverall, we found that React Native APIs provide strong support for accessibility. However, we also found many core components do not yet fully utilize platform accessibility APIs and support is missing for some platform specific features.\\n\\nThe enthusiasm and diversity of contributors have always played a critical role in the development of React Native and these gaps in accessibility are great opportunities for current and new contributors. If you have been interested in contributing to React Native, we encourage you to join us in making React Native more accessible.\\n\\nTo recognize contributors for their effort, when an accessibility issue is closed and attached to a pull request, contributors will get a shout out on Twitter from our community manager. Contributors whose pull requests are accepted into the codebase will be highlighted in our monthly issues update on the React Native blog.\\n\\nPlease join us in making React Native more accessible for everyone.\\n\\n### How you can help:\\n\\n- New contributors should read the [contribution guide](https://github.com/facebook/react-native/blob/master/CONTRIBUTING.md) and browse the list of 46 [good first issues](https://github.com/facebook/react-native/issues?q=is%3Aopen+is%3Aissue+label%3A%22Good+first+issue%22+label%3AAccessibility) in the React Native GitHub.\\n\\n- Contributors interested in issues requiring a bit more effort should visit [the project page for Improved React Native Accessibility](https://github.com/facebook/react-native/projects/15) to see the GitHub issues that need their knowledge of React Native.\\n\\n- Technical writers interested in updating React Native\'s documentation to reflect the accessibility gaps being closed should visit the [React Native Docs](https://github.com/facebook/react-native-website#-overview).\\n\\n- Share this initiative with anyone who may be able to help!\\n\\n- Follow the GAAD Pledge Open Source Accessibility Community Manager for React Native on [Twitter](https://twitter.com/alexmarlette) or [Facebook](https://www.facebook.com/React-Native-Open-Source-Accessibility-Community-Manager-102732258549941) to keep up to date on progress."},{"id":"/2020/07/23/docs-update","metadata":{"permalink":"/blog/2020/07/23/docs-update","source":"@site/blog/2020-07-23-docs-update.md","title":"React Native Documentation Update","description":"Last year we conducted user interviews and sent out a survey to learn more about how and when people use the React Native docs. With the data and guidance gleaned from 24 interviews and over 3000 survey responses, we\'ve been able to work to improve React Native\'s documentation, and we\'re excited to share that progress today:","date":"2020-07-23T00:00:00.000Z","formattedDate":"July 23, 2020","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":2.805,"hasTruncateMarker":true,"authors":[{"name":"Rachel Nabors","title":"Documentation Engineer at Facebook","url":"https://twitter.com/rachelnabors","imageURL":"https://avatars0.githubusercontent.com/u/236306?s=460&v=4"}],"frontMatter":{"title":"React Native Documentation Update","author":"Rachel Nabors","authorTitle":"Documentation Engineer at Facebook","authorURL":"https://twitter.com/rachelnabors","authorImageURL":"https://avatars0.githubusercontent.com/u/236306?s=460&v=4","authorTwitter":"rachelnabors","tags":["announcement"]},"unlisted":false,"prevItem":{"title":"The GAAD Pledge - Improving React Native Accessibility","permalink":"/blog/2021/03/08/GAAD-React-Native-Accessibility"},"nextItem":{"title":"React Native Team Principles","permalink":"/blog/2020/07/17/react-native-principles"}},"content":"Last year we conducted user interviews and sent out [a survey](https://www.surveymonkey.co.uk/r/DDZWQDJ) to learn more about how and when people use the React Native docs. With the data and guidance gleaned from 24 interviews and over 3000 survey responses, we\'ve been able to work to improve React Native\'s documentation, and we\'re excited to share that progress today:\\n\\n- **[New Getting Started guides](https://reactnative.dev/docs/getting-started)** We launched new Getting Started with docs to [explain what Native Components](https://reactnative.dev/docs/intro-react-native-components) are to people with no mobile development background. We also included a [refresher/introduction to React](https://reactnative.dev/docs/intro-react) to help folks getting started with React for the first time!\\n- **[New Testing guide](https://reactnative.dev/docs/testing-overview)** We worked with Vojtech Novak to create a new illustrated testing guide that introduces app developers to different kinds of testing strategies and how they work in a React Native workflow.\\n- **[New Security guide](https://reactnative.dev/docs/security)** We worked with Kadi Kraman to create a new illustrated security guide that explains the basics of security in a React Native world and puts forth best in class solutions.\\n- **More illustrations** We\'ve added fancy new illustrations, including the new [`Pressable`](https://reactnative.dev/docs/pressable) and [introduction to React Native components](https://reactnative.dev/docs/intro-react-native-components) docs\\n- **https://reactnative.dev** After 5 years we finally moved to our own domain! **reactnative.dev** is easier to autocomplete from your browser bar and is easier to type out than our previous **github.io** address!\\n- **Site design and architecture improvements** We\'ve updated the design and site architecture to surface and categorize more of our guides and make content in the API reference more readable. Kudos especially to [Bartosz Kaszubowski](https://github.com/Simek) whose attention to detail and collaboration has made many of these changes possible quickly!\\n- **Updated Core Component and API docs** We held a [documentation drive](https://github.com/facebook/react-native-website/issues/1579) to update reference docs! Thanks to these and other participants we were able to fully update the docs and add Snack examples to all of them in time for 0.62: [Marta Dabrowka](https://twitter.com/martadabrowka), [Abraham Nnaji](https://twitter.com/nnajiabraham), [Ahmed Talaat El-Hager](https://twitter.com/ahmdtalat), [Mohamed Abdel Nasser Abdou](https://twitter.com/mohamedsgap), [Danilo Britto](https://twitter.com/danilobrinu), [Mitul Savani](https://twitter.com/mitulsavani), [Kaio Duarte](https://twitter.com/kaiodduarte), [Pablo Espinosa](https://twitter.com/espipj), [Jesse Katsumata](https://twitter.com/natural_clar), [I Gede Agastya Darma Laksana](https://twitter.com/gedeagas), [Sebasti\xe3o Bruno Kiafuka Fernando](https://twitter.com/bruno_kiafuka), [Miguel Bolivar](https://twitter.com/Darking360), [Dani Akash](https://twitter.com/dani_akash_), [Luiz Celso de Faria Alves](https://twitter.com/_eucelso), and [Bartosz Kaszubowski](https://twitter.com/simek). With their contributions, these are the best and most up to date React Native docs yet!\\n- **Keep those PRs coming!** We are able to consistently keep our open PRs under 10 per week! Thank you for sending them!\\n\\nThank you so much to everyone who participated in the interviews, the survey, and our documentation efforts! Your collaboration makes this possible.\\n\\n\x3c!--truncate--\x3e\\n\\n## What\u2019s next?\\n\\nThe global COVID-19 pandemic has impacted many community members\u2019 jobs.\\n\\nWe are responding with additional content including:\\n\\n- New and improved Native Modules guides\\n- Introductory content for people coming in to React Native for the first time\\n\\n### You can help!\\n\\nThere are many ways you can help us write even better docs!\\n\\n1. If you see a typo, run into an issue with a guide, or something otherwise isn\u2019t quite right, click that \u201cEdit\u201d button and submit a PR.\\n2. [Participate in our survey](https://www.surveymonkey.co.uk/r/DDZWQDJ)\u2014this helps us understand how you use React Native and its documentation\\n3. Write for us! We\u2019re working on a tutorial section as well as guides for topics like offline apps, navigation, accessibility, debugging, animations, internationalization, and performance. If you or someone you admire or know is a perfect fit for any of these, please [reach out to me](https://twitter.com/rachelnabors)!"},{"id":"/2020/07/17/react-native-principles","metadata":{"permalink":"/blog/2020/07/17/react-native-principles","source":"@site/blog/2020-07-17-react-native-principles.md","title":"React Native Team Principles","description":"The React Native team at Facebook is guided by principles that help determine how we prioritize our work on React Native. These principles represent our team specifically and do not necessarily represent every stakeholder in the React Native community. We are sharing these principles here to be more transparent about what drives us, how we make decisions, and how we focus our efforts.","date":"2020-07-17T00:00:00.000Z","formattedDate":"July 17, 2020","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":4.535,"hasTruncateMarker":false,"authors":[{"name":"Eli White","title":"Engineering Manager on React Native","url":"https://twitter.com/Eli_White","imageURL":"https://avatars2.githubusercontent.com/u/249164?s=460&v=4"}],"frontMatter":{"title":"React Native Team Principles","author":"Eli White","authorTitle":"Engineering Manager on React Native","authorURL":"https://twitter.com/Eli_White","authorImageURL":"https://avatars2.githubusercontent.com/u/249164?s=460&v=4","authorTwitter":"Eli_White","tags":["announcement"]},"unlisted":false,"prevItem":{"title":"React Native Documentation Update","permalink":"/blog/2020/07/23/docs-update"},"nextItem":{"title":"Announcing React Native 0.63 with LogBox","permalink":"/blog/2020/07/06/version-0.63"}},"content":"The React Native team at Facebook is guided by principles that help determine how we prioritize our work on React Native. These principles represent our team specifically and do not necessarily represent every stakeholder in the React Native community. We are sharing these principles here to be more transparent about what drives us, how we make decisions, and how we focus our efforts.\\n\\n## **Native Experience**\\n\\nOur top priority for React Native is to **match the expectations people have for each platform**. This is why React Native renders to platform primitives. We value native look-and-feel over cross-platform consistency.\\n\\nFor example, the TextInput in React Native renders to a UITextField on iOS. This ensures that integration with password managers and keyboard controls work out of the box. By using platform primitives, React Native apps are also able to stay up-to-date with design and behavior changes from new releases of Android and iOS.\\n\\nIn order to match the look-and-feel of native apps, we must also match their performance. This is where we focus our most ambitious efforts. For example, Facebook created Hermes, [a new JavaScript Engine built from scratch for React Native on Android](https://facebook.github.io/react-native/blog/2019/07/17/hermes). Hermes significantly improves the start time of React Native apps. We are also working on major architectural changes that optimize the threading model and make React Native easier to interoperate with native code.\\n\\n## Massive Scale\\n\\nHundreds of screens in the Facebook app are implemented with React Native. The Facebook app is used by billions of people on a huge range of devices. **This is why** **we invest in the most challenging problems at scale.**\\n\\nDeploying React Native in our apps lets us identify problems that we wouldn\u2019t see at a smaller scale. For example, Facebook focuses on improving performance across a broad spectrum of devices from the newest iPhone to many older generations of Android devices. This focus informs our architecture projects such as Hermes, Fabric, and TurboModules.\\n\\nWe have proven that React Native can scale to massive organizations too. When hundreds of developers are working on the same app, gradual adoption is a must. This is why we made sure that React Native can be adopted one screen at a time. Soon, we will be taking this one step further and enable migrating individual native views of an existing native screen to React Native.\\n\\nA focus on massive scale means there are many things our team isn\u2019t currently working on. For example, our team doesn\u2019t drive the adoption of React Native in the industry. We also do not actively build solutions for problems that we don\u2019t see at scale. We are proud that we have [many partners and core contributors](https://github.com/facebook/react-native/blob/master/ECOSYSTEM.md) that are able to focus on those important areas for the community.\\n\\n## Developer Velocity\\n\\nGreat user experiences are created iteratively. **It should only take a few seconds to seeing the result of code changes** in a running app. React Native\'s architecture enables it to provide near-instant feedback during development.\\n\\nWe often hear from teams that adopting React Native significantly improved their development velocity. These teams find that the instant feedback during development makes it much easier to try different ideas and add extra polish when they don\u2019t have to interrupt their coding session for every little change. When we make changes to React Native, we make sure to preserve this quality of the developer experience.\\n\\nInstant feedback is not the only way that React Native improves developer velocity. Teams can leverage the fast-growing ecosystem of high quality open source packages. Teams can also share business logic between Android, iOS, and the web. This helps them ship updates faster and reduce organizational silos between platform teams.\\n\\n## Every Platform\\n\\nWhen we introduced React Native in 2014, we presented it with our motto \u201cLearn once, write anywhere\u201d \u2014 and we mean _anywhere_. **Developers should be able to reach as many people as possible without being limited by device model or operating system.**\\n\\nReact Native targets very different platforms including mobile, desktop, web, TV, VR, game consoles, and more. We want to enable rich experiences on each platform instead of requiring developers to build for the lowest common denominator. To accomplish this, we focus on supporting the unique features of each platform. This ranges from varying input mechanisms (e.g. touch, pen, mouse) to fundamentally different consumption experiences like 3D environments in VR.\\n\\nThis principle informed our decision to implement React Native\u2019s new core architecture in cross-platform C++ to promote parity across platforms. We are also refining the public interface targeted at other platform maintainers like Microsoft with Windows and macOS. We strive to enable any platforms to support React Native.\\n\\n## Declarative UI\\n\\nWe don\u2019t believe in deploying the exact same user interface on every platform, we believe in **exposing each platform\u2019s unique capabilities with the same declarative programming model**. Our declarative programming model is React.\\n\\nIn our experience, the unidirectional data flow popularized by React makes applications easier to understand. We prefer to express a screen as a composition of declarative components rather than imperatively managed views. React\u2019s success on the web and the direction of the new native Android and iOS frameworks show that the industry has also embraced declarative UI.\\n\\nReact popularized declarative user interfaces. However, there remain many unsolved problems that React is uniquely positioned to solve. React Native will continue to build on top of the innovations of React and remain at the forefront of the declarative user interface movement."},{"id":"/2020/07/06/version-0.63","metadata":{"permalink":"/blog/2020/07/06/version-0.63","source":"@site/blog/2020-07-06-version-0.63.md","title":"Announcing React Native 0.63 with LogBox","description":"Today we\u2019re releasing React Native 0.63 that ships with LogBox turned on by default.","date":"2020-07-06T00:00:00.000Z","formattedDate":"July 6, 2020","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"},{"label":"release","permalink":"/blog/tags/release"}],"readingTime":7.065,"hasTruncateMarker":false,"authors":[{"name":"Mike Grabowski","title":"CTO and Co-Founder at Callstack","url":"https://twitter.com/grabbou","imageURL":"https://avatars0.githubusercontent.com/u/2464966?s=460&v=4"}],"frontMatter":{"title":"Announcing React Native 0.63 with LogBox","author":"Mike Grabowski","authorTitle":"CTO and Co-Founder at Callstack","authorURL":"https://twitter.com/grabbou","authorImageURL":"https://avatars0.githubusercontent.com/u/2464966?s=460&v=4","authorTwitter":"grabbou","tags":["announcement","release"]},"unlisted":false,"prevItem":{"title":"React Native Team Principles","permalink":"/blog/2020/07/17/react-native-principles"},"nextItem":{"title":"Announcing React Native 0.62 with Flipper","permalink":"/blog/2020/03/26/version-0.62"}},"content":"Today we\u2019re releasing React Native 0.63 that ships with LogBox turned on by default.\\n\\n## LogBox\\n\\nWe\u2019ve heard frequent feedback from the community that errors and warnings are difficult to debug in React Native. To address these issues we took a look at the entire error, warning, and log system in React Native and redesigned it [from the ground up](https://www.youtube.com/watch?v=Y8brBH5O-bQ&feature=youtu.be).\\n\\n![Screenshot of LogBox](/blog/assets/0.63-logbox.png)\\n\\nLogBox is a completely redesigned redbox, yellowbox, and logging experience in React Native. In 0.62 we introduced LogBox as an opt-in. In this release, we\u2019re launching LogBox as the default experience in all of React Native.\\n\\nLogBox addresses complaints that errors and warnings were too verbose, poorly formatted, or unactionable by focusing on three primary goals:\\n\\n- **Concise**: Logs should provide the minimum amount of information necessary to debug an issue.\\n- **Formatted**: Logs should be formatted so that you can quickly find the information you need.\\n- **Actionable**: Logs should be actionable, so you can fix the issue and move on.\\n\\nTo achieve these goals, LogBox includes:\\n\\n- **Log notifications**: We\u2019ve redesigned the warning notifications and added support for errors so that all console.warn and console.log messages show up as notifications instead of covering your app.\\n- **Code Frames**: Every error and warning now includes a code frame that shows the source code of the log right inside the app, allowing you to quickly identify the source of your issue.\\n- **Component Stacks**: All component stacks are now stripped from error messages and put into their own section with the top three frames visible. This gives you a single, consistent space to expect stack frame information that doesn\u2019t clutter the log message.\\n- **Stack Frame Collapsing**: By default we now collapse call stack frames not related to your application\u2019s code so you can quickly see the issue in your app and not sift through React Native internals.\\n- **Syntax Error Formatting**: We\u2019ve improved the formatting for syntax errors and added codeframes with syntax highlighting so you can see the source of the error, fix it, and continue coding without React Native getting in your way.\\n\\nWe\u2019ve wrapped all of these features into an improved visual design that\u2019s consistent between errors and warnings and allows paginating through all logs in one enjoyable UI.\\n\\nWith this change we\u2019re also deprecating YellowBox in favor of LogBox APIs:\\n\\n- `LogBox.ignoreLogs()`: This function replaces `YellowBox.ignoreLogs([])` as a way to silence any logs that match the given strings or regexes.\\n- `LogBox.ignoreAllLogs()`: This function replaces `console.disableYellowBox` as a way to turn off error or warning notifications. Note: this only disables notifications, uncaught errors will still open a full screen LogBox.\\n\\nIn 0.63, we will warn when using these deprecated modules or methods. Please update your call sites off of these APIs before they are removed in 0.64.\\n\\nFor more information on LogBox and debugging react native, see the docs [here](https://reactnative.dev/docs/debugging#in-app-errors-and-warnings).\\n\\n## Pressable\\n\\nReact Native is built to enable applications to meet user\u2019s expectations of the platform. This includes avoiding \u201ctells\u201d\u2014little things that give away that the experience was built with React Native. One major source of these tells has been the Touchable components: `Button`, `TouchableWithoutFeedback`, `TouchableHighlight`, `TouchableOpacity`, `TouchableNativeFeedback`, and `TouchableBounce`. These components make your application interactive by allowing you to provide visual feedback to user interactions. However, because they include built-in styles and effects that don\u2019t match the platform interaction, users can tell when experiences are written with React Native.\\n\\nFurther, as React Native has grown and our bar for high-quality applications has gone up, these components haven\'t grown with it. React Native now supports platforms like Web, Desktop, and TV, but support for additional input modalities has been lacking. React Native needs to support high-quality interaction experiences on all platforms.\\n\\nTo address these problems, we are shipping a new core component called `Pressable`. This component can be used to detect various types of interactions. The API was designed to provide direct access to the current state of interaction without having to maintain state manually in a parent component. It was also designed to enable platforms to extend it\'s capabilities to include hover, blur, focus, and more. We expect that most people will build and share components utilizing `Pressable` under the hood instead of relying on the default experience of something like `TouchableOpacity`.\\n\\n```jsx\\nimport {Pressable, Text} from \'react-native\';\\n\\n<Pressable\\n  onPress={() => {\\n    console.log(\'pressed\');\\n  }}\\n  style={({pressed}) => ({\\n    backgroundColor: pressed ? \'lightskyblue\' : \'white\',\\n  })}>\\n  <Text style={styles.text}>Press Me!</Text>\\n</Pressable>;\\n```\\n\\n<p className=\\"snippet-caption\\">\\n  A simple example of a Pressable component in action\\n</p>\\n\\nYou can learn more about it from [the documentation](https://reactnative.dev/docs/pressable).\\n\\n## Native Colors (PlatformColor, DynamicColorIOS)\\n\\nEvery native platform has the concept of system-defined colors. Colors that automatically respond to system theme settings such as Light or Dark mode, accessibility settings such as a High Contrast mode, and even its context within the app such as the traits of a containing view or window.\\n\\nWhile it is possible to detect some of these settings via the [`Appearance`](https://reactnative.dev/docs/appearance#getcolorscheme) API and/or [`AccessibilityInfo`](https://reactnative.dev/docs/accessibilityinfo#isgrayscaleenabled) and set your styles accordingly, such abstractions are not only costly to develop but are approximating the appearance of native colors. These inconsistencies are particularly noticeable when working on a hybrid application, where React Native elements co-exist next to the native ones.\\n\\nReact Native now provides an out-of-the-box solution to use these system colors. `PlatformColor()` is a new API that can be used like any other color in React Native.\\n\\nFor example, on iOS, the [system provides a color called `labelColor`](https://developer.apple.com/documentation/uikit/uicolor/ui_element_colors?language=objc). That can be used in React Native with `PlatformColor` like this:\\n\\n```jsx\\nimport {Text, PlatformColor} from \'react-native\';\\n\\n<Text style={{color: PlatformColor(\'labelColor\')}}>\\n  This is a label\\n</Text>;\\n```\\n\\n<p className=\\"snippet-caption\\">\\n  Sets the color of the Text component to labelColor as defined by\\n  iOS.\\n</p>\\n\\nAndroid, on the other hand, [provides colors like colorButtonNormal](https://developer.android.com/reference/android/R.attr#colorButtonNormal). You can use this color in React Native with:\\n\\n```jsx\\nimport {View, Text, PlatformColor} from \'react-native\';\\n\\n<View\\n  style={{\\n    backgroundColor: PlatformColor(\'?attr/colorButtonNormal\'),\\n  }}>\\n  <Text>This is colored like a button!</Text>\\n</View>;\\n```\\n\\n<p className=\\"snippet-caption\\">\\n  Sets the background color of the View component to\\n  colorButtonNormal as defined by Android.\\n</p>\\n\\nYou can learn more about `PlatformColor` from [the documentation](https://reactnative.dev/docs/platformcolor). You can also check the actual [code examples present in the RNTester](https://github.com/facebook/react-native/blob/master/packages/rn-tester/js/examples/PlatformColor/PlatformColorExample.js).\\n\\n`DynamicColorIOS` is an iOS only API that lets you define which color to use in light and dark mode. Similar to `PlatformColor`, this can be used anywhere you can use colors. `DynamicColorIOS` uses iOS\u2019s `colorWithDynamicProvider` under the hood.\\n\\n```jsx\\nimport {Text, DynamicColorIOS} from \'react-native\';\\n\\nconst customDynamicTextColor = DynamicColorIOS({\\n  dark: \'lightskyblue\',\\n  light: \'midnightblue\',\\n});\\n\\n<Text style={{color: customDynamicTextColor}}>\\n  This color changes automatically based on the system theme!\\n</Text>;\\n```\\n\\n<p className=\\"snippet-caption\\">\\n  Changes the text color based on the system theme\\n</p>\\n\\nYou can learn more about `DynamicColorIOS` from [the documentation](https://reactnative.dev/docs/dynamiccolorios).\\n\\n## Dropping iOS 9 and Node.js 8 support\\n\\nAfter over four years from its release, we are dropping support for iOS 9. This change will allow us to move faster by being able to reduce the number of compatibility checks that need to be placed in the native code to detect whether a given feature was supported on a certain iOS version. With its [market share of 1%](https://david-smith.org/iosversionstats/), it shouldn\u2019t have much negative impact on your customers.\\n\\nAt the same time, we are dropping support for Node 8. [Its LTS maintenance cycle expired in December 2019](https://nodejs.org/fr/blog/release/v8.9.0/). The current LTS is Node 10 and it is now the version that we are targeting. If you are still using Node 8 for the development of React Native applications, we encourage you to upgrade in order to receive all the latest security fixes and updates.\\n\\n## Other notable improvements\\n\\n- **Support rendering `<View />` in `<Text />` without explicit size**: You can now render any `<View />` inside any `<Text />` component without setting its width and height explicitly, which wasn\u2019t always possible. On previous releases of React Native, this would result in a RedBox.\\n- **Changed iOS LaunchScreen from `xib` to `storyboard`**: Starting April 30, 2020, all apps submitted to the App Store must use an Xcode storyboard to provide the app\u2019s launch screen and all iPhone apps must support all iPhone screens. This commit adjusts the default React Native template to be compatible with this requirement.\\n\\n## Thanks\\n\\nThank you to the hundreds of contributors that helped make 0.63 possible!\\n\\n\x3c!--alex ignore special white--\x3e\\n\\n> Special thanks to [Rick Hanlon](https://twitter.com/rickhanlonii) for authoring the section on `LogBox` and [Eli White](https://twitter.com/Eli_White) for authoring the `Pressable` part of this article.\\n\\nTo see all the updates, take a look at the [0.63 changelog](https://github.com/facebook/react-native/blob/main/CHANGELOG.md#v0630)."},{"id":"/2020/03/26/version-0.62","metadata":{"permalink":"/blog/2020/03/26/version-0.62","source":"@site/blog/2020-03-26-version-0.62.md","title":"Announcing React Native 0.62 with Flipper","description":"Today we\u2019re releasing React Native version 0.62 which includes support for Flipper by default.","date":"2020-03-26T00:00:00.000Z","formattedDate":"March 26, 2020","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"},{"label":"release","permalink":"/blog/tags/release"}],"readingTime":4.26,"hasTruncateMarker":false,"authors":[{"name":"Rick Hanlon","title":"React Native Core at Facebook","url":"https://twitter.com/rickhanlonii","imageURL":"https://avatars3.githubusercontent.com/u/2440089?s=460&v=4"}],"frontMatter":{"title":"Announcing React Native 0.62 with Flipper","author":"Rick Hanlon","authorTitle":"React Native Core at Facebook","authorURL":"https://twitter.com/rickhanlonii","authorImageURL":"https://avatars3.githubusercontent.com/u/2440089?s=460&v=4","authorTwitter":"rickhanlonii","tags":["announcement","release"]},"unlisted":false,"prevItem":{"title":"Announcing React Native 0.63 with LogBox","permalink":"/blog/2020/07/06/version-0.63"},"nextItem":{"title":"Meet Doctor, a new React Native command","permalink":"/blog/2019/11/18/react-native-doctor"}},"content":"Today we\u2019re releasing React Native version 0.62 which includes support for Flipper by default.\\n\\n\x3c!--alex ignore master--\x3e\\n\\nThis release comes in the midst of a global pandemic. We\u2019re releasing this version today to respect the work of hundreds of contributors who made this release possible and to prevent the release from falling too far behind master. Please be mindful of the reduced capacity of contributors to help with issues and prepare to delay upgrading if necessary.\\n\\n## Flipper by default\\n\\n[Flipper](https://fbflipper.com/) is a developer tool for debugging mobile apps. It\u2019s popular in the Android and iOS communities, and in this release we\u2019ve enabled support by default for new and existing React Native apps.\\n\\n![Screenshot of Flipper for React Native](/blog/assets/0.62-flipper.png)\\n\\nFlipper provides the following features out of the box:\\n\\n- **Metro Actions**: Reload the app and trigger the Dev Menu right from the toolbar.\\n- **Crash Reporter**: View crash reports from Android and iOS devices.\\n- **React DevTools**: Use the newest version of React DevTools right alongside all your other tools.\\n- **Network Inspector**: View all of the network requests made by device applications.\\n- **Metro and Device Logs**: View, search, and filter all logs from both Metro and the Device.\\n- **Native Layout Inspector**: View and edit the native layout output by the React Native renderer.\\n- **Database and Preference Inspectors**: View and edit the device databases and preferences.\\n\\nAdditionally, since Flipper is an extensible platform, it provides a marketplace that pulls plugins from NPM so you can publish and install custom plugins specific to your workflows. See the available plugins [here](https://www.npmjs.com/search?q=flipper-plugin).\\n\\nFor more information, check out the [Flipper documentation](https://fbflipper.com/docs/features/react-native).\\n\\n## New dark mode features\\n\\nWe\u2019ve added a new `Appearance` module to provide access to the user\'s appearance preferences, such as their preferred color scheme (light or dark).\\n\\n```js\\nconst colorScheme = Appearance.getColorScheme();\\nif (colorScheme === \'dark\') {\\n  // Use dark color scheme\\n}\\n```\\n\\nWe\u2019ve also added a hook to subscribe to state updates to the users preferences:\\n\\n```jsx\\nimport {Text, useColorScheme} from \'react-native\';\\n\\nconst MyComponent = () => {\\n  const colorScheme = useColorScheme();\\n  return <Text>useColorScheme(): {colorScheme}</Text>;\\n};\\n```\\n\\nSee the docs for [Appearance](/docs/appearance) and [useColorScheme](/docs/usecolorscheme) for more information.\\n\\n## Moving Apple TV to react-native-tvos\\n\\nAs part of our [Lean Core effort](/blog/#lean-core) and to bring Apple TV in line with other platforms like React Native Windows and React Native macOS, we\u2019ve started to remove Apple TV specific code from core.\\n\\nGoing forward, Apple TV support for React Native will be maintained in [react-native-community/react-native-tvos](https://github.com/react-native-community/react-native-tvos) along with the corresponding `react-native-tvos` NPM package. This is a full fork of the main repository, with only the changes needed to support Apple TV.\\n\\nReleases of `react-native-tvos` will be based on the public release of React Native. For this 0.62 release of `react-native` please upgrade Apple TV projects to use `react-native-tvos` 0.62.\\n\\n## More upgrade support\\n\\nWhen 0.61 was released, the community introduced a new [upgrade helper](https://react-native-community.github.io/upgrade-helper/) tool to support developers upgrading to new versions of React Native. The upgrade helper provides a diff of changes from the version you\'re on to the version you\'re targeting, allowing you to see the changes that need to be made for your specific upgrade.\\n\\nEven with this tool, issues come up when upgrading. Today we\'re introducing more dedicated upgrading support by announcing [Upgrade-Support](https://github.com/react-native-community/upgrade-support). Upgrade Support is a GitHub issue tracker where users can submit issues specific to upgrading their projects to receive help from the community.\\n\\nWe\'re always working to improve the upgrade experience, and we hope that these tools give users the support they need in the edge cases we haven\'t covered yet.\\n\\n## Other improvements\\n\\n- **LogBox**: We\u2019re adding the new LogBox error and warning experience as an opt-in; to enable it, add `require(\'react-native\').unstable_enableLogBox()` to your `index.js` file.\\n- **React DevTools v4**: This change includes an upgrade to the [latest React DevTools](https://reactjs.org/blog/2019/08/15/new-react-devtools.html) which offers significant performance gains, an improved navigation experience, and full support for React Hooks.\\n- **Accessibility improvements**: We\u2019ve made improvements to accessibility including adding [accessibilityValue](https://reactnative.dev/docs/accessibility#accessibilityvalue-ios-android), missing props on [Touchables](https://github.com/facebook/react-native/commit/8c0c860e38f57e18296f689e47dfb4a54088c260), `onSlidingComplete` [accessibility events](https://github.com/facebook/react-native/commit/c7aa6dc8270c0eabc913fe6c617c8131e3f4b3c5), and changing the default role of Switch component from `\\"button\\"` to `\\"switch\\"`.\\n\\n## Breaking changes\\n\\n- **Remove PropTypes**: We\'re removing `propTypes` from core components in order to reduce the app size impact of React Native core and to favor static type systems which check at compile time instead of runtime.\\n- **Remove accessibilityStates**: We\u2019ve [removed](https://github.com/facebook/react-native/commit/7b35f427fd66cb0f36921b992095fe5b3c14d8b9) the deprecated `accessibilityStates` property in favor of the new `accessibilityState` prop which is a more semantically rich way for components to describe information about their state to accessibility services.\\n- **TextInput changes**: We removed `onTextInput` [from TextInput](https://github.com/facebook/react-native/commit/3f7e0a2c9601fc186f25bfd794cd0008ac3983ab) as it\u2019s uncommon, not W3C compliant, and difficult to implement in [Fabric](https://github.com/react-native-community/discussions-and-proposals/issues/4). We also removed the undocumented `inputView` prop, and `selectionState`.\\n\\n## Deprecations\\n\\n- `AccessibilityInfo.fetch` was already deprecated, but in this release we [added a warning](https://github.com/facebook/react-native/commit/523ab8333800afbfb169c6fd70ab6611fe07cc2a).\\n- Setting `useNativeDriver` is [now required](https://github.com/facebook/react-native/commit/5876052615f4858ed5fc32fa3da9b64695974238) to support switching the default in the future.\\n- The `ref` of an `Animated` component is now the internal component and [deprecated](https://github.com/facebook/react-native/commit/66e72bb4e00aafbcb9f450ed5db261d98f99f82a) `getNode`.\\n\\n## Thanks\\n\\nThank you to the hundreds of contributors that helped make 0.62 possible!\\n\\nTo see all the updates, take a look at the [0.62 changelog](https://github.com/facebook/react-native/blob/main/CHANGELOG.md#v0620)."},{"id":"/2019/11/18/react-native-doctor","metadata":{"permalink":"/blog/2019/11/18/react-native-doctor","source":"@site/blog/2019-11-18-react-native-doctor.md","title":"Meet Doctor, a new React Native command","description":"After over 20 pull requests from 6 contributors in the React Native Community, we\'re excited to launch react-native doctor, a new command to help you out with getting started, troubleshooting and automatically fixing errors with your development environment. The doctor command is heavily inspired by Expo and Homebrew\'s own doctor command with a pinch of UI inspired by Jest.","date":"2019-11-18T00:00:00.000Z","formattedDate":"November 18, 2019","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":1.75,"hasTruncateMarker":true,"authors":[{"name":"Lucas Bento","title":"React Native Community","url":"https://twitter.com/lbentosilva","imageURL":"https://avatars3.githubusercontent.com/u/6207220?s=460&v=4"}],"frontMatter":{"title":"Meet Doctor, a new React Native command","author":"Lucas Bento","authorTitle":"React Native Community","authorURL":"https://twitter.com/lbentosilva","authorImageURL":"https://avatars3.githubusercontent.com/u/6207220?s=460&v=4","authorTwitter":"lbentosilva","tags":["announcement"]},"unlisted":false,"prevItem":{"title":"Announcing React Native 0.62 with Flipper","permalink":"/blog/2020/03/26/version-0.62"},"nextItem":{"title":"Announcing React Native 0.61 with Fast Refresh","permalink":"/blog/2019/09/18/version-0.61"}},"content":"After over 20 pull requests from 6 contributors in the React Native Community, we\'re excited to launch `react-native doctor`, a new command to help you out with getting started, troubleshooting and automatically fixing errors with your development environment. The `doctor` command is heavily inspired by [Expo](https://expo.io/) and [Homebrew](https://brew.sh/)\'s own doctor command with a pinch of UI inspired by [Jest](https://jestjs.io/).\\n\\n\x3c!--truncate--\x3e\\n\\nHere it is in action:\\n\\n<p style={{textAlign: \'center\'}}>\\n  <video width={700} controls=\\"controls\\" autoPlay style={{borderRadius: 5}}>\\n    <source type=\\"video/mp4\\" src=\\"/img/homepage/DoctorCommand.mp4\\" />\\n  </video>\\n</p>\\n\\n## How it works\\n\\nThe `doctor` command currently supports most of the software and libraries that React Native relies on, such as CocoaPods, Xcode and Android SDK. With `doctor` we\'ll find issues with your development environment and give you the option to automatically fix them. If `doctor` is not able to fix an issue, it will display a message and a helpful link explaining how to fix it manually as the following:\\n\\n<p style={{textAlign: \'center\'}}>\\n  <img width={700} src=\\"/img/DoctorManualInstallationMessage.png\\" alt=\\"Doctor command with a link to help on Android SDK\'s installation\\" title=\\"Doctor command with a link to help on Android SDK\'s installation\\" />\\n</p>\\n\\n## Try it now\\n\\nThe `doctor` command is available as a part of React Native 0.62. However, you can try it without upgrading yet:\\n\\n```sh\\nnpx @react-native-community/cli doctor\\n```\\n\\n## What checks are currently supported\\n\\n`doctor` currently supports the following checks:\\n\\n- Node.js (>= 8.3)\\n- yarn (>= 1.10)\\n- npm (>= 4)\\n- Watchman (>= 4), used for watching changes in the filesystem when in development mode.\\n\\nSpecific to the Android environment:\\n\\n- Android SDK (>= 26), the software runtime for Android.\\n- Android NDK (>= 19), the native development toolkit for Android.\\n- `ANDROID_HOME`, environment variable required by the Android SDK setup.\\n\\nAnd to the iOS environment:\\n\\n- Xcode (>= 10), IDE for developing, building and shipping iOS applications.\\n- CocoaPods, library dependency management tool for iOS applications.\\n- ios-deploy (optional), library used internally by the CLI to install applications on a physical iOS device.\\n\\n## Thanks\\n\\nHuge thanks for the React Native Community for working on this, in particular [@thymikee](https://github.com/thymikee), [@thib92](https://github.com/thib92), [@jmeistrich](https://github.com/jmeistrich), [@tido64](https://github.com/tido64) and [@rickhanlonii](https://github.com/rickhanlonii)."},{"id":"/2019/09/18/version-0.61","metadata":{"permalink":"/blog/2019/09/18/version-0.61","source":"@site/blog/2019-09-18-version-0.61.md","title":"Announcing React Native 0.61 with Fast Refresh","description":"We\u2019re excited to announce React Native 0.61, which includes a new reloading experience we\u2019re calling Fast Refresh.","date":"2019-09-18T00:00:00.000Z","formattedDate":"September 18, 2019","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"},{"label":"release","permalink":"/blog/tags/release"}],"readingTime":2.78,"hasTruncateMarker":false,"authors":[{"name":"Dan Abramov","title":"React Core at Facebook","url":"https://twitter.com/dan_abramov","imageURL":"https://avatars1.githubusercontent.com/u/810438?s=460&v=4"}],"frontMatter":{"title":"Announcing React Native 0.61 with Fast Refresh","author":"Dan Abramov","authorTitle":"React Core at Facebook","authorURL":"https://twitter.com/dan_abramov","authorImageURL":"https://avatars1.githubusercontent.com/u/810438?s=460&v=4","authorTwitter":"dan_abramov","tags":["announcement","release"]},"unlisted":false,"prevItem":{"title":"Meet Doctor, a new React Native command","permalink":"/blog/2019/11/18/react-native-doctor"},"nextItem":{"title":"Meet Hermes, a new JavaScript Engine optimized for React Native","permalink":"/blog/2019/07/17/hermes"}},"content":"We\u2019re excited to announce React Native 0.61, which includes a new reloading experience we\u2019re calling Fast Refresh.\\n\\n## Fast Refresh\\n\\nWhen we asked the React Native community about [common pain points](https://github.com/react-native-community/discussions-and-proposals/issues/64), one of the top answers was that the \u201chot reloading\u201d feature was broken. It didn\u2019t work reliably for function components, often failed to update the screen, and wasn\u2019t resilient to typos and mistakes. We heard that most people turned it off because it was too unreliable.\\n\\nIn React Native 0.61, **we\u2019re unifying the existing \u201clive reloading\u201d (reload on save) and \u201chot reloading\u201d features into a single new feature called \u201cFast Refresh\u201d**. Fast Refresh was implemented from scratch with the following principles:\\n\\n- Fast Refresh **fully supports modern React**, including function components and Hooks.\\n- Fast Refresh **gracefully recovers after typos** and other mistakes, and falls back to a full reload when needed.\\n- Fast Refresh **doesn\u2019t perform invasive code transformations** so it\u2019s reliable enough to be on by default.\\n\\nTo see Fast Refresh in action, check out this video:\\n\\n<p style={{textAlign: \'center\'}}>\\n  <video width={700} controls=\\"controls\\" autoPlay>\\n    <source type=\\"video/mp4\\" src=\\"https://reactnative.dev/img/homepage/ReactRefresh.mp4\\" />\\n  </video>\\n</p>\\n\\nGive it a try, and let us know what you think! If you prefer, you can turn it off in the Dev Menu (Cmd+D on iOS, Cmd+M or Ctrl+M on Android). Turning it on and off is instant so you can do it any time.\\n\\nHere are a few Fast Refresh tips:\\n\\n- Fast Refresh preserves React local state in function components (and Hooks!) by default.\\n- If you need to reset the React state on every edit, you can add a special `// @refresh reset` comment to the file with that component.\\n- Fast Refresh always remounts class components without preserving state. This ensures it works reliably.\\n- We all make mistakes in the code! Fast Refresh automatically retries rendering after you save a file. You don\'t need to reload the app manually after fixing a syntax or a runtime error.\\n- Adding a `console.log` or a `debugger` statement during edits is a neat debugging technique.\\n\\nPlease report any issues with Fast Refresh on GitHub, and we\u2019ll look into them.\\n\\n## Other Improvements\\n\\n- **Fixed use_frameworks! CocoaPods support.** In 0.60 we made some updates to integrate CocoaPods by default. Unfortunately, this broke builds using [use_frameworks!](https://guides.cocoapods.org/syntax/podfile.html#use_frameworks_bang). This is [fixed in 0.61](https://github.com/facebook/react-native/pull/25619), making it easier to integrate React Native into your iOS projects that require building with dynamic frameworks.\\n- **Add useWindowDimensions Hook.** This new Hook automatically provides and subscribes to dimension updates, and can be used instead of the Dimensions API in most cases.\\n- **React was upgraded to 16.9.** This version deprecates old names for the UNSAFE\\\\_ lifecycle methods, contains improvements to `act`, and more. See the [React 16.9 blog post](https://reactjs.org/blog/2019/08/08/react-v16.9.0.html) for an automated migration script and more information.\\n\\n## Breaking Changes\\n\\n- **Remove React .xcodeproj.** In 0.60, we introduced auto-linking support via CocoaPods. We have also integrated CocoaPods into the e2e tests runs, so that from now on, we have a unified standard way of integrating RN into iOS apps. This effectively deprecates the React .xcodeproj support, and the file has been removed starting 0.61. Note: if you use 0.60 auto-linking already, you shouldn\'t be affected.\\n\\n## Thanks\\n\\nThanks to all of the contributors that helped make 0.61 possible!\\n\\nTo see all the updates, take a look at the [0.61 changelog](https://github.com/facebook/react-native/blob/main/CHANGELOG.md#v0610)."},{"id":"/2019/07/17/hermes","metadata":{"permalink":"/blog/2019/07/17/hermes","source":"@site/blog/2019-07-17-hermes.md","title":"Meet Hermes, a new JavaScript Engine optimized for React Native","description":"Last week at Chain React we announced Hermes, an open source JavaScript engine we\u2019ve been working on at Facebook. It\u2019s a small and lightweight JavaScript engine optimized for running React Native on Android. Check it out!","date":"2019-07-17T00:00:00.000Z","formattedDate":"July 17, 2019","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":1.125,"hasTruncateMarker":false,"authors":[{"name":"Rachel Nabors","title":"Documentation Engineer at Facebook","url":"https://twitter.com/rachelnabors","imageURL":"https://avatars0.githubusercontent.com/u/236306?s=460&v=4"}],"frontMatter":{"title":"Meet Hermes, a new JavaScript Engine optimized for React Native","author":"Rachel Nabors","authorTitle":"Documentation Engineer at Facebook","authorURL":"https://twitter.com/rachelnabors","authorImageURL":"https://avatars0.githubusercontent.com/u/236306?s=460&v=4","authorTwitter":"rachelnabors","tags":["announcement"]},"unlisted":false,"prevItem":{"title":"Announcing React Native 0.61 with Fast Refresh","permalink":"/blog/2019/09/18/version-0.61"},"nextItem":{"title":"Announcing React Native 0.60","permalink":"/blog/2019/07/03/version-60"}},"content":"Last week at Chain React we announced Hermes, an open source JavaScript engine we\u2019ve been working on at Facebook. It\u2019s a small and lightweight JavaScript engine optimized for running React Native on Android. [Check it out!](https://code.fb.com/android/hermes/)\\n\\nHermes improves React Native performance by decreasing memory utilization, reducing download size, and decreasing the time it takes for the app to become usable or \u201ctime to interactive\u201d (TTI).\\n\\n> \u201cAs we analyzed performance data, we noticed that the JavaScript engine itself was a significant factor in startup performance and download size. With this data in hand, we knew we had to optimize JavaScript performance in the more constrained environments of a mobile phone compared with a desktop or laptop. After exploring other options, we built a new JavaScript engine we call Hermes. It is designed to improve app performance, focusing on our React Native apps, even on mass-market devices with limited memory, slow storage, and reduced computing power.\u201d \u2014[Hermes: An open source JavaScript engine optimized for mobile apps, starting with React Native](https://code.fb.com/android/hermes/)\\n\\nWant to get started right away? Be sure to [check out our new guide to enabling Hermes in your existing React Native app](/docs/hermes/) in the docs!\\n\\n[![Illustration of the Hermes and React Native logos joined into a winged fury, rising in a crashing electrical storm from a lone, glowing, presumably Android phone.](/blog/assets/2019_hermes-launch-illo-rachel-nabors.jpg)](https://code.fb.com/android/hermes/) _Illustration by Rachel Nabors_"},{"id":"/2019/07/03/version-60","metadata":{"permalink":"/blog/2019/07/03/version-60","source":"@site/blog/2019-07-03-version-60.md","title":"Announcing React Native 0.60","description":"After months of hard work from hundreds of contributors, the React Native Core team is proud to announce the release of version 0.60. This release handles significant migrations for both Android and iOS platforms, and many issues are resolved too. This blog post covers the highlights of the release. As always though, refer to the changelog for more detailed information. Finally, thank you contributors for helping us to make this milestone!","date":"2019-07-03T00:00:00.000Z","formattedDate":"July 3, 2019","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"},{"label":"release","permalink":"/blog/tags/release"}],"readingTime":4.03,"hasTruncateMarker":false,"authors":[{"name":"Ryan Turner","title":"Core Maintainer & React Native Developer","url":"https://twitter.com/turnrye","imageURL":"https://avatars0.githubusercontent.com/u/701035?s=460&v=4"}],"frontMatter":{"title":"Announcing React Native 0.60","author":"Ryan Turner","authorTitle":"Core Maintainer & React Native Developer","authorURL":"https://twitter.com/turnrye","authorImageURL":"https://avatars0.githubusercontent.com/u/701035?s=460&v=4","authorTwitter":"turnrye","tags":["announcement","release"]},"unlisted":false,"prevItem":{"title":"Meet Hermes, a new JavaScript Engine optimized for React Native","permalink":"/blog/2019/07/17/hermes"},"nextItem":{"title":"React Native Open Source Update June 2019","permalink":"/blog/2019/06/12/react-native-open-source-update"}},"content":"After months of hard work from hundreds of contributors, the React Native Core team is proud to announce the release of version 0.60. This release handles significant migrations for both Android and iOS platforms, and many issues are resolved too. This blog post covers the highlights of the release. As always though, refer to the changelog for more detailed information. Finally, thank you contributors for helping us to make this milestone!\\n\\n## Focus on Accessibility\\n\\nThere have been many improvements to the accessibility APIs, like [announceForAccessibility](https://github.com/facebook/react-native/commit/cfe0032), plus improvements to [roles](https://github.com/facebook/react-native/commit/1aeac1c), [action support](https://github.com/facebook/react-native/commit/14b4668), [flags](https://github.com/facebook/react-native/commit/0090ab3), and more. Accessibility is a complex science, but we hope these improvements make it a bit easier to be an A11Y. Be sure to check [React Native Open Source Update June 2019](/blog/2019/06/12/react-native-open-source-update#meaningful-community-contributions) for more details of these changes.\\n\\n## A Fresh Start\\n\\nReact Native\'s start screen has been updated! Thank you to the many contributors who helped create the new UI. This new \\"Hello World\\" will welcome users to the ecosystem in a more friendly, engaging way.\\n\\n![The new init screen helps developers get started from the get-go with resources and a good example](/blog/assets/0.60-new-init-screen.png)\\n\\n## AndroidX Support\\n\\n[AndroidX](https://developer.android.com/jetpack/androidx) is a major step forward in the Android ecosystem, and the old support library artifacts are being deprecated. For 0.60, React Native has been migrated over to AndroidX. This is a breaking change, and **your native code and dependencies will need to be migrated** as well.\\n\\n> With this change, React Native apps will need to begin using AndroidX themselves. They cannot be used side-by-side in one app, so all of the app code and dependency code needs to be using one or the other.\\n>\\n> [matt-oakes](https://github.com/matt-oakes) on [discussions-and-proposals](https://github.com/react-native-community/discussions-and-proposals/issues/129)\\n\\nWhile your own native code will need to be migrated by you, [@mikehardy](https://github.com/mikehardy), [@cawfree](https://github.com/cawfree), and [@m4tt72](https://github.com/m4tt72) built a [clever tool named \\"jetifier\\"](https://github.com/mikehardy/jetifier) to patch your `node_modules`. Library maintainers will need to upgrade, but this tool provide you with a temporary solution while giving them time to release an AndroidX version. So if you find errors related to AndroidX migration, give this a shot.\\n\\n## CocoaPods by Default\\n\\n[CocoaPods are now part of React Native\'s iOS project](https://github.com/react-native-community/discussions-and-proposals/blob/master/proposals/0004-cocoapods-support-improvements.md). If you weren\'t already, be sure to open iOS platform code using the `xcworkspace` file from now on (protip: try `xed ios` from the root project directory). Also, the `podspec`s for the internal packages have changed to make them compatible with the Xcode projects, which will help with troubleshooting and debugging. Expect to make [some straightforward changes](https://github.com/facebook/react-native/commit/2321b3f) to your `Podfile` as part of the upgrade to 0.60 to bring this exciting support. Note that we are aware of a compatibility issue with `use_frameworks!`, and we\'re tracking an [issue](https://github.com/facebook/react-native/issues/25349) with workarounds and a future patch.\\n\\n## Lean Core Removals\\n\\n**WebView** and **NetInfo** were previously extracted into separate repositories, and in 0.60 we\u2019ve finished migrating them out of the React Native repository. Additionally, in response to community feedback about new App Store policy, **Geolocation** has been extracted. If you haven\u2019t already, complete your migration by adding dependencies to [react-native-webview](https://github.com/react-native-community/react-native-webview), [@react-native-community/netinfo](https://github.com/react-native-community/react-native-netinfo), and [@react-native-community/geolocation](https://github.com/react-native-community/react-native-geolocation). If you\'d like an automated solution, consider using [rn-upgrade-deprecated-modules](https://github.com/lucasbento/rn-update-deprecated-modules). Maintainers have made more than 100 commits to these repositories since extraction and we\u2019re excited to see the community\u2019s support!\\n\\n## Native Modules are now Autolinked\\n\\nThe team working on the [React Native CLI](https://github.com/react-native-community/cli) has introduced major improvements to native module linking called [autolinking](https://github.com/react-native-community/cli/blob/master/docs/autolinking.md)! Most scenarios will not require the use of `react-native link` anymore. At the same time, the team overhauled the linking process in general. Be sure to `react-native unlink` any preexisting dependencies as mentioned in the docs above.\\n\\n## Upgrade Helper\\n\\n[@lucasbento](https://github.com/lucasbento), [@pvinis](https://github.com/pvinis), [@kelset](https://github.com/kelset), and [@watadarkstar](https://github.com/watadarkstar) have built a great tool called [Upgrade Helper](https://react-native-community.github.io/upgrade-helper/) to make the upgrade process simpler. It helps React Native users with brownfield apps or complex customizations to see what\'s changed between versions. Take a look at the [updated upgrading docs](/docs/upgrading) and try it out today for your upgrade path!\\n\\n![Upgrade Helper cleanly and easily shows the changes needed to migrate to a different version of React Native](/blog/assets/0.60-upgrade-helper.png)\\n\\n## A Note to Library Maintainers\\n\\nChanges for AndroidX will almost certainly require updates to your library, so be sure to include support soon. If you\'re not able to upgrade yet, consider checking your library against the jetifier to confirm that users are able to patch your library at build time.\\n\\nReview the [autolinking](https://github.com/react-native-community/cli/blob/master/docs/autolinking.md) docs to update your configs and readme. Depending on how your library was previously integrated, you may also need to make some additional changes. Check the [dependencies](https://github.com/react-native-community/cli/blob/master/docs/dependencies.md) guide from the CLI for information on how to define your dependency interface.\\n\\n## Thanks\\n\\nWhile these are the highlights that we noted, there are many others to be excited about. To see all the updates, take a look at the [changelog](https://github.com/react-native-community/react-native-releases/blob/master/CHANGELOG.md). As always, stay tuned for more news. Enjoy 0.60 in the meantime!"},{"id":"/2019/06/12/react-native-open-source-update","metadata":{"permalink":"/blog/2019/06/12/react-native-open-source-update","source":"@site/blog/2019-06-12-react-native-open-source-update.md","title":"React Native Open Source Update June 2019","description":"Code & Community Health","date":"2019-06-12T00:00:00.000Z","formattedDate":"June 12, 2019","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":7.16,"hasTruncateMarker":false,"authors":[{"name":"Christoph Nakazawa","title":"Engineer at Facebook","url":"https://twitter.com/cpojer","imageURL":"https://avatars2.githubusercontent.com/u/13352?s=460&v=4"}],"frontMatter":{"title":"React Native Open Source Update June 2019","author":"Christoph Nakazawa","authorTitle":"Engineer at Facebook","authorURL":"https://twitter.com/cpojer","authorImageURL":"https://avatars2.githubusercontent.com/u/13352?s=460&v=4","authorTwitter":"cpojer","tags":["announcement"]},"unlisted":false,"prevItem":{"title":"Announcing React Native 0.60","permalink":"/blog/2019/07/03/version-60"},"nextItem":{"title":"React Native at F8 and Open Source Podcast","permalink":"/blog/2019/05/01/react-native-at-f8-and-podcast"}},"content":"## Code & Community Health\\n\\nIn the past six months, a total of 2800 commits were made to React Native by more than 550 contributors. 400 contributors from the community created more than [1,150 Pull Requests](https://github.com/facebook/react-native/pulls?page=24&q=is%3Apr+closed%3A%3E2018-12-01&utf8=%E2%9C%93), of which [820 Pull Requests](https://github.com/facebook/react-native/pulls?utf8=%E2%9C%93&q=is%3Apr+closed%3A%3E2018-12-01+label%3A%22Merged%22+) were merged.\\n\\nThe average number of Pull Requests per day throughout the past six months has increased from three to about six, even though we split the website, CLI and many modules out of React Native via the Lean Core effort. The average amount of open pull requests is now below 25 and we usually reply with suggestions and reviews within hours or days.\\n\\n### Meaningful Community Contributions\\n\\nWe\u2019d like to highlight a number of recent contributions which we thought were awesome:\\n\\n- **Accessibility:** React Native 0.60 will ship with many improvements to accessibility APIs both on Android and iOS. All of the new features are directly using APIs provided by the underlying platform so they\u2019ll integrate with native assistance technologies both on Android and iOS. We\u2019d like to thank [Marc Mulcahy](https://github.com/marcmulcahy), [Alan Kenyon](https://github.com/facebook/react-native/pull/24746), [Estev\xe3o Lucas](https://github.com/elucaswork), [Sam Mathias Weggersen](https://github.com/sweggersen) and [Janic Duplessis](https://twitter.com/janicduplessis) for their contributions:\\n  - [Additional Accessibility Roles + States](https://github.com/facebook/react-native/pull/24095) and a [new Accessibility States API](https://github.com/facebook/react-native/pull/24608). Added a number of missing accessibility roles for various components and a new API for better web support in the future.\\n  - [AccessibilityInfo.announceForAccessibility](https://github.com/facebook/react-native/pull/24746). Added support for Android, previously iOS-only.\\n  - [Extended Accessibility Actions Support](https://github.com/facebook/react-native/pull/24695). Added callbacks to deal with accessibility around user-defined actions.\\n  - [Support for iOS Accessibility flags](https://github.com/facebook/react-native/pull/23913) and [support for \\"reduce motion\\"](https://github.com/facebook/react-native/pull/23839).\\n  - [Android keyboard accessibility improvements](https://github.com/facebook/react-native/pull/24359). Added a `clickable` prop and an `onClick` callback for invoking actions via keyboard navigation _(note: this will soon be renamed to `focusable`)._\\n  - [Use CALayers to draw text](https://github.com/facebook/react-native/pull/24387). Fixed an issue that made scaled-up text disappear on iOS.\\n- **New App Screen:** The community came up with a [design for the new app screen](https://github.com/react-native-community/discussions-and-proposals/issues/122) that is implemented in 0.60. This screen is what most people see when they are first using React Native. It now links first time users to the documentation and the look fits with our upcoming website redesign \ud83c\udf1f. Huge thanks to [Orta](https://twitter.com/orta), [Adam Shurson](https://www.linkedin.com/in/ashurson/), [Glauber Castro](https://github.com/glauberfc), [Karan Singh](https://github.com/karanpratapsingh), [Eli Perkins](https://twitter.com/_eliperkins), [Lucas Bento](https://twitter.com/lbentosilva) and [Eric Lewis](https://twitter.com/ericlewis) for all their work and collaboration!\\n  - Check out the new app screen on the \u201c_[React Native Show](https://www.youtube.com/watch?v=ImlAqMZxveg)_\u201c video series.\\n- **TurboModule Types:** The new [TurboModules system](https://github.com/react-native-community/discussions-and-proposals/issues/40) requires [types for all native modules](https://github.com/facebook/react-native/issues/24875) to guarantee type safe operations in native. In just over two weeks, the community sent ~40 Pull Requests to complete this work for flow typed native modules. Aside from the people already mentioned above, we\u2019d like to thank [Micha\u0142 Chudziak](https://twitter.com/michalchudziak), [Micha\u0142 Pierzcha\u0142a](https://twitter.com/thymikee), [Wojtek Szafraniec](https://github.com/wojteg1337), and [Jean Regisser](https://github.com/jeanregisser) and everyone else who sent one or more Pull Requests.\\n- **Haste:** Since 2015 React Native used the [\u201chaste\u201d module system](https://github.com/reactjs/reactjs.org/commit/0629e3e2289ed54fac854472aec9a5f6c8318c98#diff-c42b758729cb89976b3a8fd51d1227fa) that allows importing modules just via a global id instead of a relative path which is convenient but not well supported by many tools. [James Ide](https://twitter.com/JI) proposed removing haste, similar to how React removed haste many years ago. He planned all the work through an [umbrella task](https://github.com/facebook/react-native/issues/24316) and he sent 18 Pull Requests to make it happen! Check out [his Twitter thread](https://twitter.com/JI/status/1136369775083319296) to learn more.\\n- **Android Fragments:** [John Shelley](https://github.com/jpshelley)\u2018s proposal to make React Native work via [Android Fragments](https://github.com/facebook/react-native/pull/12199) was merged and will be available in 0.61. [Read more about Android Fragments here](https://developer.android.com/guide/components/fragments).\\n\\n### Lean Core\\n\\nThe primary motivation of [Lean Core](https://github.com/react-native-community/discussions-and-proposals/issues/6) has been to split modules out of React Native into separate repositories so they can receive better maintenance. In just a six months repositories like [WebView](https://github.com/react-native-community/react-native-webview), [NetInfo](https://github.com/react-native-community/react-native-netinfo), [AsyncStorage](https://github.com/react-native-community/react-native-async-storage), the [website](https://github.com/facebook/react-native-website) and the [CLI](https://github.com/react-native-community/cli) received more than 800 Pull Requests combined. Besides better maintenance, these projects can also be independently released more often than React Native itself.\\n\\nWe have also taken the opportunity to remove obsolete polyfills and legacy components from React Native itself. Polyfills were necessary in the past to support language features like [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) and [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) in older versions of JavaScriptCore (JSC). Now that React Native ships with a new version, these polyfills were removed.\\n\\nThis work is still in progress and many more things still need to be split out or removed both on the native and JavaScript side but there are early signs that we managed to reverse the trend of increasing the surface area and app size: When looking at the JavaScript bundle for example, about a year ago in version 0.54 the React Native JavaScript bundle size was 530kb and grew to 607kb (+77kb) by version 0.57 in just 6 months. Now we are seeing a bundle size reduction of 28kb down to 579kb on master, a delta of more than 100kb!\\n\\nAs we conclude the first iteration of the Lean Core effort, we will make an effort to be more intentional about new APIs added to React Native and we will continuously evaluate ways to make React Native smaller and faster, as well as finding ways to empower the community to take ownership of various components.\\n\\n## User Feedback\\n\\nSix months ago we asked the community \u201c[What do you dislike about React Native?](https://github.com/react-native-community/discussions-and-proposals/issues/64)\u201d which gave a good overview of problems people are facing. We [replied to the post a few months ago](https://github.com/react-native-community/discussions-and-proposals/issues/104) and it\'s time to summarize the progress that was made on top issues:\\n\\n- **Upgrading:** The React Native community rallied around with multiple improvements to the upgrading experience: [autolinking](https://github.com/react-native-community/cli/blob/master/docs/autolinking.md), a better upgrading command via [rn-diff-purge](https://github.com/react-native-community/rn-diff-purge), an upgrade helper website (coming soon). We\u2019ll also make sure to communicate breaking changes and exciting new features by publishing blog posts for each major release. Many of these improvements will make future upgrades beyond the 0.60 release significantly easier.\\n- **Support / Uncertainty:** Many people were frustrated with the lack of activity on Pull Requests and general uncertainty about Facebook\'s investment in React Native. As we\'ve shown above, we can confidently say that we are ready for many more Pull Requests and we are eagerly looking forward to your proposals and contributions!\\n- **Performance:** React Native 0.59 shipped with a new and much faster version of JavaScriptCore (JSC). Separately, we have been working on making it easier to enable [inline-requires](/docs/performance#ram-bundles-inline-requires) by default and we have more exciting updates for you in the next couple of months.\\n- **Documentation:** We recently started an effort to [overhaul and rewrite all of React Native\'s documentation](https://github.com/facebook/react-native-website/issues/929). If you are looking to contribute, we\u2019d love to get your help!\\n- **Warnings in Xcode:** We [got rid of all the existing warnings](https://github.com/facebook/react-native/issues/22609) and are making an effort not to introduce new warnings.\\n- **Hot Reloading:** The React team is building a [new hot reloading system](https://twitter.com/dan_abramov/status/1126948870137753605) that will soon be integrated into React Native.\\n\\nUnfortunately we weren\u2019t able to improve everything just yet:\\n\\n- **Debugging:** We fixed many inconvenient bugs and issues people that we have been running into every day, but unfortunately we haven\'t made as much progress on this as we would like. We recognize that debugging with React Native isn\'t great and we\'ll prioritize improving this in the future.\\n- **Metro symlinks:** Unfortunately we haven\'t been able to implement a simple and straightforward solution for this yet. However, React Native users [shared various workarounds](https://github.com/facebook/metro/issues/1) that may work for you.\\n\\nGiven the large amount of changes in the past six months, we\'d like to ask you the same question again. If you are using the latest version of React Native and you have things you\'d like to give feedback on, please comment on our new edition of [\u201cWhat do you dislike about React Native?\u201d](https://github.com/react-native-community/discussions-and-proposals/issues/134)\\n\\n## Continuous Integration\\n\\nFacebook merges all Pull Requests and internal changes directly into Facebook\u2019s repository first and then syncs all commits back to GitHub. Facebook\u2019s infrastructure is different from common continuous integration services and not all open source tests were run inside of Facebook. This means that commits that sync out to GitHub frequently break tests in open source which take a lot of time to fix.\\n\\n[H\xe9ctor Ramos](https://twitter.com/hectorramos) from the React Native team spent the past two months improving React Native\'s continuous integration systems both at Facebook and on GitHub. Most of the open source tests are now run before changes are committed to React Native at Facebook which will keep CI stable on GitHub when commits are being synchronized.\\n\\n## Next\\n\\nMake sure to check out our talks about the future of React Native! In the next couple of months, members of the React Native team at Facebook will speak at [Chain React](https://infinite.red/ChainReactConf) and at [React Native EU](https://react-native.eu/). Also, watch out for our next release, 0.60, which is right around the corner. _It\'s going to be exciting_ \u2728"},{"id":"/2019/05/01/react-native-at-f8-and-podcast","metadata":{"permalink":"/blog/2019/05/01/react-native-at-f8-and-podcast","source":"@site/blog/2019-05-01-react-native-at-f8-and-podcast.md","title":"React Native at F8 and Open Source Podcast","description":"This week, Eli White gave a talk at F8 2019 about React Native in Facebook\'s Android and iOS applications. We are excited to share what we\'ve been up to for the past two years and what we\'re doing next.","date":"2019-05-01T00:00:00.000Z","formattedDate":"May 1, 2019","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":2.075,"hasTruncateMarker":false,"authors":[{"name":"Christoph Nakazawa","title":"Engineer at Facebook","url":"https://twitter.com/cpojer","imageURL":"https://avatars2.githubusercontent.com/u/13352?s=460&v=4"}],"frontMatter":{"title":"React Native at F8 and Open Source Podcast","author":"Christoph Nakazawa","authorTitle":"Engineer at Facebook","authorURL":"https://twitter.com/cpojer","authorImageURL":"https://avatars2.githubusercontent.com/u/13352?s=460&v=4","authorTwitter":"cpojer","tags":["announcement"]},"unlisted":false,"prevItem":{"title":"React Native Open Source Update June 2019","permalink":"/blog/2019/06/12/react-native-open-source-update"},"nextItem":{"title":"Releasing React Native 0.59","permalink":"/blog/2019/03/12/releasing-react-native-059"}},"content":"This week, [Eli White](https://twitter.com/Eli_White) gave a talk at [F8 2019](https://developers.facebook.com/videos/2019/mobile-innovation-with-react-native-componentkit-and-litho/) about React Native in Facebook\'s Android and iOS applications. We are excited to share what we\'ve been up to for the past two years and what we\'re doing next.\\n\\nCheck out the video on [Facebook\'s developer website](https://developers.facebook.com/videos/2019/mobile-innovation-with-react-native-componentkit-and-litho/):\\n\\n<a href=\\"https://developers.facebook.com/videos/2019/mobile-innovation-with-react-native-componentkit-and-litho/\\">\\n  <img\\n    src=\\"/blog/assets/eli-at-f8.png\\"\\n    alt=\\"F8 Talk about React Native\\"\\n  />\\n</a>\\n\\n#### Highlights from the talk:\\n\\n- We spent 2017 and 2018 focused on React Native\'s largest product, Facebook\'s Marketplace. We collaborated with the Marketplace team to improve quality and add delight to the product. At this point, Marketplace is one of the highest quality products in the Facebook app both on Android and iOS.\\n- Marketplace\'s performance was a big challenge as well, especially on mid-end Android devices. We cut startup time by more than 50% over the last year with more improvements on the way! The biggest improvements are being built into React Native and will be coming to the community later this year.\\n- We have the confidence that we can build the high quality and performant apps that Facebook needs with React Native. This confidence has let us invest in bigger bets, like [rethinking the core of React Native](https://www.youtube.com/watch?v=UcqRXTriUVI&app=desktop).\\n- Microsoft supports and uses React Native for Windows, enabling people to use their expertise and codebase to render to Microsofts\'s Universal Windows Platform. Check out Microsoft Build next week to [hear them talk about that more](https://mybuild.techcommunity.microsoft.com/sessions/77321).\\n\\n### React Radio Podcast about Open Source\\n\\nEli\'s talk concludes by talking about our recent open source work. We gave [an update on our progress in March](/blog/2019/03/01/react-native-open-source-update) and recently [Nader Dabit](https://twitter.com/dabit3) and [Gant Laborde](https://twitter.com/GantLaborde) invited Christoph for a chat on their podcast, [React Native Radio](https://devchat.tv/react-native-radio/react-native-open-source-the-react-native-community-feat-christoph-nakazawa/), to chat about React Native in open source.\\n\\n#### Highlights from the podcast:\\n\\n- We talked about how the React Native team at Facebook thinks about open source and how we are building a sustainable community that scales for a project of React Native\'s [size](https://octoverse.github.com/projects#repositories).\\n- We are on track to remove multiple modules as part of the [Lean Core](https://github.com/facebook/react-native/issues/23313) effort. Many modules like WebView and the React Native CLI have received more than 100 Pull Requests since they were extracted.\\n- Next, we\'ll be focusing on overhauling the React Native website and documentation. Stay tuned!\\n\\nYou\'ll find the episode in your favorite podcasting app soon or you can listen to the recording right here:\\n\\n<audio controls style={{display: \'block\', margin: \'0 auto\'}} src=\\"https://media.devchat.tv/reactnativeradio/React_Native_Radio_Episode_121.mp3\\"> {\' \'} Audio is unsupported in this browser.{\' \'} </audio>"},{"id":"/2019/03/12/releasing-react-native-059","metadata":{"permalink":"/blog/2019/03/12/releasing-react-native-059","source":"@site/blog/2019-03-12-releasing-react-native-059.md","title":"Releasing React Native 0.59","description":"Welcome to the 0.59 release of React Native! This is another big release with 644 commits by 88 contributors. Contributions also come in other forms, so thank you for maintaining issues, fostering communities, and teaching people about React Native. This month brings a number of highly anticipated changes, and we hope you enjoy them.","date":"2019-03-12T00:00:00.000Z","formattedDate":"March 12, 2019","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"},{"label":"release","permalink":"/blog/tags/release"}],"readingTime":5.115,"hasTruncateMarker":false,"authors":[{"name":"Ryan Turner","title":"Core Maintainer & React Native Developer","url":"https://twitter.com/turnrye","imageURL":"https://avatars0.githubusercontent.com/u/701035?s=460&v=4"}],"frontMatter":{"title":"Releasing React Native 0.59","author":"Ryan Turner","authorTitle":"Core Maintainer & React Native Developer","authorURL":"https://twitter.com/turnrye","authorImageURL":"https://avatars0.githubusercontent.com/u/701035?s=460&v=4","authorTwitter":"turnrye","tags":["announcement","release"]},"unlisted":false,"prevItem":{"title":"React Native at F8 and Open Source Podcast","permalink":"/blog/2019/05/01/react-native-at-f8-and-podcast"},"nextItem":{"title":"React Native Open Source Update March 2019","permalink":"/blog/2019/03/01/react-native-open-source-update"}},"content":"Welcome to the 0.59 release of React Native! This is another big release with 644 commits by 88 contributors. Contributions also come in other forms, so _thank you_ for maintaining issues, fostering communities, and teaching people about React Native. This month brings a number of highly anticipated changes, and we hope you enjoy them.\\n\\n## \ud83c\udfa3 Hooks are here\\n\\nReact Hooks are part of this release, which let you reuse stateful logic across components. There is a lot of buzz about hooks, but if you haven\'t heard, take a look at some of the wonderful resources below:\\n\\n> - [Introducing Hooks](https://reactjs.org/docs/hooks-intro.html) explains why we\u2019re adding Hooks to React.\\n> - [Hooks at a Glance](https://reactjs.org/docs/hooks-overview.html) is a fast-paced overview of the built-in Hooks.\\n> - [Building Your Own Hooks](https://reactjs.org/docs/hooks-custom.html) demonstrates code reuse with custom Hooks.\\n> - [Making Sense of React Hooks](https://medium.com/@dan_abramov/making-sense-of-react-hooks-fdbde8803889) explores the new possibilities unlocked by Hooks.\\n> - [useHooks.com](https://usehooks.com/) showcases community-maintained Hooks recipes and demos.\\n\\nBe sure to give this a try in your apps. We hope that you find the reuse as exciting as we do.\\n\\n## \ud83d\udcf1 Updated JSC means performance gains and 64-bit support on Android\\n\\nReact Native uses JSC ([JavaScriptCore](https://webkit.org/)) to power your application. JSC on Android was a few years old, which meant that a lot of modern JavaScript features weren\'t supported. Even worse, it performed poorly compared iOS\'s modern JSC. With this release, that all changes.\\n\\nThanks to some awesome work by [@DanielZlotin](https://github.com/danielzlotin), [@dulmandakh](https://github.com/dulmandakh), [@gengjiawen](https://github.com/gengjiawen), [@kmagiera](https://github.com/kmagiera), and [@kudo](https://github.com/kudo) JSC has caught up with the past few years. This brings with it 64-bit support, modern JavaScript support, and [big performance improvements](https://github.com/react-native-community/jsc-android-buildscripts/tree/master/measure). Kudos for also making this a maintainable process now so that we can take advantage of future WebKit improvements without so much legwork, and thank you Software Mansion and Expo for making this work possible.\\n\\n## \ud83d\udca8 Faster app launches with inline requires\\n\\nWe want to help people have performant React Native apps by default and are working to bring Facebook\'s optimizations to the community. Applications load resources as needed rather than slowing down launch. This feature is called \\"inline requires\\", as it lets Metro identify components to be lazy loaded. Apps with a deep and varied component architecture will see the most improvement.\\n\\n![source of the `metro.config.js` file in the 0.59 template, demonstrating where to enable `inlineRequires`](/blog/assets/inline-requires.png)\\n\\nWe need the community to let us know how it works before we turn it on by default. When you upgrade to 0.59, there will be a new `metro.config.js` file; flip the options to true and give us [your feedback](https://twitter.com/hashtag/inline-requires)! Read more about inline requires [in the performance docs](/docs/performance#inline-requires) to benchmark your app.\\n\\n## \ud83d\ude85 Lean core is underway\\n\\nReact Native is a large and complex project with a complicated repository. This makes the codebase less approachable to contributors, difficult to test, and bloated as a dev dependency. [Lean Core](https://github.com/react-native-community/discussions-and-proposals/issues/6) is our effort to address these issues by migrating code to separate libraries for better management. The past few releases have seen the first steps of this, but [let\'s get serious](https://www.youtube.com/watch?v=FMLKb4or8yg).\\n\\nYou may notice that additional components are now officially deprecated. This is great news, as there are now owners for these features actively maintaining them. Heed the warning messages and migrate to the new libraries for these features, because they will be removed in a future release. Below is a table indicating the component, its status, and where you may migrate your use to.\\n\\n| Component            | Deprecated? | New home                                                                                                                                                 |\\n| -------------------- | ----------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- |\\n| **AsyncStorage**     | 0.59        | [@react-native-community/react-native-async-storage](https://github.com/react-native-community/react-native-async-storage)                               |\\n| **ImageStore**       | 0.59        | [expo-file-system](https://github.com/expo/expo/tree/master/packages/expo-file-system) or [react-native-fs](https://github.com/itinance/react-native-fs) |\\n| **MaskedViewIOS**    | 0.59        | [@react-native-community/react-native-masked-view](https://github.com/react-native-community/react-native-masked-view)                                   |\\n| **NetInfo**          | 0.59        | [@react-native-community/react-native-netinfo](https://github.com/react-native-community/react-native-netinfo)                                           |\\n| **Slider**           | 0.59        | [@react-native-community/react-native-slider](https://github.com/react-native-community/react-native-slider)                                             |\\n| **ViewPagerAndroid** | 0.59        | [@react-native-community/react-native-viewpager](https://github.com/react-native-community/react-native-viewpager)                                       |\\n\\nOver the coming months, there will be many more components following this path to a leaner core. We\'re looking for help with this &mdash; head over to the [lean core umbrella](https://github.com/facebook/react-native/issues/23313) to pitch in.\\n\\n## \ud83d\udc69\ud83c\udffd\u200d\ud83d\udcbb CLI improvements\\n\\nReact Native\'s command line tools are developer\'s entry point to the ecosystem, but they had long-standing issues and lacked official support. The CLI tools have been moved to a [new repository](https://github.com/react-native-community/react-native-cli), and a [dedicated group of maintainers](https://blog.callstack.io/the-react-native-cli-has-a-new-home-79b63838f0e6) have already made some exciting improvements.\\n\\nLogs are formatted much better now. Commands now run nearly instantly &mdash; you\'ll immediately notice a difference:\\n\\n![0.58\'s CLI is slow to start](/blog/assets/0.58-cli-speed.png)![0.58\'s CLI is nearly instantaneous](/blog/assets/0.59-cli-speed.png)\\n\\n## \ud83d\ude80 Upgrading to 0.59\\n\\nWe heard your feedback regarding the [React Native upgrade process](https://github.com/react-native-community/discussions-and-proposals/issues/68) and we are taking steps to improve the experience in [future releases](https://github.com/react-native-community/discussions-and-proposals/issues/64#issuecomment-444775432). To upgrade to 0.59, we recommend using [`rn-diff-purge`](https://github.com/react-native-community/rn-diff-purge) to determine what has changed between your current React Native version and 0.59, then applying those changes manually. Once you\'ve upgraded your project to 0.59, you will be able to use the newly improved `react-native upgrade` command (based on `rn-diff-purge`!) to upgrade to 0.60 and beyond as newer releases become available.\\n\\n## \ud83d\udd28 Breaking Changes\\n\\nAndroid support in 0.59 has been cleaned up following Google\'s latest recommendations, which may result in potential breakage of existing apps. This issue might present as a runtime crash and a message, \\"You need to use a Theme.AppCompat theme (or descendant) with this activity\\". We recommend updating your project\'s `AndroidManifest.xml` file, making sure that the `android:theme` value is an `AppCompat` theme (such as `@style/Theme.AppCompat.Light.NoActionBar`).\\n\\nThe `react-native-git-upgrade` command has been removed in 0.59, in favor of the newly improved `react-native upgrade` command.\\n\\n## \ud83e\udd17 Thanks\\n\\nLots of new contributors helped with [enabling generation of native code from flow types](https://github.com/facebook/react-native/issues/22990) and [resolving Xcode warnings](https://github.com/facebook/react-native/issues/22609) - these are a great way to learn how React Native works and contributing to the greater good. Thank you! Look out for similar issues in the future.\\n\\nWhile these are the highlights that we noted, there are many others to be excited about. To see all of the updates, take a look at the [changelog](https://github.com/react-native-community/react-native-releases/blob/master/CHANGELOG.md). 0.59 is a huge release \u2013 we can\'t wait for you to try it out.\\n\\nWe have even more improvements coming throughout the rest of the year. Stay tuned!\\n\\n[Ryan](https://github.com/turnrye) and the whole [React Native core team](https://twitter.com/reactnative)"},{"id":"/2019/03/01/react-native-open-source-update","metadata":{"permalink":"/blog/2019/03/01/react-native-open-source-update","source":"@site/blog/2019-03-01-react-native-open-source-update.md","title":"React Native Open Source Update March 2019","description":"We announced our React Native Open Source roadmap in Q4 2018 after deciding to invest more in the React Native open source community.","date":"2019-03-01T00:00:00.000Z","formattedDate":"March 1, 2019","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":4.695,"hasTruncateMarker":false,"authors":[{"name":"Christoph Nakazawa","title":"Engineer at Facebook","url":"https://twitter.com/cpojer","imageURL":"https://avatars2.githubusercontent.com/u/13352?s=460&v=4"}],"frontMatter":{"title":"React Native Open Source Update March 2019","author":"Christoph Nakazawa","authorTitle":"Engineer at Facebook","authorURL":"https://twitter.com/cpojer","authorImageURL":"https://avatars2.githubusercontent.com/u/13352?s=460&v=4","authorTwitter":"cpojer","tags":["announcement"]},"unlisted":false,"prevItem":{"title":"Releasing React Native 0.59","permalink":"/blog/2019/03/12/releasing-react-native-059"},"nextItem":{"title":"The State of the React Native Community in 2018","permalink":"/blog/2019/01/07/state-of-react-native-community"}},"content":"We announced our [React Native Open Source roadmap](/blog/2018/11/01/oss-roadmap) in Q4 2018 after deciding to invest more in the React Native open source community.\\n\\nFor our first milestone, we focused on identifying and improving the most visible aspects of our community. Our goals were to reduce outstanding pull requests, reduce the project\'s surface area, identify leading user problems, and establish guidelines for community management.\\n\\nIn the past two months, we made more progress than we expected. Read on for more details:\\n\\n### Pull Requests\\n\\nIn order to build a healthy community, we must respond quickly to code contributions. In past years, we de-prioritized reviewing community contributions and accumulated 280 pull requests (December 2018). In the first milestone, we reduced the number of open pull requests to ~65. Simultaneously, the average number of pull requests opened per day increased from 3.5 to 7 which means we have handled about [600 pull requests](https://github.com/facebook/react-native/pulls?page=24&q=is%3Apr+closed%3A%3E2018-12-01&utf8=%E2%9C%93) in the last three months.\\n\\nWe merged [almost two-thirds](https://github.com/facebook/react-native/pulls?utf8=%E2%9C%93&q=is%3Apr+closed%3A%3E2018-12-01+label%3A%22Merged%22+) and closed one-third of the pull requests. They were closed without being merged if they are obsolete or low quality, or if they unnecessarily increase the project\'s surface area. Most of the merged pull requests fixed bugs, improved cross-platform parity, or introduced new features. Notable contributions include improving type safety and the ongoing work to support AndroidX.\\n\\nAt Facebook, we run React Native from master, so we test all changes first before they make it into a React Native Release. Out of all the merged pull requests, only six caused issues: four only affected internal development and two were caught in the release candidate state.\\n\\nOne of the more visible community contributions was [the updated \u201cRedBox\u201d screen](https://github.com/facebook/react-native/pull/22242). It\'s a good example of how the community is making the developer experience friendlier.\\n\\n### Lean Core\\n\\nReact Native currently has a very wide surface area with many unmaintained abstractions that we do not use a lot at Facebook. We are working on reducing the surface area in order to make React Native smaller and allow the community to take better care of abstractions that are mostly unused at Facebook.\\n\\nIn the first milestone, [we asked the community for help on the Lean Core project](https://twitter.com/reactnative/status/1093171521114247171). The response was overwhelming and we could barely keep up with all the progress. [Check out all the work completed in less than a month](https://github.com/facebook/react-native/issues/23313)!\\n\\nWhat we are most excited about is that maintainers have jumped in fixing long standing issues, adding tests, and supporting long requested features. These modules are getting more support than they ever did within React Native, showing that this is a great step for the community. Examples of such projects are [WebView](https://github.com/react-native-community/react-native-webview) that has [received many pull requests](https://twitter.com/titozzz/status/1101283928026034176) since their extraction and the CLI that is now [maintained by members of the community](https://blog.callstack.io/the-react-native-cli-has-a-new-home-79b63838f0e6) and received much needed improvements and fixes.\\n\\n### Leading User Problems\\n\\nIn December, we asked the community what they [disliked about React Native](https://github.com/react-native-community/discussions-and-proposals/issues/64). We aggregated the responses and [replied to each and every problem](https://github.com/react-native-community/discussions-and-proposals/issues/104). Fortunately, many of the issues that our community faces are also problems at Facebook. In our next milestone, we plan to address some of the main problems.\\n\\nOne of the highest voted problems was the developer experience of upgrading to newer versions of React Native. Unfortunately, this is not something that we experience ourselves because we run React Native from master. Thankfully, members from the community already stepped up to address this problem:\\n\\n- [Micha\u0142 Pierzcha\u0142a](https://github.com/thymikee) from Callstack [improved react-native upgrade](https://github.com/react-native-community/react-native-cli/pull/176/files) by using [rn-diff-purge](https://github.com/react-native-community/rn-diff-purge) under the hood. We also updated the website to remove outdated upgrade instructions.\\n- [We plan on recommending CocoaPods by default for iOS projects](https://github.com/facebook/react-native/pull/23563) which will reduce churn in project files when upgrading React Native. This will make it easier for people to install and link third-party modules which is even more important in the context of Lean Core as we expect projects to link more modules by default.\\n\\n### 0.59 Release\\n\\nWithout the help of the React Native community, especially [Mike Grabowski](https://github.com/grabbou) and [Lorenzo Sciandra](https://github.com/kelset), we would not be able to ship releases. We want to improve the release management process and plan to be more involved from now on:\\n\\n- We will work with community members to create a blog post for each major release.\\n- We will show breaking changes directly in the CLI when people upgrade to new versions.\\n- We will reduce the time it takes to make a release. We are exploring ways to increase automated testing and also creating an improved manual test plan.\\n\\nMany of these plans will be incorporated in the upcoming [React Native 0.59 release](https://github.com/facebook/react-native/releases/tag/v0.59.0-rc.3). 0.59 will ship with React Hooks, a new 64-bit version of JavaScriptCore for Android, and many performance and functionality improvements. It is currently published as a release candidate and is expected to be stable within the next two weeks.\\n\\n### Next Steps\\n\\nFor the next two months, we will continue managing pull requests [to stay on track](https://k03lwm00zo.codesandbox.io/) while also starting to reduce the number of outstanding GitHub issues. We will continue reducing the surface area of React Native through the Lean Core project. We plan to address 5 of the top community problems. As we finalize the community guidelines, we will turn attention to our website and documentation.\\n\\nWe are very excited to host over ten contributors from our community at Facebook London in March to help drive several of these efforts. We are glad that you are using React Native and hope that you\'ll see and feel the improvements we are working on in 2019. We\'ll be back with another update in a few months and _will be merging your pull requests in the meantime!_ \u269b\ufe0f\u270c\ufe0f"},{"id":"/2019/01/07/state-of-react-native-community","metadata":{"permalink":"/blog/2019/01/07/state-of-react-native-community","source":"@site/blog/2019-01-07-state-of-react-native-community.md","title":"The State of the React Native Community in 2018","description":"In 2018 the React Native Community made a number of changes to the way we develop and communicate about React Native. We believe that a few years from now we will look back and see that this shift was a turning point for React Native.","date":"2019-01-07T00:00:00.000Z","formattedDate":"January 7, 2019","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":3.25,"hasTruncateMarker":false,"authors":[{"name":"Lorenzo Sciandra","title":"Core Maintainer & React Native Developer","url":"https://github.com/kelset","imageURL":"https://avatars2.githubusercontent.com/u/16104054?s=460&v=4"}],"frontMatter":{"title":"The State of the React Native Community in 2018","author":"Lorenzo Sciandra","authorTitle":"Core Maintainer & React Native Developer","authorURL":"https://github.com/kelset","authorImageURL":"https://avatars2.githubusercontent.com/u/16104054?s=460&v=4","authorTwitter":"kelset","tags":["announcement"]},"unlisted":false,"prevItem":{"title":"React Native Open Source Update March 2019","permalink":"/blog/2019/03/01/react-native-open-source-update"},"nextItem":{"title":"Open Source Roadmap","permalink":"/blog/2018/11/01/oss-roadmap"}},"content":"In 2018 the React Native Community made a number of changes to the way we develop and communicate about React Native. We believe that a few years from now we will look back and see that this shift was a turning point for React Native.\\n\\nA lot of people are excited about the rewrite of React Native\'s architecture, widely known as [Fabric](https://github.com/react-native-community/discussions-and-proposals/issues/4). Among other things, this will fix fundamental limitations in React Native\'s architecture and will set up React Native for success in the future together with [JSI and TurboModules](https://github.com/react-native-community/discussions-and-proposals/issues/40).\\n\\nThe biggest shift in 2018 was to empower the React Native Community. From the beginning, Facebook encouraged developers from all around the world to participate in React Native\'s open source project. Since then, a number of core contributors emerged to handle, among other things, the release process.\\n\\nThese members took a few substantial steps towards making the whole community more empowered to shape the future of this project with the following resources:\\n\\n## [`react-native-releases`](https://github.com/react-native-community/react-native-releases) \ud83d\udcec\\n\\nThis repository, created in January, serves the dual purpose of allowing everyone to keep up the new releases in a more collaborative manner and opened the conversation of what would be part of a certain release to whomever wanted to suggest a cherry-pick (like for [0.57.8](https://github.com/react-native-community/react-native-releases/issues/71) and all its previous versions).\\n\\nThis has been the driving force behind moving away from a monthly release cycle, and the \\"long term support\\" approach currently used for version 0.57.x.\\n\\nHalf of the credit for reaching these decisions goes to the other repository created this year:\\n\\n## [`discussions-and-proposals`](https://github.com/react-native-community/discussions-and-proposals) \ud83d\udde3\\n\\nThis repository, created in July, expanded on the idea of a more open environment for conversations on React Native. Previously, this need was handled by issues labelled [`For Discussion`](https://github.com/facebook/react-native/labels/For%20Discussion) in the main repository, but we wanted to expand this strategy to an RFC approach that other libraries have (e.g. React).\\n\\nThis experiment immediately found its role in the React Native lifecycle. The Facebook team is now using the community RFC process to discuss what could [be improved in React Native](https://github.com/react-native-community/discussions-and-proposals/issues/64), and coordinate the efforts around the [Lean Core project](https://github.com/react-native-community/discussions-and-proposals/issues/6) - among other interesting discussions.\\n\\n## [@ReactNativeComm](https://twitter.com/ReactNativeComm) \ud83d\udc23\\n\\nWe are aware that our approach to communicate these efforts has not been as effective as we would have liked, and in an attempt to give you all an easier time keeping up with everything going on in the React Native Community (from releases to active discussions) we created a new twitter account that you can rely on [@ReactNativeComm](https://twitter.com/ReactNativeComm).\\n\\nIf you are not on that social network, remember that you can always watch repositories via GitHub; this feature improved these past few months with the possibility of being notified only for releases, so you should consider using it anyway.\\n\\n## What awaits ahead \ud83c\udf93\\n\\nOver the past 7-8 months, core contributors enhanced the [React Native Community GitHub organization](https://github.com/react-native-community) to take more ownership over the development of React Native, and enhance collaboration with Facebook. But this always lacked the formal structure that similar projects may have in place.\\n\\nThis organization can set the example for everyone in the larger developer community by enforcing a set of standards for all the packages/repos hosted in it, providing a single place for maintainers to help each other and contribute quality code that conforms to community-agreed standards.\\n\\nIn early 2019, we will have this new set of guidelines in place. Let us know what you think in the [dedicated discussion](https://github.com/react-native-community/discussions-and-proposals/issues/63).\\n\\nWe are confident that with these changes, the community will become more collaborative so that when we reach 1.0, we will all continue to write (even more) awesome apps by leveraging this joint effort \ud83e\udd17\\n\\n---\\n\\nI hope you are as excited as we are about the future of this community. We\'re excited to see all of you involved either in the conversations happening in the repositories listed above or via the awesome code you\u2019ll produce.\\n\\nHappy coding!"},{"id":"/2018/11/01/oss-roadmap","metadata":{"permalink":"/blog/2018/11/01/oss-roadmap","source":"@site/blog/2018-11-01-oss-roadmap.md","title":"Open Source Roadmap","description":"This year, the React Native team has focused on a large scale re-architecture of React Native. As Sophie mentioned in her State of React Native post, we\'ve sketched out a plan to better support the thriving population of React Native users and collaborators outside of Facebook. It\'s now time to share more details about what we\'ve been working on. Before I do so, I\'d like to lay out our long-term vision for React Native in open source.","date":"2018-11-01T00:00:00.000Z","formattedDate":"November 1, 2018","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":4.295,"hasTruncateMarker":false,"authors":[{"name":"H\xe9ctor Ramos","title":"Engineer at Facebook","url":"https://hectorramos.com/about","imageURL":"https://s.gravatar.com/avatar/f2223874e66e884c99087e452501f2da?s=128"}],"frontMatter":{"title":"Open Source Roadmap","author":"H\xe9ctor Ramos","authorTitle":"Engineer at Facebook","authorURL":"https://hectorramos.com/about","authorImageURL":"https://s.gravatar.com/avatar/f2223874e66e884c99087e452501f2da?s=128","authorTwitter":"hectorramos","tags":["announcement"]},"unlisted":false,"prevItem":{"title":"The State of the React Native Community in 2018","permalink":"/blog/2019/01/07/state-of-react-native-community"},"nextItem":{"title":"Introducing new iOS WebViews","permalink":"/blog/2018/08/27/wkwebview"}},"content":"![](/blog/assets/oss-roadmap-hero.jpg)\\n\\nThis year, the React Native team has focused on a large scale [re-architecture of React Native](https://github.com/react-native-community/discussions-and-proposals/issues/4). As Sophie mentioned in her [State of React Native post,](/blog/2018/06/14/state-of-react-native-2018) we\'ve sketched out a plan to better support the thriving population of React Native users and collaborators outside of Facebook. It\'s now time to share more details about what we\'ve been working on. Before I do so, I\'d like to lay out our long-term vision for React Native in open source.\\n\\nOur vision for React Native is...\\n\\n- **A healthy GitHub repository.** Issues and pull requests get handled within a reasonable period of time.\\n  - Increased test coverage.\\n  - Commits that sync out from the Facebook code repository should not break open source tests.\\n  - A higher scale of meaningful community contributions.\\n- **Stable APIs,** making it easier to interface with open source dependencies.\\n  - Facebook uses the same public API as open source\\n  - React Native releases that follow semantic versioning.\\n- **A vibrant eco-system.** High quality ViewManagers, native modules, and multiple platform support maintained by the community.\\n- **Excellent documentation.** Focus on helping users create high quality experiences, and up-to-date API reference docs.\\n\\nWe have identified the following focus areas to help us achieve this vision.\\n\\n## \u2702\ufe0f Lean Core\\n\\nOur goal is to [reduce the surface area of React Native](https://github.com/react-native-community/discussions-and-proposals/issues/6) by removing non-core and unused components. We\'ll transfer non-core components to the community to allow it to move faster. The reduced surface area will make it easier to manage contributions to React Native.\\n\\n[`WebView`](https://github.com/react-native-community/discussions-and-proposals/blob/master/proposals/0001-webview.md) is an example of a component that we transferred to the community. We are working on a workflow that will allow internal teams to continue using these components after we remove them from the repository. We have identified [dozens more components](https://github.com/react-native-community/discussions-and-proposals/issues/6) that we\'ll give ownership of to the community.\\n\\n## \ud83c\udf81 Open Sourcing Internals and \ud83d\udee0Updated Tooling\\n\\nThe React Native development experience for product teams at Facebook can be quite different from open source. Tools that may be popular in the open source community are not used at Facebook. There may be an internal tool that achieves the same purpose. In some cases, Facebook teams have become used to tools that do not exist outside of Facebook. These disparities can pose challenges when we open source our upcoming architecture work.\\n\\nWe\'ll work on releasing some of these internal tools. We\'ll also improve support for tools popular with the open source community. Here\'s a non-exhaustive list of projects we\'ll tackle:\\n\\n- Open source JSI and enable the community to bring their own JavaScript VMs, replacing the existing JavaScriptCore from RN\'s initial release. We\'ll be covering what JSI is in a future post, in the meantime you can learn more about JSI from [Parashuram\'s talk at React Conf](https://www.youtube.com/watch?v=UcqRXTriUVI).\\n- Support 64-bit libraries on Android.\\n- Enable debugging under the new architecture.\\n- Improve support for CocoaPods, Gradle, Maven, and new Xcode build system.\\n\\n## \u2705 Testing Infrastructure\\n\\nWhen Facebook engineers publish code, it\'s considered safe to land if it passes all tests. These tests identify whether a change might break one of our own React Native surfaces. Yet, there are differences in how Facebook uses React Native. This has allowed us to unknowingly break React Native in open source.\\n\\nWe\'ll shore up our internal tests to ensure they run in an environment that is as close as possible to open source. This will help prevent code that breaks these tests from making it to open source. We will also work on infrastructure to enable better testing of the core repo on GitHub, enabling future pull requests to easily include tests.\\n\\nCombined with the reduced surface area, this will allow contributors to merge pull requests quicker, with confidence.\\n\\n## \ud83d\udcdc Public API\\n\\nFacebook will consume React Native via the public API, the same way open source does, to reduce unintentional breaking changes. We have started converting internal call sites to address this. Our goal is to converge on a stable, public API, leading to the adoption of semantic versioning in version 1.0.\\n\\n## \ud83d\udce3 Communication\\n\\nReact Native is one of the [top open source projects on GitHub](https://octoverse.github.com/#top-and-trending-projects) by contributor count. That makes us really happy, and we\'d like to keep it going. We\'ll continue working on initiatives that lead to involved contributors, such as increased transparency and open discussion. The documentation is one of the first things someone new to React Native will encounter, yet it has not been a priority. We\'d like to fix that, starting with bringing back auto-generated API reference docs, creating additional content focused on creating [quality user experiences](/docs/improvingux), and improving our [release notes](https://github.com/react-native-community/react-native-releases/issues/47).\\n\\n## Timeline\\n\\nWe\'re planning to land these projects throughout the next year or so. Some of these efforts are already ongoing, such as [JSI which has already landed in open source](https://github.com/facebook/react-native/compare/e337bcafb0b017311c37f2dbc24e5a757af0a205...8427f64e06456f171f9df0316c6ca40613de7a20). Others will take a bit longer to complete, such as reducing the surface area. We\'ll do our best to keep the community up to date with our progress. Please join us in the [Discussions and Proposals](https://github.com/react-native-community/discussions-and-proposals) repository, a initiative from the React Native community that has led to the creation of several of the initiatives discussed in this roadmap."},{"id":"/2018/08/27/wkwebview","metadata":{"permalink":"/blog/2018/08/27/wkwebview","source":"@site/blog/2018-08-27-wkwebview.md","title":"Introducing new iOS WebViews","description":"For a long time now, Apple has discouraged using UIWebViews in favor of WKWebView. In iOS 12, which will be released in the upcoming months, UIWebViews will be formally deprecated. React Native\'s iOS WebView implementation relies heavily on the UIWebView class. Therefore, in light of these developments, we\'ve built a new native iOS backend to the WebView React Native component that uses WKWebView.","date":"2018-08-27T00:00:00.000Z","formattedDate":"August 27, 2018","tags":[{"label":"engineering","permalink":"/blog/tags/engineering"}],"readingTime":1.785,"hasTruncateMarker":false,"authors":[{"name":"Ramanpreet Nara","title":"Software Engineer at Facebook","url":"https://github.com/rsnara"}],"frontMatter":{"title":"Introducing new iOS WebViews","author":"Ramanpreet Nara","authorTitle":"Software Engineer at Facebook","authorURL":"https://github.com/rsnara","tags":["engineering"]},"unlisted":false,"prevItem":{"title":"Open Source Roadmap","permalink":"/blog/2018/11/01/oss-roadmap"},"nextItem":{"title":"Accessibility API Updates","permalink":"/blog/2018/08/13/react-native-accessibility-updates"}},"content":"For a long time now, Apple has discouraged using UIWebViews in favor of WKWebView. In iOS 12, which will be released in the upcoming months, [UIWebViews will be formally deprecated](https://developer.apple.com/videos/play/wwdc2018/234/?time=104). React Native\'s iOS WebView implementation relies heavily on the UIWebView class. Therefore, in light of these developments, we\'ve built a new native iOS backend to the WebView React Native component that uses WKWebView.\\n\\nThe tail end of these changes were landed in [this commit](https://github.com/facebook/react-native/commit/33b353c97c31190439a22febbd3d2a9ead49d3c9), and will become available in the 0.57 release.\\n\\nTo opt into this new implementation, please use the [`useWebKit`](https://reactnative.dev/docs/0.63/webview#usewebkit) prop:\\n\\n```js\\n<WebView\\n  useWebKit={true}\\n  source={{url: \'https://www.google.com\'}}\\n/>\\n```\\n\\n## Improvements\\n\\n`UIWebView` had no legitimate way to facilitate communication between the JavaScript running in the WebView, and React Native. When messages were sent from the WebView, we relied on a hack to deliver them to React Native. Succinctly, we encoded the message data into a url with a special scheme, and navigated the WebView to it. On the native side, we intercepted and cancelled this navigation, parsed the data from the url, and finally called into React Native. This implementation was error prone and insecure. I\'m glad to announce that we\'ve leveraged `WKWebView` features to completely replace it.\\n\\nOther benefits of WKWebView over UIWebView include faster JavaScript execution, and a multi-process architecture. Please see this [2014 WWDC](https://developer.apple.com/videos/play/wwdc2014/206) for more details.\\n\\n## Caveats\\n\\nIf your components use the following props, then you may experience problems when switching to WKWebView. For the time being, we suggest that you avoid using these props:\\n\\n**Inconsistent behavior:**\\n\\n`automaticallyAdjustContentInsets` and `contentInsets` ([commit](https://github.com/facebook/react-native/commit/bacfd9297657569006bab2b1f024ad1f289b1b27))\\n\\nWhen you add contentInsets to a `WKWebView`, it doesn\'t change the `WKWebView`\'s viewport. The viewport remains the same size as the frame. With `UIWebView`, the viewport size actually changes (gets smaller, if the content insets are positive).\\n\\n`backgroundColor` ([commit](https://github.com/facebook/react-native/commit/215fa14efc2a817c7e038075163491c8d21526fd))\\n\\nWith the new iOS implementation of WebView, there\'s a chance that your background color will flicker into view if you use this property. Furthermore, `WKWebView` renders transparent backgrounds differently from `UIWebview`. Please look at the commit description for more details.\\n\\n**Not supported:**\\n\\n`scalesPageToFit` ([commit](https://github.com/facebook/react-native/commit/b18fddadfeae5512690a0a059a4fa80c864f43a3))\\n\\nWKWebView didn\'t support the scalesPageToFit prop, so we couldn\'t implement this on the WebView React Native component."},{"id":"/2018/08/13/react-native-accessibility-updates","metadata":{"permalink":"/blog/2018/08/13/react-native-accessibility-updates","source":"@site/blog/2018-08-13-react-native-accessibility-updates.md","title":"Accessibility API Updates","description":"Motivation","date":"2018-08-13T00:00:00.000Z","formattedDate":"August 13, 2018","tags":[{"label":"engineering","permalink":"/blog/tags/engineering"}],"readingTime":6.475,"hasTruncateMarker":false,"authors":[{"name":"Ziqi Chen","title":"Student at UC Berkeley","url":"https://ziqichen.com/","imageURL":"https://avatars2.githubusercontent.com/u/13990087?s=400&u=5841da1b6064341d52ecab70a586b6701d9f6978&v=4"}],"frontMatter":{"title":"Accessibility API Updates","author":"Ziqi Chen","authorTitle":"Student at UC Berkeley","authorURL":"https://ziqichen.com/","authorImageURL":"https://avatars2.githubusercontent.com/u/13990087?s=400&u=5841da1b6064341d52ecab70a586b6701d9f6978&v=4","tags":["engineering"]},"unlisted":false,"prevItem":{"title":"Introducing new iOS WebViews","permalink":"/blog/2018/08/27/wkwebview"},"nextItem":{"title":"Releasing 0.56","permalink":"/blog/2018/07/04/releasing-react-native-056"}},"content":"## Motivation\\n\\nAs technology advances and mobile apps become increasingly important to everyday life, the necessity of creating accessible applications has likewise grown in importance.\\n\\nReact Native\'s limited Accessibility API has always been a huge pain point for developers, so we\'ve made a few updates to the Accessibility API to make it easier to create inclusive mobile applications.\\n\\n## Problems With the Existing API\\n\\n### Problem One: Two Completely Different Yet Similar Props - accessibilityComponentType (Android) and accessibilityTraits (iOS)\\n\\n`accessibilityComponentType` and `accessibilityTraits` are two properties that are used to tell TalkBack on Android and VoiceOver on iOS what kind of UI element the user is interacting with. The two biggest problems with these properties are that:\\n\\n1. **They are two different properties with different usage methods, yet have the same purpose.** In the previous API, these are two separate properties (one for each platform), which was not only inconvenient, but also confusing to many developers. `accessibilityTraits` on iOS allows 17 different values while `accessibilityComponentType` on Android allows only 4 values. Furthermore, the values for the most part had no overlap. Even the input types for these two properties are different. `accessibilityTraits` allows either an array of traits to be passed in or a single trait, while `accessibilityComponentType` allows only a single value.\\n2. **There is very limited functionality on Android.** With the old property, the only UI elements that Talkback were able to recognize were \u201cbutton,\u201d \u201cradiobutton_checked,\u201d and \u201cradiobutton_unchecked.\u201d\\n\\n### Problem Two: Non-existent Accessibility Hints:\\n\\nAccessibility Hints help users using TalkBack or VoiceOver understand what will happen when they perform an action on an accessibility element that is not apparent by only the accessibility label. These hints can be turned on and off in the settings panel. Previously, React Native\'s API did not support accessibility hints at all.\\n\\n### Problem Three: Ignoring Inverted Colors:\\n\\nSome users with vision loss use inverted colors on their mobile phones to have greater screen contrast. Apple provided an API for iOS which allows developers to ignore certain views. This way, images and videos aren\'t distorted when a user has the inverted colors setting on. This API is currently unsupported by React Native.\\n\\n## Design of the New API\\n\\n### Solution One: Combining accessibilityComponentType (Android) and accessibilityTraits (iOS)\\n\\nIn order to solve the confusion between `accessibilityComponentType` and `accessibilityTraits`, we decided to merge them into a single property. This made sense because they technically had the same intended functionality and by merging them, developers no longer had to worry about platform specific intricacies when building accessibility features.\\n\\n**Background**\\n\\nOn iOS, `UIAccessibilityTraits` is a property that can be set on any NSObject. Each of the 17 traits passed in through the javascript property to native is mapped to a `UIAccessibilityTraits` element in Objective-C. Traits are each represented by a long int, and every trait that is set is ORed together.\\n\\nOn Android however, `AccessibilityComponentType` is a concept that was made up by React Native, and doesn\'t directly map to any properties in Android. Accessibility is handled by an accessibility delegate. Each view has a default accessibility delegate. If you want to customize any accessibility actions, you have to create a new accessibility delegate, override specific methods you want to customize, and then set the accessibility delegate of the view you are handling to be associated with the new delegate. When a developer set `AccessibilityComponentType`, the native code created a new delegate based off of the component that was passed in, and set the view to have that accessibility delegate.\\n\\n**Changes Made**\\n\\nFor our new property, we wanted to create a superset of the two properties. We decided to keep the new property modeled mostly after the existing property `accessibilityTraits`, since `accessibilityTraits` has significantly more values. The functionality of Android for these traits would be polyfilled in by modifying the Accessibility Delegate.\\n\\nThere are 17 values of UIAccessibilityTraits that `accessibilityTraits` on iOS can be set to. However, we didn\'t include all of them as possible values to our new property. This is because the effect of setting some of these traits is actually not very well known, and many of these values are virtually never used.\\n\\nThe values UIAccessibilityTraits were set to generally took on one of two purposes. They either described a role that UI element had, or they described the state a UI element was in. Most uses of the previous properties we observed usually used one value that represented a role and combined it with either \u201cstate selected,\u201d \u201cstate disabled,\u201d or both. Therefore, we decided to create two new accessibility properties: `accessibilityRole` and `accessibilityState`.\\n\\n**`accessibilityRole`**\\n\\nThe new property, `accessibilityRole`, is used to tell Talkback or Voiceover the role of a UI Element. This new property can take on one of the following values:\\n\\n- `none`\\n- `button`\\n- `link`\\n- `search`\\n- `image`\\n- `keyboardkey`\\n- `text`\\n- `adjustable`\\n- `header`\\n- `summary`\\n- `imagebutton`\\n\\nThis property only allows one value to be passed in because UI elements generally don\'t logically take on more than one of these. The exception is image and button, so we\'ve added a role imagebutton that is a combination of both.\\n\\n**`accessibilityStates`**\\n\\nThe new property, `accessibilityStates`, is used to tell Talkback or Voiceover the state a UI Element is in. This property takes on an Array containing one or both of the following values:\\n\\n- `selected`\\n- `disabled`\\n\\n### Solution Two: Adding Accessibility Hints\\n\\nFor this, we added a new property, `accessibilityHint`. Setting this property will allow Talkback or Voiceover to recite the hint to users.\\n\\n**`accessibilityHint`**\\n\\nThis property takes in the accessibility hint to be read in the form of a String.\\n\\nOn iOS, setting this property will set the corresponding native property AccessibilityHint on the view. The hint will then be read by Voiceover if Accessibility Hints are turned on in the iPhone.\\n\\nOn Android, setting this property appends the value of the hint to the end of the accessibility label. The upside to this implementation is that it mimics the behavior of hints on iOS, but the downside to this implementation is that these hints cannot be turned off in the settings on Android the way they can be on iOS.\\n\\nThe reason we made this decision on Android is because normally, accessibility hints correspond with a specific action (e.g. click), and we wanted to keep behaviors consistent across platforms.\\n\\n### Solution to Problem Three\\n\\n**`accessibilityIgnoresInvertColors`**\\n\\nWe exposed Apple\'s api AccessibilityIgnoresInvertColors to JavaScript, so now when you have a view where you don\'t want colors to be inverted (e.g image), you can set this property to true, and it won\'t be inverted.\\n\\n## New Usage\\n\\nThese new properties will become available in the React Native 0.57 release.\\n\\n### How to Upgrade\\n\\nIf you are currently using `accessibilityComponentType` and `accessibilityTraits`, here are the steps you can take to upgrade to the new properties.\\n\\n#### 1. Using jscodeshift\\n\\nThe most simple use cases can be replaced by running a jscodeshift script.\\n\\nThis [script](https://gist.github.com/ziqichen6/246e5778617224d2b4aff198dab0305d) replaces the following instances:\\n\\n```\\naccessibilityTraits=\u201ctrait\u201d\\naccessibilityTraits={[\u201ctrait\u201d]}\\n```\\n\\nWith\\n\\n```\\naccessibilityRole= \u201ctrait\u201d\\n```\\n\\nThis script also removes instances of `AccessibilityComponentType` (assuming everywhere you set `AccessibilityComponentType`, you would also set `AccessibilityTraits`).\\n\\n#### 2. Using a manual codemod\\n\\nFor the cases that used `AccessibilityTraits` that don\'t have a corresponding value for `AccessibilityRole`, and the cases where multiple traits were passed into `AccessibilityTraits`, a manual codemod would have to be done.\\n\\nIn general,\\n\\n```tsx\\naccessibilityTraits= {[\u201cbutton\u201d, \u201cselected\u201d]}\\n```\\n\\nwould be manually replaced with\\n\\n```tsx\\naccessibilityRole=\u201cbutton\u201d\\naccessibilityStates={[\u201cselected\u201d]}\\n```\\n\\nThese properties are already being used in Facebook\'s codebase. The codemod for Facebook was surprisingly simple. The jscodeshift script fixed about half of our instances, and the other half was fixed manually. Overall, the entire process took less than a few hours.\\n\\nHopefully you will find the updated API useful! And please continue making apps accessible! #inclusion"},{"id":"/2018/07/04/releasing-react-native-056","metadata":{"permalink":"/blog/2018/07/04/releasing-react-native-056","source":"@site/blog/2018-07-04-releasing-react-native-056.md","title":"Releasing 0.56","description":"The long-awaited 0.56 version of React Native is now available \ud83c\udf89. This blog post highlights some of the changes introduced in this new release. We also want to take the opportunity to explain what has kept us busy since March.","date":"2018-07-04T00:00:00.000Z","formattedDate":"July 4, 2018","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"},{"label":"release","permalink":"/blog/tags/release"}],"readingTime":4.655,"hasTruncateMarker":false,"authors":[{"name":"Lorenzo Sciandra","title":"Core Maintainer & React Native Developer at Drivetribe","url":"https://github.com/kelset","imageURL":"https://avatars2.githubusercontent.com/u/16104054?s=460&v=4"}],"frontMatter":{"title":"Releasing 0.56","author":"Lorenzo Sciandra","authorTitle":"Core Maintainer & React Native Developer at Drivetribe","authorURL":"https://github.com/kelset","authorImageURL":"https://avatars2.githubusercontent.com/u/16104054?s=460&v=4","authorTwitter":"kelset","tags":["announcement","release"]},"unlisted":false,"prevItem":{"title":"Accessibility API Updates","permalink":"/blog/2018/08/13/react-native-accessibility-updates"},"nextItem":{"title":"State of React Native 2018","permalink":"/blog/2018/06/14/state-of-react-native-2018"}},"content":"The long-awaited 0.56 version of React Native is now available \ud83c\udf89. This blog post highlights some of the [changes](https://github.com/react-native-community/react-native-releases/blob/master/CHANGELOG.md#highlights) introduced in this new release. We also want to take the opportunity to explain what has kept us busy since March.\\n\\n### The breaking changes dilemma, or, \\"when to release?\\"\\n\\nThe [Contributor\'s Guide](https://github.com/facebook/react-native/blob/master/CONTRIBUTING.md) explains the integration process that all changes to React Native go through. The project has is composed by [many different tools](https://github.com/facebook/react-native-website/issues/370), requiring coordination and constant support to keep everything working properly. Add to this the vibrant open source community that contributes back to the project, and you will get a sense of the mind-bending scale of it all.\\n\\nWith React Native\'s impressive adoption, breaking changes must be made with great care, and the process is not as smooth as we\'d like. A decision was made to skip the April and May releases to allow the core team to integrate and test a new set of breaking changes. [Dedicated community communication](https://github.com/react-native-community/react-native-releases/issues/14) channels were used along the way to ensure that the June 2018 (`0.56.0`) release is as hassle-free as possible to adopt by those who patiently waited for the stable release.\\n\\nIs `0.56.0` perfect? No, as every piece of software out there: but we reached a point where the tradeoff between \\"waiting for more stability\\" versus \\"testing led to successful results so we can push forward\\" that we feel ready to release it. Moreover, we are aware [of](https://github.com/facebook/react-native/issues/19955) [a](https://github.com/facebook/react-native/issues/19827) [few](https://github.com/facebook/react-native/issues/19763) [issues](https://github.com/facebook/react-native/issues/19859) that are not solved in the final `0.56.0` release. Most developers should have no issues upgrading to `0.56.0`. For those that are blocked by the aforementioned issues, we hope to see you around in our discussions and we are looking forward to working with you on a solution to these issues.\\n\\nYou might consider `0.56.0` as a fundamental building block towards a more stable framework: it will take probably a week or two of widespread adoption before all the edge cases will be sanded off, but this will lead to an even better July 2018 (`0.57.0`) release.\\n\\nWe\'d like to conclude this section by thanking [all the 67 contributors who worked on a total of 818 commits](https://github.com/facebook/react-native/compare/v0.55.4...v0.56.0-rc.4) (!) that will help make your apps even better \ud83d\udc4f.\\n\\nAnd now, without further ado...\\n\\n## The Big Changes\\n\\n### Babel 7\\n\\nAs you may know, the transpiler tool that allows us all to use the latest and greatest features of JavaScript, Babel, is moving to [v7 soon](https://babeljs.io/blog/2017/12/27/nearing-the-7.0-release). Since this new version brings along some important changes, we felt that now it would be a good time to upgrade, allowing [Metro](https://github.com/facebook/metro) to [leverage on its improvements](https://github.com/facebook/metro/issues/92).\\n\\nIf you find yourself in trouble with upgrading, please refer to the [documentation section related to it](https://new.babeljs.io/docs/en/next/v7-migration.html).\\n\\n### Modernizing Android support\\n\\nOn Android, much of the surrounding tooling has changed. We\'ve updated to [Gradle 3.5](https://github.com/facebook/react-native/commit/699e5eebe807d1ced660d2d2f39b5679d26925da), [Android SDK 26](https://github.com/facebook/react-native/commit/065c5b6590de18281a8c592a04240751c655c03c), [Fresco to 1.9.0, and OkHttp to 3.10.0](https://github.com/facebook/react-native/commit/6b07602915157f54c39adbf0f9746ac056ad2d13) and even the [NDK API target to API 16](https://github.com/facebook/react-native/commit/5ae97990418db613cd67b1fb9070ece976d17dc7). These changes should go without issue and result in faster builds. More importantly, it will help developers comply with the [new Play Store requirements](https://android-developers.googleblog.com/2017/12/improving-app-security-and-performance.html) coming into effect next month.\\n\\nRelated to this, we\'d like to particularly thank [Dulmandakh](https://github.com/dulmandakh) for the many PRs submitted in order to make it possible \ud83d\udc4f.\\n\\nThere are some more steps that need to be taken in this direction, and you can follow along with the future planning and discussion of updating the Android support in the [dedicated issue](https://github.com/facebook/react-native/issues/19297) (and a side one for the [JSC](https://github.com/facebook/react-native/issues/19737)).\\n\\n### New Node, Xcode, React, and Flow \u2013 oh my!\\n\\nNode 8 is now the standard for React Native. It was actually already being tested already, but we\'ve put both feet forward as Node 6 entered maintenance mode. React was also updated to 16.4, which brings a ton of fixes with it.\\n\\nWe\'re dropping support for iOS 8, [making iOS 9 the oldest iOS version that can be targeted](https://github.com/facebook/react-native/commit/f50df4f5eca4b4324ff18a49dcf8be3694482b51). We do not foresee this being a problem, as any device that can run iOS 8, can be upgraded to iOS 9. This change allowed us to remove rarely-used code that implemented workarounds for older devices running iOS 8.\\n\\nThe continuous integration toolchain has been updated [to use Xcode 9.4](https://github.com/facebook/react-native/commit/c55bcd6ea729cdf57fc14a5478b7c2e3f6b2a94d), ensuring that all iOS tests are run on the latest developer tools provided by Apple.\\n\\nWe have upgraded to [Flow 0.75](https://github.com/facebook/react-native/commit/6264b6932a08e1cefd83c4536ff7839d91938730) to use the new error format [that many devs appreciate](https://twitter.com/dan_abramov/status/998610821096857602). We\'ve also created types for many more components. If you\'re not yet enforcing static typing in your project, please consider using Flow to identify problems as you code instead of at runtime.\\n\\n### And a lot of other things...\\n\\nFor instance, YellowBox was [replaced](https://github.com/facebook/react-native/commit/d0219a0301e59e8b0ef75dbd786318d4b4619f4c) with a new implementation that makes debugging a lot better.\\n\\nFor the complete release notes, please reference the full [changelog here](https://github.com/react-native-community/react-native-releases/blob/master/CHANGELOG.md). And remember to keep an eye on the [upgrading guide](/docs/upgrading) to avoid issues moving to this new version.\\n\\n---\\n\\nA final note: starting this week, the React Native core team will resume holding monthly meetings. We\'ll make sure to keep everyone up-to-date with what\'s covered, and ensure to keep your feedback at hand for future meetings.\\n\\nHappy coding everyone!\\n\\n[Lorenzo](https://twitter.com/Kelset), [Ryan](https://github.com/turnrye), and the whole [React Native core team](https://twitter.com/reactnative)\\n\\n**PS:** as always, we\'d like to remind everyone that React Native is still in 0.x versioning because of the many changes still undergoing - so remember when upgrading that yes, probably, something may still crash or be broken. Be helpful towards each other in the issues and when submitting PRs - and remember to follow the [CoC](https://code.fb.com/codeofconduct/) enforced: there\'s always a human on the other side of the screen."},{"id":"/2018/06/14/state-of-react-native-2018","metadata":{"permalink":"/blog/2018/06/14/state-of-react-native-2018","source":"@site/blog/2018-06-14-state-of-react-native-2018.md","title":"State of React Native 2018","description":"It\'s been a while since we last published a status update about React Native.","date":"2018-06-14T00:00:00.000Z","formattedDate":"June 14, 2018","tags":[{"label":"engineering","permalink":"/blog/tags/engineering"}],"readingTime":4.68,"hasTruncateMarker":false,"authors":[{"name":"Sophie Alpert","title":"Engineering Manager on React at Facebook","url":"https://github.com/sophiebits","imageURL":"https://avatars2.githubusercontent.com/u/6820?s=460&v=4"}],"frontMatter":{"title":"State of React Native 2018","author":"Sophie Alpert","authorTitle":"Engineering Manager on React at Facebook","authorURL":"https://github.com/sophiebits","authorImageURL":"https://avatars2.githubusercontent.com/u/6820?s=460&v=4","authorTwitter":"sophiebits","tags":["engineering"]},"unlisted":false,"prevItem":{"title":"Releasing 0.56","permalink":"/blog/2018/07/04/releasing-react-native-056"},"nextItem":{"title":"Using TypeScript with React Native","permalink":"/blog/2018/05/07/using-typescript-with-react-native"}},"content":"It\'s been a while since we last published a status update about React Native.\\n\\nAt Facebook, we\'re using React Native more than ever and for many important projects. One of our most popular products is Marketplace, one of the top-level tabs in our app which is used by 800 million people each month. Since its creation in 2015, all of Marketplace has been built with React Native, including over a hundred full-screen views throughout different parts of the app.\\n\\nWe\'re also using React Native for many new parts of the app. If you watched the F8 keynote last month, you\'ll recognize Blood Donations, Crisis Response, Privacy Shortcuts, and Wellness Checks \u2013 all recent features built with React Native. And projects outside the main Facebook app are using React Native too. The new Oculus Go VR headset includes [a companion mobile app](https://www.oculus.com/app/) that is fully built with React Native, not to mention React VR powering many experiences in the headset itself.\\n\\nNaturally, we also use many other technologies to build our apps. [Litho](https://fblitho.com/) and [ComponentKit](https://componentkit.org/) are two libraries we use extensively in our apps; both provide a React-like component API for building native screens. It\'s never been a goal for React Native to replace all other technologies \u2013 we are focused on making React Native itself better, but we love seeing other teams borrow ideas from React Native, like bringing [instant reload](https://instagram-engineering.com/instant-feedback-in-ios-engineering-workflows-c3f6508c76c8) to non-JavaScript code too.\\n\\n## Architecture\\n\\nWhen we started the React Native project in 2013, we designed it to have a single \u201cbridge\u201d between JavaScript and native that is asynchronous, serializable, and batched. Just as React DOM turns React state updates into imperative, mutative calls to DOM APIs like `document.createElement(attrs)` and `.appendChild()`, React Native was designed to return a single JSON message that lists mutations to perform, like `[[\\"createView\\", attrs], [\\"manageChildren\\", ...]]`. We designed the entire system to never rely on getting a synchronous response back and to ensure everything in that list could be fully serialized to JSON and back. We did this for the flexibility it gave us: on top of this architecture, we were able to build tools like [Chrome debugging](/docs/debugging#chrome-developer-tools), which runs all the JavaScript code asynchronously over a WebSocket connection.\\n\\nOver the last 5 years, we found that these initial principles have made building some features harder. An asynchronous bridge means you can\'t integrate JavaScript logic directly with many native APIs expecting synchronous answers. A batched bridge that queues native calls means it\'s harder to have React Native apps call into functions that are implemented natively. And a serializable bridge means unnecessary copying instead of directly sharing memory between the two worlds. For apps that are entirely built in React Native, these restrictions are usually bearable. But for apps with complex integration between React Native and existing app code, they are frustrating.\\n\\n**We\'re working on a large-scale rearchitecture of React Native to make the framework more flexible and integrate better with native infrastructure in hybrid JavaScript/native apps.** With this project, we\'ll apply what we\'ve learned over the last 5 years and incrementally bring our architecture to a more modern one. We\'re rewriting many of React Native\'s internals, but most of the changes are under the hood: existing React Native apps will continue to work with few or no changes.\\n\\nTo make React Native more lightweight and fit better into existing native apps, this rearchitecture has three major internal changes. First, we are changing the threading model. Instead of each UI update needing to perform work on three different threads, it will be possible to call synchronously into JavaScript on any thread for high-priority updates while still keeping low-priority work off the main thread to maintain responsiveness. Second, we are incorporating [async rendering](https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html) capabilities into React Native to allow multiple rendering priorities and to simplify asynchronous data handling. Finally, we are simplifying our bridge to make it faster and more lightweight; direct calls between native and JavaScript are more efficient and will make it easier to build debugging tools like cross-language stack traces.\\n\\nOnce these changes are completed, closer integrations will be possible. Today, it\'s not possible to incorporate native navigation and gesture handling or native components like UICollectionView and RecyclerView without complex hacks. After our changes to the threading model, building features like this will be straightforward.\\n\\nWe\'ll release more details about this work later this year as it approaches completion.\\n\\n## Community\\n\\nAlongside the community inside Facebook, we\'re happy to have a thriving population of React Native users and collaborators outside Facebook. We\'d like to support the React Native community more, both by serving React Native users better and by making the project easier to contribute to.\\n\\nJust as our architecture changes will help React Native interoperate more cleanly with other native infrastructure, React Native should be slimmer on the JavaScript side to fit better with the JavaScript ecosystem, which includes making the VM and bundler swappable. We know the pace of breaking changes can be hard to keep up with, so we\'d like to find ways to have fewer major releases. Finally, we know that some teams are looking for more thorough documentation in topics like startup optimization, where our expertise hasn\'t yet been written down. Expect to see some of these changes over the coming year.\\n\\nIf you\'re using React Native, you\'re part of our community; keep letting us know how we can make React Native better for you.\\n\\nReact Native is just one tool in a mobile developer\'s toolbox, but it\'s one that we strongly believe in \u2013 and we\'re making it better every day, with over 2500 commits in the last year from 500+ contributors."},{"id":"/2018/05/07/using-typescript-with-react-native","metadata":{"permalink":"/blog/2018/05/07/using-typescript-with-react-native","source":"@site/blog/2018-05-07-using-typescript-with-react-native.md","title":"Using TypeScript with React Native","description":"JavaScript! We all love it. But some of us also love types. Luckily, options exist to add stronger types to JavaScript. My favourite is TypeScript, but React Native supports Flow out of the box. Which you prefer is a matter of preference, they each have their own approach on how to add the magic of types to JavaScript. Today, we\'re going to look at how to use TypeScript in React Native apps.","date":"2018-05-07T00:00:00.000Z","formattedDate":"May 7, 2018","tags":[{"label":"engineering","permalink":"/blog/tags/engineering"}],"readingTime":7.34,"hasTruncateMarker":false,"authors":[{"name":"Ash Furrow","title":"Software Engineer at Artsy","url":"https://github.com/ashfurrow","imageURL":"https://avatars2.githubusercontent.com/u/498212?s=460&v=4"}],"frontMatter":{"title":"Using TypeScript with React Native","author":"Ash Furrow","authorTitle":"Software Engineer at Artsy","authorURL":"https://github.com/ashfurrow","authorImageURL":"https://avatars2.githubusercontent.com/u/498212?s=460&v=4","authorTwitter":"ashfurrow","tags":["engineering"]},"unlisted":false,"prevItem":{"title":"State of React Native 2018","permalink":"/blog/2018/06/14/state-of-react-native-2018"},"nextItem":{"title":"Built with React Native - The Build.com app","permalink":"/blog/2018/04/09/build-com-app"}},"content":"JavaScript! We all love it. But some of us also love [types](https://en.wikipedia.org/wiki/Data_type). Luckily, options exist to add stronger types to JavaScript. My favourite is [TypeScript](https://www.typescriptlang.org), but React Native supports [Flow](https://flow.org) out of the box. Which you prefer is a matter of preference, they each have their own approach on how to add the magic of types to JavaScript. Today, we\'re going to look at how to use TypeScript in React Native apps.\\n\\nThis post uses Microsoft\'s [TypeScript-React-Native-Starter](https://github.com/Microsoft/TypeScript-React-Native-Starter) repo as a guide.\\n\\n**Update**: Since this blog post was written, things have gotten even easier. You can replace all the set up described in this blog post by running just one command:\\n\\n```sh\\nnpx react-native init MyAwesomeProject --template react-native-template-typescript\\n```\\n\\nHowever, there _are_ some limitations to Babel\'s TypeScript support, which the blog post above goes into in detail. The steps outlined in _this_ post still work, and Artsy is still using [react-native-typescript-transformer](https://github.com/ds300/react-native-typescript-transformer) in production, but the fastest way to get up and running with React Native and TypeScript is using the above command. You can always switch later if you have to.\\n\\nIn any case, have fun! The original blog post continues below.\\n\\n## Prerequisites\\n\\nBecause you might be developing on one of several different platforms, targeting several different types of devices, basic setup can be involved. You should first ensure that you can run a plain React Native app without TypeScript. Follow [the instructions on the React Native website to get started](/docs/getting-started). When you\'ve managed to deploy to a device or emulator, you\'ll be ready to start a TypeScript React Native app.\\n\\nYou will also need [Node.js](https://nodejs.org/en/), [npm](https://www.npmjs.com), and [Yarn](https://yarnpkg.com/lang/en).\\n\\n## Initializing\\n\\nOnce you\'ve tried scaffolding out an ordinary React Native project, you\'ll be ready to start adding TypeScript. Let\'s go ahead and do that.\\n\\n```sh\\nreact-native init MyAwesomeProject\\ncd MyAwesomeProject\\n```\\n\\n## Adding TypeScript\\n\\nThe next step is to add TypeScript to your project. The following commands will:\\n\\n- add TypeScript to your project\\n- add [React Native TypeScript Transformer](https://github.com/ds300/react-native-typescript-transformer) to your project\\n- initialize an empty TypeScript config file, which we\'ll configure next\\n- add an empty React Native TypeScript Transformer config file, which we\'ll configure next\\n- adds [typings](https://github.com/DefinitelyTyped/DefinitelyTyped) for React and React Native\\n\\nOkay, let\'s go ahead and run these.\\n\\n```sh\\nyarn add --dev typescript\\nyarn add --dev react-native-typescript-transformer\\nyarn tsc --init --pretty --jsx react\\ntouch rn-cli.config.js\\nyarn add --dev @types/react @types/react-native\\n```\\n\\nThe `tsconfig.json` file contains all the settings for the TypeScript compiler. The defaults created by the command above are mostly fine, but open the file and uncomment the following line:\\n\\n```js\\n{\\n  /* Search the config file for the following line and uncomment it. */\\n  // \\"allowSyntheticDefaultImports\\": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */\\n}\\n```\\n\\nThe `rn-cli.config.js` contains the settings for the React Native TypeScript Transformer. Open it and add the following:\\n\\n```js\\nmodule.exports = {\\n  getTransformModulePath() {\\n    return require.resolve(\'react-native-typescript-transformer\');\\n  },\\n  getSourceExts() {\\n    return [\'ts\', \'tsx\'];\\n  },\\n};\\n```\\n\\n## Migrating to TypeScript\\n\\nRename the generated `App.js` and `__tests_/App.js` files to `App.tsx`. `index.js` needs to use the `.js` extension. All new files should use the `.tsx` extension (or `.ts` if the file doesn\'t contain any JSX).\\n\\nIf you tried to run the app now, you\'d get an error like `object prototype may only be an object or null`. This is caused by a failure to import the default export from React as well as a named export on the same line. Open `App.tsx` and modify the import at the top of the file:\\n\\n```diff\\n-import React, { Component } from \'react\';\\n+import React from \'react\'\\n+import { Component } from \'react\';\\n```\\n\\nSome of this has to do with differences in how Babel and TypeScript interoperate with CommonJS modules. In the future, the two will stabilize on the same behaviour.\\n\\nAt this point, you should be able to run the React Native app.\\n\\n## Adding TypeScript Testing Infrastructure\\n\\nReact Native ships with [Jest](https://github.com/facebook/jest), so for testing a React Native app with TypeScript, we\'ll want to add [ts-jest](https://www.npmjs.com/package/ts-jest) to our `devDependencies`.\\n\\n```sh\\nyarn add --dev ts-jest\\n```\\n\\nThen, we\'ll open up our `package.json` and replace the `jest` field with the following:\\n\\n```js\\n{\\n  \\"jest\\": {\\n    \\"preset\\": \\"react-native\\",\\n    \\"moduleFileExtensions\\": [\\n      \\"ts\\",\\n      \\"tsx\\",\\n      \\"js\\"\\n    ],\\n    \\"transform\\": {\\n      \\"^.+\\\\\\\\.(js)$\\": \\"<rootDir>/node_modules/babel-jest\\",\\n      \\"\\\\\\\\.(ts|tsx)$\\": \\"<rootDir>/node_modules/ts-jest/preprocessor.js\\"\\n    },\\n    \\"testRegex\\": \\"(/__tests__/.*|\\\\\\\\.(test|spec))\\\\\\\\.(ts|tsx|js)$\\",\\n    \\"testPathIgnorePatterns\\": [\\n      \\"\\\\\\\\.snap$\\",\\n      \\"<rootDir>/node_modules/\\"\\n    ],\\n    \\"cacheDirectory\\": \\".jest/cache\\"\\n  }\\n}\\n```\\n\\nThis will configure Jest to run `.ts` and `.tsx` files with `ts-jest`.\\n\\n## Installing Dependency Type Declarations\\n\\nTo get the best experience in TypeScript, we want the type-checker to understand the shape and API of our dependencies. Some libraries will publish their packages with `.d.ts` files (type declaration/type definition files), which can describe the shape of the underlying JavaScript. For other libraries, we\'ll need to explicitly install the appropriate package in the `@types/` npm scope.\\n\\nFor example, here we\'ll need types for Jest, React, and React Native, and React Test Renderer.\\n\\n```ts\\nyarn add --dev @types/jest @types/react @types/react-native @types/react-test-renderer\\n```\\n\\nWe saved these declaration file packages to our _dev_ dependencies because this is a React Native _app_ that only uses these dependencies during development and not during runtime. If we were publishing a library to NPM, we might have to add some of these type dependencies as regular dependencies.\\n\\nYou can read more [here about getting `.d.ts` files](https://www.typescriptlang.org/docs/handbook/declaration-files/consumption.html).\\n\\n## Ignoring More Files\\n\\nFor your source control, you\'ll want to start ignoring the `.jest` folder. If you\'re using git, we can just add entries to our `.gitignore` file.\\n\\n```config\\n# Jest\\n#\\n.jest/\\n```\\n\\nAs a checkpoint, consider committing your files into version control.\\n\\n```sh\\ngit init\\ngit add .gitignore # import to do this first, to ignore our files\\ngit add .\\ngit commit -am \\"Initial commit.\\"\\n```\\n\\n## Adding a Component\\n\\nLet\'s add a component to our app. Let\'s go ahead and create a `Hello.tsx` component. It\'s a pedagogical component, not something that you\'d actually write in an app, but something nontrivial that shows off how to use TypeScript in React Native.\\n\\nCreate a `components` directory and add the following example.\\n\\n```ts\\n// components/Hello.tsx\\nimport React from \'react\';\\nimport {Button, StyleSheet, Text, View} from \'react-native\';\\n\\nexport interface Props {\\n  name: string;\\n  enthusiasmLevel?: number;\\n}\\n\\ninterface State {\\n  enthusiasmLevel: number;\\n}\\n\\nexport class Hello extends React.Component<Props, State> {\\n  constructor(props: Props) {\\n    super(props);\\n\\n    if ((props.enthusiasmLevel || 0) <= 0) {\\n      throw new Error(\\n        \'You could be a little more enthusiastic. :D\',\\n      );\\n    }\\n\\n    this.state = {\\n      enthusiasmLevel: props.enthusiasmLevel || 1,\\n    };\\n  }\\n\\n  onIncrement = () =>\\n    this.setState({\\n      enthusiasmLevel: this.state.enthusiasmLevel + 1,\\n    });\\n  onDecrement = () =>\\n    this.setState({\\n      enthusiasmLevel: this.state.enthusiasmLevel - 1,\\n    });\\n  getExclamationMarks = (numChars: number) =>\\n    Array(numChars + 1).join(\'!\');\\n\\n  render() {\\n    return (\\n      <View style={styles.root}>\\n        <Text style={styles.greeting}>\\n          Hello{\' \'}\\n          {this.props.name +\\n            this.getExclamationMarks(this.state.enthusiasmLevel)}\\n        </Text>\\n\\n        <View style={styles.buttons}>\\n          <View style={styles.button}>\\n            <Button\\n              title=\\"-\\"\\n              onPress={this.onDecrement}\\n              accessibilityLabel=\\"decrement\\"\\n              color=\\"red\\"\\n            />\\n          </View>\\n\\n          <View style={styles.button}>\\n            <Button\\n              title=\\"+\\"\\n              onPress={this.onIncrement}\\n              accessibilityLabel=\\"increment\\"\\n              color=\\"blue\\"\\n            />\\n          </View>\\n        </View>\\n      </View>\\n    );\\n  }\\n}\\n\\n// styles\\nconst styles = StyleSheet.create({\\n  root: {\\n    alignItems: \'center\',\\n    alignSelf: \'center\',\\n  },\\n  buttons: {\\n    flexDirection: \'row\',\\n    minHeight: 70,\\n    alignItems: \'stretch\',\\n    alignSelf: \'center\',\\n    borderWidth: 5,\\n  },\\n  button: {\\n    flex: 1,\\n    paddingVertical: 0,\\n  },\\n  greeting: {\\n    color: \'#999\',\\n    fontWeight: \'bold\',\\n  },\\n});\\n```\\n\\nWhoa! That\'s a lot, but let\'s break it down:\\n\\n- Instead of rendering HTML elements like `div`, `span`, `h1`, etc., we\'re rendering components like `View` and `Button`. These are native components that work across different platforms.\\n- Styling is specified using the `StyleSheet.create` function that React Native gives us. React\'s stylesheets allow us to control our layout using Flexbox, and style using other constructs similar to those in CSS.\\n\\n## Adding a Component Test\\n\\nNow that we\'ve got a component, let\'s try testing it.\\n\\nWe already have Jest installed as a test runner. We\'re going to write snapshot tests for our components, let\'s add the required add-on for snapshot tests:\\n\\n```sh\\nyarn add --dev react-addons-test-utils\\n```\\n\\nNow let\'s create a `__tests__` folder in the `components` directory and add a test for `Hello.tsx`:\\n\\n```ts\\n// components/__tests__/Hello.tsx\\nimport React from \'react\';\\nimport renderer from \'react-test-renderer\';\\n\\nimport {Hello} from \'../Hello\';\\n\\nit(\'renders correctly with defaults\', () => {\\n  const button = renderer\\n    .create(<Hello name=\\"World\\" enthusiasmLevel={1} />)\\n    .toJSON();\\n  expect(button).toMatchSnapshot();\\n});\\n```\\n\\nThe first time the test is run, it will create a snapshot of the rendered component and store it in the `components/__tests__/__snapshots__/Hello.tsx.snap` file. When you modify your component, you\'ll need to update the snapshots and review the update for inadvertent changes. You can read more about testing React Native components [here](https://facebook.github.io/jest/docs/en/tutorial-react-native.html).\\n\\n## Next Steps\\n\\nCheck out the official [React tutorial](https://reactjs.org/tutorial/tutorial.html) and state-management library [Redux](https://redux.js.org). These resources can be helpful when writing React Native apps. Additionally, you may want to look at [ReactXP](https://microsoft.github.io/reactxp/), a component library written entirely in TypeScript that supports both React on the web as well as React Native.\\n\\nHave fun in a more type-safe React Native development environment!"},{"id":"/2018/04/09/build-com-app","metadata":{"permalink":"/blog/2018/04/09/build-com-app","source":"@site/blog/2018-04-09-build-com-app.md","title":"Built with React Native - The Build.com app","description":"Build.com, headquartered in Chico, California, is one of the largest online retailers for home improvement items. The team has had a strong web-centric business for 18 years and began thinking about a mobile App in 2015. Building unique Android and iOS apps wasn\u2019t practical due to our small team and limited native experience. Instead, we decided to take a risk on the very new React Native framework. Our initial commit was on August 12, 2015 using React Native v0.8.0! We were live in both App Stores on October 15, 2016. Over the last two years, we\u2019ve continued to upgrade and expand the app. We are currently on React Native version 0.53.0.","date":"2018-04-09T00:00:00.000Z","formattedDate":"April 9, 2018","tags":[{"label":"showcase","permalink":"/blog/tags/showcase"}],"readingTime":4.97,"hasTruncateMarker":false,"authors":[{"name":"Garrett McCullough","title":"Senior Mobile Engineer","url":"https://twitter.com/gwmccull","imageURL":"https://pbs.twimg.com/profile_images/955503100785172486/UrMKkQXc_400x400.jpg"}],"frontMatter":{"title":"Built with React Native - The Build.com app","author":"Garrett McCullough","authorTitle":"Senior Mobile Engineer","authorURL":"https://twitter.com/gwmccull","authorImageURL":"https://pbs.twimg.com/profile_images/955503100785172486/UrMKkQXc_400x400.jpg","authorTwitter":"gwmccull","tags":["showcase"]},"unlisted":false,"prevItem":{"title":"Using TypeScript with React Native","permalink":"/blog/2018/05/07/using-typescript-with-react-native"},"nextItem":{"title":"Building <InputAccessoryView> For React Native","permalink":"/blog/2018/03/22/building-input-accessory-view-for-react-native"}},"content":"[Build.com](https://www.build.com/), headquartered in Chico, California, is one of the largest online retailers for home improvement items. The team has had a strong web-centric business for 18 years and began thinking about a mobile App in 2015. Building unique Android and iOS apps wasn\u2019t practical due to our small team and limited native experience. Instead, we decided to take a risk on the very new React Native framework. Our initial commit was on August 12, 2015 using React Native v0.8.0! We were live in both App Stores on October 15, 2016. Over the last two years, we\u2019ve continued to upgrade and expand the app. We are currently on React Native version 0.53.0.\\n\\nYou can check out the app at [https://www.build.com/app](https://www.build.com/app).\\n\\n<p align=\\"center\\">\\n  <img src=\\"/blog/assets/build-com-blog-image.jpg\\" />\\n</p>\\n\\n## Features\\n\\nOur app is full featured and includes everything that you\u2019d expect from an e-commerce app: product listings, search and sorting, the ability to configure complex products, favorites, etc. We accept standard credit card payment methods as well as PayPal, and Apple Pay for our iOS users.\\n\\nA few standout features you might not expect include:\\n\\n1. 3D models available for around 40 products with 90 finishes\\n2. Augmented Reality (AR) to allow the user to see how lights and faucets will look in their home at 98% size accuracy. The Build.com React Native App is featured in the Apple App Store for AR Shopping! AR is now available for Android and iOS!\\n3. Collaborative project management features that allow people to put together shopping lists for the different phases of their project and collaborate around selection\\n\\nWe\u2019re working on many new and exciting features that will continue to improve our app experience including the next phase of Immersive Shopping with AR.\\n\\n## Our Development Workflow\\n\\nBuild.com allows each dev to choose the tools that best suit them.\\n\\n- IDEs include Atom, IntelliJ, VS Code, Sublime, Eclipse, etc.\\n- For Unit testing, developers are responsible for creating Jest unit tests for any new components and we\u2019re working to increase the coverage of older parts of the app using `jest-coverage-ratchet`.\\n- We use Jenkins to build out our beta and release candidates. This process works well for us but still requires significant work to create the release notes and other artifacts.\\n- Integration Testing include a shared pool of testers that work across desktop, mobile and web. Our automation engineer is building out our suite of automated integration tests using Java and Appium.\\n- Other parts of the workflow include a detailed eslint configuration, custom rules that enforce properties needed for testing, and pre-push hooks that block offending changes.\\n\\n## Libraries Used in the App\\n\\nThe Build.com app relies on a number of common open source libraries including: Redux, Moment, Numeral, Enzyme and a bunch of React Native bridge modules. We also use a number of forked open source libraries; forked either because they were abandoned or because we needed custom features. A quick count shows around 115 JavaScript and native dependencies. We would like to explore tools that remove unused libraries.\\n\\nWe\'re in the process of adding static typing via TypeScript and looking into optional chaining. These features could help us with solving a couple classes of bugs that we still see:\\n\\n- Data that is the wrong type\\n- Data that is undefined because an object didn\u2019t contain what we expected\\n\\n## Open Source Contributions\\n\\nSince we rely so heavily on open source, our team is committed to contributing back to the community. Build.com allows the team to open source libraries that we\'ve built and encourages us contribute back to the libraries that we use.\\n\\nWe\u2019ve released and maintained a number of React Native libraries:\\n\\n- `react-native-polyfill`\\n- `react-native-simple-store`\\n- `react-native-contact-picker`\\n\\nWe have also contributed to a long list of libraries including: React and React Native, `react-native-schemes-manager`, `react-native-swipeable`, `react-native-gallery`, `react-native-view-transformer`, `react-native-navigation`.\\n\\n## Our Journey\\n\\nWe\u2019ve seen a lot of growth in React Native and the ecosystem in the past couple years. Early on, it seemed that every version of React Native would fix some bugs but introduce several more. For example, Remote JS Debugging was broken on Android for several months. Thankfully, things became much more stable in 2017.\\n\\n### Navigation Libraries\\n\\nOne of our big recurring challenges has been with navigation libraries. For a long time, we were using Expo\u2019s ex-nav library. It worked well for us but it was eventually deprecated. However, we were in heavy feature development at the time so taking time to change out a navigation library wasn\u2019t feasible. That meant we had to fork the library and patch it to support React 16 and the iPhone X. Eventually, we were able to migrate to [`react-native-navigation`](https://github.com/wix/react-native-navigation) and hopefully that will see continued support.\\n\\n### Bridge Modules\\n\\nAnother big challenge has been with bridge modules. When we first started, a lot of critical bridges were missing. One of my teammates wrote `react-native-contact-picker` because we needed access to the Android contact picker in our app. We\u2019ve also seen a lot of bridges that were broken by changes within React Native. For example, there was a breaking change within React Native v40 and when we upgraded our app, I had to submit PRs to fix 3 or 4 libraries that had not yet been updated.\\n\\n## Looking Forward\\n\\nAs React Native continues to grow, our wishlist to our community include:\\n\\n- Stabilize and improve the navigation libraries\\n- Maintain support for libraries in the React Native ecosystem\\n- Improve the experience for adding native libraries and bridge modules to a project\\n\\nCompanies and individuals in the React Native community have been great about volunteering their time and effort to improve the tools that we all use. If you haven\u2019t gotten involved in open source, I hope you\u2019ll take a look at improving the code or documentation for some of the libraries that you use. There are a lot of articles to help you get started and it may be a lot easier than you think!"},{"id":"/2018/03/22/building-input-accessory-view-for-react-native","metadata":{"permalink":"/blog/2018/03/22/building-input-accessory-view-for-react-native","source":"@site/blog/2018-03-22-building-input-accessory-view-for-react-native.md","title":"Building <InputAccessoryView> For React Native","description":"Motivation","date":"2018-03-22T00:00:00.000Z","formattedDate":"March 22, 2018","tags":[{"label":"engineering","permalink":"/blog/tags/engineering"}],"readingTime":5.835,"hasTruncateMarker":false,"authors":[{"name":"Peter Argany","title":"Software Engineer at Facebook","url":"https://github.com/PeteTheHeat","imageURL":"https://avatars3.githubusercontent.com/u/6011080?s=400&u=028e28081107d0ab16a5cb22baca43c080f5fa50&v=4"}],"frontMatter":{"title":"Building <InputAccessoryView> For React Native","author":"Peter Argany","authorTitle":"Software Engineer at Facebook","authorURL":"https://github.com/PeteTheHeat","authorImageURL":"https://avatars3.githubusercontent.com/u/6011080?s=400&u=028e28081107d0ab16a5cb22baca43c080f5fa50&v=4","authorTwitter":"peterargany","tags":["engineering"]},"unlisted":false,"prevItem":{"title":"Built with React Native - The Build.com app","permalink":"/blog/2018/04/09/build-com-app"},"nextItem":{"title":"Using AWS with React Native","permalink":"/blog/2018/03/05/AWS-app-sync"}},"content":"## Motivation\\n\\nThree years ago, a GitHub issue was opened to support input accessory view from React Native.\\n\\n<img src=\\"/blog/assets/input-accessory-1.png\\" />\\n\\nIn the ensuing years, there have been countless \'+1s\', various workarounds, and zero concrete changes to RN on this issue - until today. Starting with iOS, [we\'re exposing an API](/docs/inputaccessoryview) for accessing the native input accessory view and we are excited to share how we built it.\\n\\n## Background\\n\\nWhat exactly is an input accessory view? Reading [Apple\'s developer documentation](https://developer.apple.com/documentation/uikit/uiresponder/1621119-inputaccessoryview?language=objc), we learn that it\'s a custom view which can be anchored to the top of the system keyboard whenever a receiver becomes the first responder. Anything that inherits from `UIResponder` can redeclare the `.inputAccessoryView` property as read-write, and manage a custom view here. The responder infrastructure mounts the view, and keeps it in sync with the system keyboard. Gestures which dismiss the keyboard, like a drag or tap, are applied to the input accessory view at the framework level. This allows us to build content with interactive keyboard dismissal, an integral feature in top-tier messaging apps like iMessage and WhatsApp.\\n\\nThere are two common use cases for anchoring a view to the top of the keyboard. The first is creating a keyboard toolbar, like the Facebook composer background picker.\\n\\n<img src=\\"/blog/assets/input-accessory-2.gif\\" style={{float: \'left\', paddingRight: 70, paddingTop: 20}} />\\n\\nIn this scenario, the keyboard is focused on a text input field, and the input accessory view is used to provide additional keyboard functionality. This functionality is contextual to the type of input field. In a mapping application it could be address suggestions, or in a text editor, it could be rich text formatting tools.\\n\\n<hr style={{clear: \'both\', marginBottom: 20}} />\\n\\nThe Objective-C UIResponder who owns the `<InputAccessoryView>` in this scenario should be clear. The `<TextInput>` has become first responder, and under the hood this becomes an instance of `UITextView` or `UITextField`.\\n\\nThe second common scenario is sticky text inputs:\\n\\n<img src=\\"/blog/assets/input-accessory-3.gif\\" style={{float: \'left\', paddingRight: 70, paddingTop: 20}} />\\n\\nHere, the text input is actually part of the input accessory view itself. This is commonly used in messaging applications, where a message can be composed while scrolling through a thread of previous messages.\\n\\n<hr style={{clear: \'both\', marginBottom: 20}} />\\n\\nWho owns the `<InputAccessoryView>` in this example? Can it be the `UITextView` or `UITextField` again? The text input is _inside_ the input accessory view, this sounds like a circular dependency. Solving this issue alone is [another blog post](https://derpturkey.com/uitextfield-docked-like-ios-messenger/) in itself. Spoilers: the owner is a generic `UIView` subclass who we manually tell to [becomeFirstResponder](https://developer.apple.com/documentation/uikit/uiresponder/1621113-becomefirstresponder?language=objc).\\n\\n## API Design\\n\\nWe now know what an `<InputAccessoryView>` is, and how we want to use it. The next step is designing an API that makes sense for both use cases, and works well with existing React Native components like `<TextInput>`.\\n\\nFor keyboard toolbars, there are a few things we want to consider:\\n\\n1. We want to be able to hoist any generic React Native view hierarchy into the `<InputAccessoryView>`.\\n2. We want this generic and detached view hierarchy to accept touches and be able to manipulate application state.\\n3. We want to link an `<InputAccessoryView>` to a particular `<TextInput>`.\\n4. We want to be able to share an `<InputAccessoryView>` across multiple text inputs, without duplicating any code.\\n\\nWe can achieve #1 using a concept similar to [React portals](https://reactjs.org/docs/portals.html). In this design, we portal React Native views to a `UIView` hierarchy managed by the responder infrastructure. Since React Native views render as UIViews, this is actually quite straightforward - we can just override:\\n\\n`- (void)insertReactSubview:(UIView *)subview atIndex:(NSInteger)atIndex`\\n\\nand pipe all the subviews to a new UIView hierarchy. For #2, we set up a new [RCTTouchHandler](https://github.com/facebook/react-native/blob/master/React/Base/RCTTouchHandler.h) for the `<InputAccessoryView>`. State updates are achieved by using regular event callbacks. For #3 and #4, we use the [nativeID](https://github.com/facebook/react-native/blob/master/React/Views/UIView%2BReact.h#L28) field to locate the accessory view UIView hierarchy in native code during the creation of a `<TextInput>` component. This function uses the `.inputAccessoryView` property of the underlying native text input. Doing this effectively links `<InputAccessoryView>` to `<TextInput>` in their ObjC implementations.\\n\\nSupporting sticky text inputs (scenario 2) adds a few more constraints. For this design, the input accessory view has a text input as a child, so linking via nativeID is not an option. Instead, we set the `.inputAccessoryView` of a generic off-screen `UIView` to our native `<InputAccessoryView>` hierarchy. By manually telling this generic `UIView` to become first responder, the hierarchy is mounted by responder infrastructure. This concept is explained thoroughly in the aforementioned blog post.\\n\\n## Pitfalls\\n\\nOf course not everything was smooth sailing while building this API. Here are a few pitfalls we encountered, along with how we fixed them.\\n\\nAn initial idea for building this API involved listening to `NSNotificationCenter` for UIKeyboardWill(Show/Hide/ChangeFrame) events. This pattern is used in some open-sourced libraries, and internally in some parts of the Facebook app. Unfortunately, `UIKeyboardDidChangeFrame` events were not being called in time to update the `<InputAccessoryView>` frame on swipes. Also, changes in keyboard height are not captured by these events. This creates a class of bugs that manifest like this:\\n\\n<img src=\\"/blog/assets/input-accessory-4.gif\\" style={{float: \'left\', paddingRight: 70, paddingTop: 20}} />\\n\\nOn iPhone X, text and emoji keyboard are different heights. Most applications using keyboard events to manipulate text input frames had to fix the above bug. Our solution was to commit to using the `.inputAccessoryView` property, which meant that the responder infrastructure handles frame updates like this.\\n\\n<hr style={{clear: \'both\', marginBottom: 20}} />\\n\\nAnother tricky bug we encountered was avoiding the home pill on iPhone X. You may be thinking, \u201cApple developed [safeAreaLayoutGuide](https://developer.apple.com/documentation/uikit/uiview/2891102-safearealayoutguide?language=objc) for this very reason, this is trivial!\u201d. We were just as naive. The first issue is that the native `<InputAccessoryView>` implementation has no window to anchor to until the moment it is about to appear. That\'s alright, we can override `-(BOOL)becomeFirstResponder` and enforce layout constraints there. Adhering to these constraints bumps the accessory view up, but another bug arises: <img src=\\"/blog/assets/input-accessory-5.gif\\" style={{float: \'left\', paddingRight: 70, paddingTop: 20}} />\\n\\nThe input accessory view successfully avoids the home pill, but now content behind the unsafe area is visible. The solution lies in this [radar](https://www.openradar.me/34411433). I wrapped the native `<InputAccessoryView>` hierarchy in a container which doesn\'t conform to the `safeAreaLayoutGuide` constraints. The native container covers the content in the unsafe area, while the `<InputAccessoryView>` stays within the safe area boundaries.\\n\\n<hr style={{clear: \'both\', marginBottom: 20}} />\\n\\n## Example Usage\\n\\nHere\'s an example which builds a keyboard toolbar button to reset `<TextInput>` state.\\n\\n```jsx\\nclass TextInputAccessoryViewExample extends React.Component<\\n  {},\\n  *,\\n> {\\n  constructor(props) {\\n    super(props);\\n    this.state = {text: \'Placeholder Text\'};\\n  }\\n\\n  render() {\\n    const inputAccessoryViewID = \'inputAccessoryView1\';\\n    return (\\n      <View>\\n        <TextInput\\n          style={styles.default}\\n          inputAccessoryViewID={inputAccessoryViewID}\\n          onChangeText={text => this.setState({text})}\\n          value={this.state.text}\\n        />\\n        <InputAccessoryView nativeID={inputAccessoryViewID}>\\n          <View style={{backgroundColor: \'white\'}}>\\n            <Button\\n              onPress={() =>\\n                this.setState({text: \'Placeholder Text\'})\\n              }\\n              title=\\"Reset Text\\"\\n            />\\n          </View>\\n        </InputAccessoryView>\\n      </View>\\n    );\\n  }\\n}\\n```\\n\\nAnother example for [Sticky Text Inputs can be found in the repository](https://github.com/facebook/react-native/blob/84ef7bc372ad870127b3e1fb8c13399fe09ecd4d/RNTester/js/InputAccessoryViewExample.js).\\n\\n## When will I be able to use this?\\n\\nThe full commit for this feature implementation is [here](https://github.com/facebook/react-native/commit/38197c8230657d567170cdaf8ff4bbb4aee732b8). [`<InputAccessoryView>`](/docs/next/inputaccessoryview) will be available in the upcoming v0.55.0 release.\\n\\nHappy keyboarding :)"},{"id":"/2018/03/05/AWS-app-sync","metadata":{"permalink":"/blog/2018/03/05/AWS-app-sync","source":"@site/blog/2018-03-05-AWS-app-sync.md","title":"Using AWS with React Native","description":"AWS is well known in the technology industry as a provider of cloud services. These include compute, storage, and database technologies, as well as fully managed serverless offerings. The AWS Mobile team has been working closely with customers and members of the JavaScript ecosystem to make cloud-connected mobile and web applications more secure, scalable, and easier to develop and deploy. We began with a complete starter kit, but have a few more recent developments.","date":"2018-03-05T00:00:00.000Z","formattedDate":"March 5, 2018","tags":[{"label":"engineering","permalink":"/blog/tags/engineering"}],"readingTime":8.8,"hasTruncateMarker":false,"authors":[{"name":"Richard Threlkeld","title":"Senior Technical Product Manager at AWS Mobile","url":"https://twitter.com/undef_obj","imageURL":"https://pbs.twimg.com/profile_images/811239086581227520/APX1eZwF_400x400.jpg"}],"frontMatter":{"title":"Using AWS with React Native","author":"Richard Threlkeld","authorTitle":"Senior Technical Product Manager at AWS Mobile","authorURL":"https://twitter.com/undef_obj","authorImageURL":"https://pbs.twimg.com/profile_images/811239086581227520/APX1eZwF_400x400.jpg","authorTwitter":"undef_obj","tags":["engineering"]},"unlisted":false,"prevItem":{"title":"Building <InputAccessoryView> For React Native","permalink":"/blog/2018/03/22/building-input-accessory-view-for-react-native"},"nextItem":{"title":"Implementing Twitter\u2019s App Loading Animation in React Native","permalink":"/blog/2018/01/18/implementing-twitters-app-loading-animation-in-react-native"}},"content":"AWS is well known in the technology industry as a provider of cloud services. These include compute, storage, and database technologies, as well as fully managed serverless offerings. The AWS Mobile team has been working closely with customers and members of the JavaScript ecosystem to make cloud-connected mobile and web applications more secure, scalable, and easier to develop and deploy. We began with a [complete starter kit](https://github.com/awslabs/aws-mobile-react-native-starter), but have a few more recent developments.\\n\\nThis blog post talks about some interesting things for React and React Native developers:\\n\\n- [**AWS Amplify**](https://github.com/aws/aws-amplify), a declarative library for JavaScript applications using cloud services\\n- [**AWS AppSync**](https://aws.amazon.com/appsync/), a fully managed GraphQL service with offline and real-time features\\n\\n## AWS Amplify\\n\\nReact Native applications are very easy to bootstrap using tools like Create React Native App and Expo. However, connecting them to the cloud can be challenging to navigate when you try to match a use case to infrastructure services. For example, your React Native app might need to upload photos. Should these be protected per user? That probably means you need some sort of registration or sign-in process. Do you want your own user directory or are you using a social media provider? Maybe your app also needs to call an API with custom business logic after users log in.\\n\\nTo help JavaScript developers with these problems, we released a library named AWS Amplify. The design is broken into \\"categories\\" of tasks, instead of AWS-specific implementations. For example, if you wanted users to register, log in, and then upload private photos, you would simply pull in `Auth` and `Storage` categories to your application:\\n\\n```\\nimport { Auth } from \'aws-amplify\';\\n\\nAuth.signIn(username, password)\\n    .then(user => console.log(user))\\n    .catch(err => console.log(err));\\n\\nAuth.confirmSignIn(user, code)\\n    .then(data => console.log(data))\\n    .catch(err => console.log(err));\\n```\\n\\nIn the code above, you can see an example of some of the common tasks that Amplify helps you with, such as using multi-factor authentication (MFA) codes with either email or SMS. The supported categories today are:\\n\\n- **Auth**: Provides credential automation. Out-of-the-box implementation uses AWS credentials for signing, and OIDC JWT tokens from [Amazon Cognito](https://aws.amazon.com/cognito/). Common functionality, such as MFA features, is supported.\\n- **Analytics**: With a single line of code, get tracking for authenticated or unauthenticated users in [Amazon Pinpoint](https://aws.amazon.com/pinpoint/). Extend this for custom metrics or attributes, as you prefer.\\n- **API**: Provides interaction with RESTful APIs in a secure manner, leveraging [AWS Signature Version 4](https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html). The API module is great on serverless infrastructures with [Amazon API Gateway](https://aws.amazon.com/api-gateway/).\\n- **Storage**: Simplified commands to upload, download, and list content in [Amazon S3](https://aws.amazon.com/s3/). You can also easily group data into public or private content on a per-user basis.\\n- **Caching**: An LRU cache interface across web apps and React Native that uses implementation-specific persistence.\\n- **i18n and Logging**: Provides internationalization and localization capabilities, as well as debugging and logging capabilities.\\n\\nOne of the nice things about Amplify is that it encodes \\"best practices\\" in the design for your specific programming environment. For example, one thing we found working with customers and React Native developers is that shortcuts taken during development to get things working quickly would make it through to production stacks. These can compromise either scalability or security, and force infrastructure rearchitecture and code refactoring.\\n\\nOne example of how we help developers avoid this is the [Serverless Reference Architectures with AWS Lambda](https://www.allthingsdistributed.com/2016/06/aws-lambda-serverless-reference-architectures.html). These show you best practices around using Amazon API Gateway and AWS Lambda together when building your backend. This pattern is encoded into the `API` category of Amplify. You can use this pattern to interact with several different REST endpoints, and pass headers all the way through to your Lambda function for custom business logic. We\u2019ve also released an [AWS Mobile CLI](https://docs.aws.amazon.com/aws-mobile/latest/developerguide/react-native-getting-started.html) for bootstrapping new or existing React Native projects with these features. To get started, just install via **npm**, and follow the configuration prompts:\\n\\n```\\nnpm install --global awsmobile-cli\\nawsmobile configure\\n```\\n\\nAnother example of encoded best practices that is specific to the mobile ecosystem is password security. The default `Auth` category implementation leverages Amazon Cognito user pools for user registration and sign-in. This service implements [Secure Remote Password protocol](https://srp.stanford.edu) as a way of protecting users during authentication attempts. If you\'re inclined to read through the [mathematics of the protocol](https://srp.stanford.edu/ndss.html#SECTION00032200000000000000), you\'ll notice that you must use a large prime number when calculating the password verifier over a primitive root to generate a Group. In React Native environments, [JIT is disabled](/docs/javascript-environment). This makes BigInteger calculations for security operations such as this less performant. To account for this, we\'ve released native bridges in Android and iOS that you can link inside your project:\\n\\n```\\nnpm install --save aws-amplify-react-native\\nreact-native link amazon-cognito-identity-js\\n```\\n\\nWe\'re also excited to see that the Expo team has included this [in their latest SDK](https://blog.expo.io/expo-sdk-v25-0-0-is-now-available-714d10a8c3f7) so that you can use Amplify without ejecting.\\n\\nFinally, specific to React Native (and React) development, Amplify contains [higher order components (HOCs)](https://reactjs.org/docs/higher-order-components.html) for easily wrapping functionality, such as for sign-up and sign-in to your app:\\n\\n```\\nimport Amplify, { withAuthenticator } from \'aws-amplify-react-native\';\\nimport aws_exports from \'./aws-exports\';\\n\\nAmplify.configure(aws_exports);\\n\\nclass App extends React.Component {\\n...\\n}\\n\\nexport default withAuthenticator(App);\\n```\\n\\nThe underlying component is also provided as `<Authenticator />`, which gives you full control to customize the UI. It also gives you some properties around managing the state of the user, such as if they\'ve signed in or are waiting for MFA confirmation, and callbacks that you can fire when state changes.\\n\\nSimilarly, you\'ll find general React components that you can use for different use cases. You can customize these to your needs, for example, to show all private images from Amazon S3 in the `Storage` module:\\n\\n```\\n<S3Album\\n  level=\\"private\\"\\n  path={path}\\n  filter={(item) => /jpg/i.test(item.path)}/>\\n```\\n\\nYou can control many of the component features via props, as shown earlier, with public or private storage options. There are even capabilities to automatically gather analytics when users interact with certain UI components:\\n\\n```\\nreturn <S3Album track/>\\n```\\n\\nAWS Amplify favors a convention over configuration style of development, with a global initialization routine or initialization at the category level. The quickest way to get started is with an [aws-exports file](https://aws.amazon.com/blogs/mobile/enhanced-javascript-development-with-aws-mobile-hub/). However, developers can also use the library independently with existing resources.\\n\\nFor a deep dive into the philosophy and to see a full demo, check out the video from [AWS re\\\\:Invent](https://www.youtube.com/watch?v=vAjf3lyjf8c).\\n\\n## AWS AppSync\\n\\nShortly after the launch of AWS Amplify, we also released [AWS AppSync](https://aws.amazon.com/appsync/). This is a fully managed GraphQL service that has both offline and real-time capabilities. Although you can use GraphQL in different client programming languages (including native Android and iOS), it\'s quite popular among React Native developers. This is because the data model fits nicely into a unidirectional data flow and component hierarchy.\\n\\nAWS AppSync enables you to connect to resources in your own AWS account, meaning you own and control your data. This is done by using data sources, and the service supports [Amazon DynamoDB](https://aws.amazon.com/dynamodb/), [Amazon Elasticsearch](https://aws.amazon.com/elasticsearch-service/), and [AWS Lambda](https://aws.amazon.com/lambda/). This enables you to combine functionality (such as NoSQL and full-text search) in a single GraphQL API as a schema. This enables you to mix and match data sources. The AppSync service can also [provision from a schema](https://docs.aws.amazon.com/appsync/latest/devguide/provision-from-schema.html), so if you aren\'t familiar with AWS services, you can write GraphQL SDL, click a button, and you\'re automatically up and running.\\n\\nThe real-time functionality in AWS AppSync is controlled via [GraphQL subscriptions with a well-known, event-based pattern](https://graphql.org/blog/subscriptions-in-graphql-and-relay/). Because subscriptions in AWS AppSync are [controlled on the schema](https://docs.aws.amazon.com/appsync/latest/devguide/real-time-data.html) with a GraphQL directive, and a schema can use any data source, this means you can trigger notifications from database operations with Amazon DynamoDB and Amazon Elasticsearch Service, or from other parts of your infrastructure with AWS Lambda.\\n\\nIn a way similar to AWS Amplify, you can use [enterprise security features](https://docs.aws.amazon.com/appsync/latest/devguide/security.html) on your GraphQL API with AWS AppSync. The service lets you get started quickly with API keys. However, as you roll to production it can transition to using AWS Identity and Access Management (IAM) or OIDC tokens from Amazon Cognito user pools. You can control access at the resolver level with policies on types. You can even use logical checks for [fine-grained access control](https://docs.aws.amazon.com/appsync/latest/devguide/security.html#fine-grained-access-control) checks at run time, such as detecting if a user is the owner of a specific database resource. There are also capabilities around checking group membership for executing resolvers or individual database record access.\\n\\nTo help React Native developers learn more about these technologies, there is a [built-in GraphQL sample schema](https://docs.aws.amazon.com/appsync/latest/devguide/quickstart.html) that you can launch on the AWS AppSync console homepage. This sample deploys a GraphQL schema, provisions database tables, and connects queries, mutations, and subscriptions automatically for you. There is also a functioning [React Native example for AWS AppSync](https://github.com/aws-samples/aws-mobile-appsync-events-starter-react-native) which leverages this built in schema (as well as a [React example](https://github.com/aws-samples/aws-mobile-appsync-events-starter-react)), which enable you to get both your client and cloud components running in minutes.\\n\\nGetting started is simple when you use the `AWSAppSyncClient`, which plugs in to the [Apollo Client](https://github.com/apollographql/apollo-client). The `AWSAppSyncClient` handles security and signing for your GraphQL API, offline functionality, and the subscription handshake and negotiation process:\\n\\n```\\nimport AWSAppSyncClient from \\"aws-appsync\\";\\nimport { Rehydrated } from \'aws-appsync-react\';\\nimport { AUTH_TYPE } from \\"aws-appsync/lib/link/auth-link\\";\\n\\nconst client = new AWSAppSyncClient({\\n  url: awsconfig.graphqlEndpoint,\\n  region: awsconfig.region,\\n  auth: {type: AUTH_TYPE.API_KEY, apiKey: awsconfig.apiKey}\\n});\\n```\\n\\nThe AppSync console provides a configuration file for download, which contains your GraphQL endpoint, AWS Region, and API key. You can then use the client with [React Apollo](https://github.com/apollographql/react-apollo):\\n\\n```\\nconst WithProvider = () => (\\n  <ApolloProvider client={client}>\\n      <Rehydrated>\\n          <App />\\n      </Rehydrated>\\n  </ApolloProvider>\\n);\\n```\\n\\nAt this point, you can use standard GraphQL queries:\\n\\n```\\nquery ListEvents {\\n    listEvents{\\n      items{\\n        __typename\\n        id\\n        name\\n        where\\n        when\\n        description\\n        comments{\\n          __typename\\n          items{\\n            __typename\\n            eventId\\n            commentId\\n            content\\n            createdAt\\n          }\\n          nextToken\\n        }\\n      }\\n    }\\n}\\n```\\n\\nThe example above shows a query with the sample app schema provisioned by AppSync. It not only showcases interaction with DynamoDB, but also includes pagination of data (including encrypted tokens) and type relations between `Events` and `Comments`. Because the app is configured with the `AWSAppSyncClient`, data is automatically persisted offline and will synchronize when devices reconnect.\\n\\nYou can see a deep dive of the [client technology behind this and a React Native demo in this video](https://www.youtube.com/watch?v=FtkVlIal_m0).\\n\\n<iframe\\n  width=\\"560\\"\\n  height=\\"315\\"\\n  src=\\"https://www.youtube-nocookie.com/embed/FtkVlIal_m0?rel=0\\"\\n  frameborder=\\"0\\"\\n  allow=\\"autoplay; encrypted-media\\"\\n  allowfullscreen></iframe>\\n\\n## Feedback\\n\\nThe team behind the libraries is eager to hear how these libraries and services work for you. They also want to hear what else we can do to make React and React Native development with cloud services easier for you. Reach out to the AWS Mobile team on GitHub for [AWS Amplify](https://github.com/aws/aws-amplify) or [AWS AppSync](https://github.com/aws-samples/aws-mobile-appsync-events-starter-react-native)."},{"id":"/2018/01/18/implementing-twitters-app-loading-animation-in-react-native","metadata":{"permalink":"/blog/2018/01/18/implementing-twitters-app-loading-animation-in-react-native","source":"@site/blog/2018-01-18-implementing-twitters-app-loading-animation-in-react-native.md","title":"Implementing Twitter\u2019s App Loading Animation in React Native","description":"Twitter\u2019s iOS app has a loading animation I quite enjoy.","date":"2018-01-18T00:00:00.000Z","formattedDate":"January 18, 2018","tags":[{"label":"engineering","permalink":"/blog/tags/engineering"}],"readingTime":10.835,"hasTruncateMarker":false,"authors":[{"name":"Eli White","title":"Software Engineer at Facebook","url":"https://github.com/TheSavior","imageURL":"https://avatars2.githubusercontent.com/u/249164?s=460&v=4"}],"frontMatter":{"title":"Implementing Twitter\u2019s App Loading Animation in React Native","author":"Eli White","authorTitle":"Software Engineer at Facebook","authorURL":"https://github.com/TheSavior","authorImageURL":"https://avatars2.githubusercontent.com/u/249164?s=460&v=4","authorTwitter":"eli_white","tags":["engineering"]},"unlisted":false,"prevItem":{"title":"Using AWS with React Native","permalink":"/blog/2018/03/05/AWS-app-sync"},"nextItem":{"title":"React Native Monthly #6","permalink":"/blog/2018/01/09/react-native-monthly-6"}},"content":"Twitter\u2019s iOS app has a loading animation I quite enjoy.\\n\\n<img src=\\"/blog/assets/loading-screen-01.gif\\" style={{float: \'left\', paddingRight: 80, paddingBottom: 20}} />\\n\\nOnce the app is ready, the Twitter logo delightfully expands, revealing the app.\\n\\nI wanted to figure out how to recreate this loading animation with React Native.\\n\\n<hr style={{clear: \'both\', marginBottom: 40, width: 80}} />\\n\\nTo understand _how_ to build it, I first had to understand the difference pieces of the loading animation. The easiest way to see the subtlety is to slow it down.\\n\\n<img src=\\"/blog/assets/loading-screen-02.gif\\" style={{marginTop: 20, float: \'left\', paddingRight: 80, paddingBottom: 20}} />\\n\\nThere are a few major pieces in this that we will need to figure out how to build.\\n\\n1. Scaling the bird.\\n1. As the bird grows, showing the app underneath\\n1. Scaling the app down slightly at the end\\n\\nIt took me quite a while to figure out how to make this animation.\\n\\nI started with an _incorrect_ assumption that the blue background and Twitter bird were a layer on _top_ of the app and that as the bird grew, it became transparent which revealed the app underneath. This approach doesn\u2019t work because the Twitter bird becoming transparent would show the blue layer, not the app underneath!\\n\\nLuckily for you, dear reader, you don\u2019t have to go through the same frustration I did. You get this nice tutorial skipping to the good stuff!\\n\\n<hr style={{clear: \'both\', marginBottom: 40, width: 80}} />\\n\\n## The right way\\n\\nBefore we get to code, it is important to understand how to break this down. To help visualize this effect, I recreated it in [CodePen](https://codepen.io/TheSavior/pen/NXNoJM) (embedded in a few paragraphs) so you can interactively see the different layers.\\n\\n<img src=\\"/blog/assets/loading-screen-03.png\\" style={{float: \'left\', paddingRight: 80, paddingBottom: 20}} />\\n\\nThere are three main layers to this effect. The first is the blue background layer. Even though this seems to appear on top of the app, it is actually in the back.\\n\\nWe then have a plain white layer. And then lastly, in the very front, is our app.\\n\\n<hr style={{clear: \'both\', marginBottom: 40, width: 80}} />\\n<img src=\\"/blog/assets/loading-screen-04.png\\" style={{float: \'left\', paddingRight: 80, paddingBottom: 20}} />\\n\\nThe main trick to this animation is using the Twitter logo as a `mask` and masking both the app, and the white layer. I won\u2019t go too deep on the details of masking, there are [plenty](https://www.html5rocks.com/en/tutorials/masking/adobe/) of [resources](https://designshack.net/articles/graphics/a-complete-beginners-guide-to-masking-in-photoshop/) [online](https://www.sketchapp.com/docs/shapes/masking/) for that.\\n\\nThe basics of masking in this context are having images where opaque pixels of the mask show the content they are masking whereas transparent pixels of the mask hide the content they are masking.\\n\\nWe use the Twitter logo as a mask, and having it mask two layers; the solid white layer, and the app layer.\\n\\nTo reveal the app, we scale the mask up until it is larger than the entire screen.\\n\\nWhile the mask is scaling up, we fade in the opacity of the app layer, showing the app and hiding the solid white layer behind it. To finish the effect, we start the app layer at a scale > 1, and scale it down to 1 as the animation is ending. We then hide the non-app layers as they will never be seen again.\\n\\nThey say a picture is worth 1,000 words. How many words is an interactive visualization worth? Click through the animation with the \u201cNext Step\u201d button. Showing the layers gives you a side view perspective. The grid is there to help visualize the transparent layers.\\n\\n<iframe\\n  height=\\"750\\"\\n  scrolling=\\"no\\"\\n  title=\\"Loading Screen Animation Steps\\"\\n  src=\\"//codepen.io/TheSavior/embed/NXNoJM/?height=265&theme-id=0&default-tab=result&embed-version=2\\"\\n  frameborder=\\"no\\"\\n  allowFullScreen={true}\\n  className=\\"codepen\\">\\n  See the Pen{\' \'}\\n  <a href=\\"https://codepen.io/TheSavior/pen/NXNoJM/\\">\\n    Loading Screen Animation Steps\\n  </a>\\n  {\' \'}by Eli White (\\n  <a href=\\"https://codepen.io/TheSavior\\">@TheSavior</a>) on{\' \'}\\n  <a href=\\"https://codepen.io\\">CodePen</a>.\\n</iframe>\\n\\n## Now, for the React Native\\n\\nAlrighty. Now that we know what we are building and how the animation works, we can get down to the code \u2014 the reason you are really here.\\n\\nThe main piece of this puzzle is [MaskedViewIOS](https://reactnative.dev/docs/0.63/maskedviewios), a core React Native component.\\n\\n```jsx\\nimport {MaskedViewIOS} from \'react-native\';\\n\\n<MaskedViewIOS maskElement={<Text>Basic Mask</Text>}>\\n  <View style={{backgroundColor: \'blue\'}} />\\n</MaskedViewIOS>;\\n```\\n\\n`MaskedViewIOS` takes props `maskElement` and `children`. The children are masked by the `maskElement`. Note that the mask doesn\u2019t need to be an image, it can be any arbitrary view. The behavior of the above example would be to render the blue view, but for it to be visible only where the words \u201cBasic Mask\u201d are from the `maskElement`. We just made complicated blue text.\\n\\nWhat we want to do is render our blue layer, and then on top render our masked app and white layers with the Twitter logo.\\n\\n```jsx\\n{\\n  fullScreenBlueLayer;\\n}\\n<MaskedViewIOS\\n  style={{flex: 1}}\\n  maskElement={\\n    <View style={styles.centeredFullScreen}>\\n      <Image source={twitterLogo} />\\n    </View>\\n  }>\\n  {fullScreenWhiteLayer}\\n  <View style={{flex: 1}}>\\n    <MyApp />\\n  </View>\\n</MaskedViewIOS>;\\n```\\n\\nThis will give us the layers we see below.\\n\\n<img src=\\"/blog/assets/loading-screen-04.png\\" style={{marginLeft: \'auto\', marginRight: \'auto\', display: \'block\'}} />\\n\\n## Now for the Animated part\\n\\nWe have all the pieces we need to make this work, the next step is animating them. To make this animation feel good, we will be utilizing React Native\u2019s [Animated](/docs/animated) API.\\n\\nAnimated lets us define our animations declaratively in JavaScript. By default, these animations run in JavaScript and tell the native layer what changes to make on every frame. Even though JavaScript will try to update the animation every frame, it will likely not be able to do that fast enough and will cause dropped frames (jank) to occur. Not what we want!\\n\\nAnimated has special behavior to allow you to get animations without this jank. Animated has a flag called `useNativeDriver` which sends your animation definition from JavaScript to native at the beginning of your animation, allowing the native side to process the updates to your animation without having to go back and forth to JavaScript every frame. The downside of `useNativeDriver` is you can only update a specific set of properties, mostly `transform` and `opacity`. You can\u2019t animate things like background color with `useNativeDriver`, at least not yet \u2014 we will add more over time, and of course you can always submit a PR for properties you need for your project, benefitting the whole community \ud83d\ude00.\\n\\nSince we want this animation to be smooth, we will work within these constraints. For a more in depth look at how `useNativeDriver` works under the hood, check out our [blog post announcing it](/blog/2017/02/14/using-native-driver-for-animated).\\n\\n## Breaking down our animation\\n\\nThere are 4 components to our animation:\\n\\n1. Enlarge the bird, revealing the app and the solid white layer\\n1. Fade in the app\\n1. Scale down the app\\n1. Hide the white layer and blue layer when it is done\\n\\nWith Animated, there are two main ways to define your animation. The first is by using `Animated.timing` which lets you say exactly how long your animation will run for, along with an easing curve to smooth out the motion. The other approach is by using the physics based apis such as `Animated.spring`. With `Animated.spring`, you specify parameters like the amount of friction and tension in the spring, and let physics run your animation.\\n\\nWe have multiple animations we want to be running at the same time which are all closely related to each other. For example, we want the app to start fading in while the mask is mid-reveal. Because these animations are closely related, we will use `Animated.timing` with a single `Animated.Value`.\\n\\n`Animated.Value` is a wrapper around a native value that Animated uses to know the state of an animation. You typically want to only have one of these for a complete animation. Most components that use Animated will store the value in state.\\n\\nSince I\u2019m thinking about this animation as steps occurring at different points in time along the complete animation, we will start our `Animated.Value` at 0, representing 0% complete, and end our value at 100, representing 100% complete.\\n\\nOur initial component state will be the following.\\n\\n```jsx\\nstate = {\\n  loadingProgress: new Animated.Value(0),\\n};\\n```\\n\\nWhen we are ready to begin the animation, we tell Animated to animate this value to 100.\\n\\n```jsx\\nAnimated.timing(this.state.loadingProgress, {\\n  toValue: 100,\\n  duration: 1000,\\n  useNativeDriver: true, // This is important!\\n}).start();\\n```\\n\\nI then try to figure out a rough estimate of the different pieces of the animations and the values I want them to have at different stages of the overall animation. Below is a table of the different pieces of the animation, and what I think their values should be at different points as we progress through time.\\n\\n![](/blog/assets/loading-screen-05.png)\\n\\nThe Twitter bird mask should start at scale 1, and it gets smaller before it shoots up in size. So at 10% through the animation, it should have a scale value of .8 before shooting up to scale 70 at the end. Picking 70 was pretty arbitrary to be honest, it needed to be large enough that the bird fully revealed the screen and 60 wasn\u2019t big enough \ud83d\ude00. Something interesting about this part though is that the higher the number, the faster it will look like it is growing because it has to get there in the same amount of time. This number took some trial and error to make look good with this logo. Logos / devices of different sizes will require this end-scale to be different to ensure the entire screen is revealed.\\n\\nThe app should stay opaque for a while, at least through the Twitter logo getting smaller. Based on the official animation, I want to start showing it when the bird is mid way through scaling it up and to fully reveal it pretty quickly. So at 15% we start showing it, and at 30% through the overall animation it is fully visible.\\n\\nThe app scale starts at 1.1 and scales down to its regular scale by the end of the animation.\\n\\n## And now, in code.\\n\\nWhat we essentially did above is map the values from the animation progress percentage to the values for the individual pieces. We do that with Animated using `.interpolate`. We create 3 different style objects, one for each piece of the animation, using interpolated values based off of `this.state.loadingProgress`.\\n\\n```jsx\\nconst loadingProgress = this.state.loadingProgress;\\n\\nconst opacityClearToVisible = {\\n  opacity: loadingProgress.interpolate({\\n    inputRange: [0, 15, 30],\\n    outputRange: [0, 0, 1],\\n    extrapolate: \'clamp\',\\n    // clamp means when the input is 30-100, output should stay at 1\\n  }),\\n};\\n\\nconst imageScale = {\\n  transform: [\\n    {\\n      scale: loadingProgress.interpolate({\\n        inputRange: [0, 10, 100],\\n        outputRange: [1, 0.8, 70],\\n      }),\\n    },\\n  ],\\n};\\n\\nconst appScale = {\\n  transform: [\\n    {\\n      scale: loadingProgress.interpolate({\\n        inputRange: [0, 100],\\n        outputRange: [1.1, 1],\\n      }),\\n    },\\n  ],\\n};\\n```\\n\\nNow that we have these style objects, we can use them when rendering the snippet of the view from earlier in the post. Note that only `Animated.View`, `Animated.Text`, and `Animated.Image` are able to use style objects that use `Animated.Value`.\\n\\n```jsx\\nconst fullScreenBlueLayer = (\\n  <View style={styles.fullScreenBlueLayer} />\\n);\\nconst fullScreenWhiteLayer = (\\n  <View style={styles.fullScreenWhiteLayer} />\\n);\\n\\nreturn (\\n  <View style={styles.fullScreen}>\\n    {fullScreenBlueLayer}\\n    <MaskedViewIOS\\n      style={{flex: 1}}\\n      maskElement={\\n        <View style={styles.centeredFullScreen}>\\n          <Animated.Image\\n            style={[styles.maskImageStyle, imageScale]}\\n            source={twitterLogo}\\n          />\\n        </View>\\n      }>\\n      {fullScreenWhiteLayer}\\n      <Animated.View\\n        style={[opacityClearToVisible, appScale, {flex: 1}]}>\\n        {this.props.children}\\n      </Animated.View>\\n    </MaskedViewIOS>\\n  </View>\\n);\\n```\\n\\n<img src=\\"/blog/assets/loading-screen-06.gif\\" style={{float: \'left\', paddingRight: 80, paddingBottom: 20}} />\\n\\nYay! We now have the animation pieces looking like we want. Now we just have to clean up our blue and white layers which will never be seen again.\\n\\nTo know when we can clean them up, we need to know when the animation is complete. Luckily where we call, `Animated.timing` ,`.start` takes an optional callback that runs when the animation is complete.\\n\\n```jsx\\nAnimated.timing(this.state.loadingProgress, {\\n  toValue: 100,\\n  duration: 1000,\\n  useNativeDriver: true,\\n}).start(() => {\\n  this.setState({\\n    animationDone: true,\\n  });\\n});\\n```\\n\\nNow that we have a value in `state` to know whether we are done with the animation, we can modify our blue and white layers to use that.\\n\\n```jsx\\nconst fullScreenBlueLayer = this.state.animationDone ? null : (\\n  <View style={[styles.fullScreenBlueLayer]} />\\n);\\nconst fullScreenWhiteLayer = this.state.animationDone ? null : (\\n  <View style={[styles.fullScreenWhiteLayer]} />\\n);\\n```\\n\\nVoila! Our animation now works and we clean up our unused layers once the animation is done. We have built the Twitter app loading animation!\\n\\n## But wait, mine doesn\u2019t work!\\n\\nDon\u2019t fret, dear reader. I too hate when guides only give you chunks of the code and don\u2019t give you the completed source.\\n\\nThis component has been published to npm and is on GitHub as [react-native-mask-loader](https://github.com/TheSavior/react-native-mask-loader). To try this out on your phone, it is [available on Expo](https://expo.io/@eliwhite/react-native-mask-loader-example) here:\\n\\n<img src=\\"/blog/assets/loading-screen-07.png\\" style={{marginLeft: \'auto\', marginRight: \'auto\', display: \'block\'}} />\\n\\n## More Reading / Extra Credit\\n\\n1. [This gitbook](https://browniefed.com/react-native-animation-book/) is a great resource to learn more about Animated after you have read the React Native docs.\\n1. The actual Twitter animation seems to speed up the mask reveal towards the end. Try modifying the loader to use a different easing function (or a spring!) to better match that behavior.\\n1. The current end-scale of the mask is hard coded and likely won\u2019t reveal the entire app on a tablet. Calculating the end scale based on screen size and image size would be an awesome PR."},{"id":"/2018/01/09/react-native-monthly-6","metadata":{"permalink":"/blog/2018/01/09/react-native-monthly-6","source":"@site/blog/2018-01-09-react-native-monthly-6.md","title":"React Native Monthly #6","description":"The React Native monthly meeting is still going strong! Make sure to check a note on the bottom of this post for the next sessions.","date":"2018-01-09T00:00:00.000Z","formattedDate":"January 9, 2018","tags":[{"label":"engineering","permalink":"/blog/tags/engineering"}],"readingTime":3.185,"hasTruncateMarker":false,"authors":[{"name":"Tomislav Tenodi","title":"Founder at Speck","url":"https://twitter.com/TomislavTenodi","imageURL":"https://pbs.twimg.com/profile_images/877237660225609729/bKFDwfAq.jpg"}],"frontMatter":{"title":"React Native Monthly #6","author":"Tomislav Tenodi","authorTitle":"Founder at Speck","authorURL":"https://twitter.com/TomislavTenodi","authorImageURL":"https://pbs.twimg.com/profile_images/877237660225609729/bKFDwfAq.jpg","authorTwitter":"TomislavTenodi","tags":["engineering"]},"unlisted":false,"prevItem":{"title":"Implementing Twitter\u2019s App Loading Animation in React Native","permalink":"/blog/2018/01/18/implementing-twitters-app-loading-animation-in-react-native"},"nextItem":{"title":"React Native Monthly #5","permalink":"/blog/2017/11/06/react-native-monthly-5"}},"content":"The React Native monthly meeting is still going strong! Make sure to check a note on the bottom of this post for the next sessions.\\n\\n### Expo\\n\\n- Congratulations to [Devin Abbott](https://github.com/dabbott) and [Houssein Djirdeh](https://twitter.com/hdjirdeh) on their pre-release of the \\"Full Stack React Native\\" book! It walks you through learning React Native by building several small apps. You can try those apps out on https://www.fullstackreact.com/react-native/ before buying the book.\\n- Released a first (experimental) version of [reason-react-native-scripts](https://github.com/react-community/reason-react-native-scripts) to help people to easily try out [ReasonML](https://reasonml.github.io/).\\n- Expo SDK 24 is [released](https://blog.expo.io/expo-sdk-v24-0-0-is-now-available-bfcac3b50d51)! It uses [React Native 0.51](https://github.com/facebook/react-native/releases/tag/v0.51.0) and includes a bunch of new features and improvements: bundling images in standalone apps (no need to cache on first load!), image manipulation API (crop, resize, rotate, flip), face detection API, new release channel features (set the active release for a given channel and rollback), web dashboard to track standalone app builds, and a fix longstanding bug with OpenGL Android implementation and the Android multi-tasker, just to name a few things.\\n- We are allocating more resources to React Navigation starting this January. We strongly believe that it is both possible and desirable to build React Native navigation with just React components and primitives like Animated and `react-native-gesture-handler` and we\u2019re really excited about some of the improvements we have planned. If you\'re looking to contribute to the community, check out [react-native-maps](https://github.com/react-community/react-native-maps) and [react-native-svg](https://github.com/react-native-community/react-native-svg), which could both use some help!\\n\\n### Infinite Red\\n\\n- We have our Keynote speakers for [Chain React conf](https://infinite.red/ChainReactConf): [Kent C. Dodds](https://twitter.com/kentcdodds) and [Tracy Lee](https://twitter.com/ladyleet). We will be opening CFP very soon.\\n- [Community chat](https://community.infinite.red/) now at 1600 people.\\n- [React Native Newsletter](https://reactnative.cc/) now at 8500 subscribers.\\n- Currently researching best practice for making RN crash resistant, reports to follow.\\n- Adding ability to report from [Solidarity](https://shift.infinite.red/effortless-environment-reports-d129d53eb405).\\n- Published a HOW-TO for releasing on [React Native and Android](https://shift.infinite.red/simple-react-native-android-releases-319dc5e29605).\\n\\n### Microsoft\\n\\n- A [pull request](https://github.com/Microsoft/react-native-windows/pull/1419) has been started to migrate the core React Native Windows bridge to .NET Standard, making it effectively OS-agnostic. The hope is that many other .NET Core platforms can extend the bridge with their own threading models, JavaScript runtimes, and UIManagers (think JavaScriptCore, Xamarin.Mac, Linux Gtk#, and Samsung Tizen options).\\n\\n### Wix\\n\\n- [Detox](https://github.com/wix/detox)\\n  - In order for us to scale with E2E tests, we want to minimize time spent on CI, we are working on parallelization support for Detox.\\n  - Submitted a [pull request](https://github.com/facebook/react-native/pull/16948) to enable support for custom flavor builds, to better support mocking on E2E.\\n- [DetoxInstruments](https://github.com/wix/DetoxInstruments)\\n  - Working on the killer feature of DetoxInstruments proves to be a very challenging task, taking JavaScript backtrace at any given time requires a custom JSCore implementation to support JS thread suspension. Testing the profiler internally on Wix\u2019s app revealed interesting insights about the JS thread.\\n  - The project is still not stable enough for general use but is actively worked on, and we hope to announce it soon.\\n- [React Native Navigation](https://github.com/wix/react-native-navigation)\\n  - V2 development pace has been increased substantially, up until now, we only had 1 developer working on it 20% of his time, we now have 3 developers working on it full time!\\n- Android Performance\\n  - Replacing the old JSCore bundled in RN with its newest version (tip of webkitGTK project, with custom JIT configuration) produced 40% performance increase on the JS thread. Next up is compiling a 64bit version of it. This effort is based on [JSC build scripts for Android](https://github.com/SoftwareMansion/jsc-android-buildscripts). Follow its current status [here](https://github.com/DanielZlotin/jsc-android-buildscripts/tree/tip).\\n\\n## Next sessions\\n\\nThere\'s been some discussion on re-purposing this meeting to discuss a single and specific topic (e.g. navigation, moving React Native modules into separate repos, documentation, ...). That way we feel we can contribute the best to React Native community. It might take place in the next meeting session. Feel free to tweet what you\'d like to see covered as a topic."},{"id":"/2017/11/06/react-native-monthly-5","metadata":{"permalink":"/blog/2017/11/06/react-native-monthly-5","source":"@site/blog/2017-11-06-react-native-monthly-5.md","title":"React Native Monthly #5","description":"The React Native monthly meeting continues! Let\'s see what our teams are up to.","date":"2017-11-06T00:00:00.000Z","formattedDate":"November 6, 2017","tags":[{"label":"engineering","permalink":"/blog/tags/engineering"}],"readingTime":3.015,"hasTruncateMarker":false,"authors":[{"name":"Tomislav Tenodi","title":"Founder at Speck","url":"https://github.com/tenodi","imageURL":"https://pbs.twimg.com/profile_images/877237660225609729/bKFDwfAq.jpg"}],"frontMatter":{"title":"React Native Monthly #5","author":"Tomislav Tenodi","authorTitle":"Founder at Speck","authorURL":"https://github.com/tenodi","authorImageURL":"https://pbs.twimg.com/profile_images/877237660225609729/bKFDwfAq.jpg","authorTwitter":"TomislavTenodi","tags":["engineering"]},"unlisted":false,"prevItem":{"title":"React Native Monthly #6","permalink":"/blog/2018/01/09/react-native-monthly-6"},"nextItem":{"title":"React Native Monthly #4","permalink":"/blog/2017/09/21/react-native-monthly-4"}},"content":"The React Native monthly meeting continues! Let\'s see what our teams are up to.\\n\\n### Callstack\\n\\n- We\u2019ve been working on React Native CI. Most importantly, we have migrated from Travis to Circle, leaving React Native with a single, unified CI pipeline.\\n- We\u2019ve organised [Hacktoberfest - React Native edition](https://blog.callstack.io/announcing-hacktoberfest-7313ea5ccf4f) where, together with attendees, we tried to submit many pull requests to open source projects.\\n- We keep working on [Haul](https://github.com/callstack/haul). Last month, we have submitted two new releases, including webpack 3 support. We plan to add [CRNA](https://github.com/react-community/create-react-native-app) and [Expo](https://github.com/expo/expo) support as well as work on better HMR. Our roadmap is public on the issue tracker. If you would like to suggest improvements or give feedback, let us know!\\n\\n### Expo\\n\\n- Released [Expo SDK 22](https://blog.expo.io/expo-sdk-v22-0-0-is-now-available-7745bfe97fc6) (using React Native 0.49) and updated [CRNA](https://github.com/react-community/create-react-native-app) for it.\\n  - Includes improved splash screen API, basic ARKit support, \u201cDeviceMotion\u201d API, SFAuthenticationSession support on iOS11, and [more](https://blog.expo.io/expo-sdk-v22-0-0-is-now-available-7745bfe97fc6).\\n- Your [snacks](https://snack.expo.io) can now have multiple JavaScript files and you can upload images and other assets by just dragging them into the editor.\\n- Contribute to [react-navigation](https://github.com/react-community/react-navigation) to add support for iPhone X.\\n- Focus our attention on rough edges when building large applications with Expo. For example:\\n  - First-class support for deploying to multiple environments: staging, production, and arbitrary channels. Channels will support rolling back and setting the active release for a given channel. Let us know if you want to be an early tester, [@expo_io](https://twitter.com/expo_io).\\n  - We are also working on improving our standalone app building infrastructure and adding support for bundling images and other non-code assets in standalone app builds while keeping the ability to update assets over the air.\\n\\n### Facebook\\n\\n- Better RTL support:\\n  - We\u2019re introducing a number of direction-aware styles.\\n    - Position:\\n      - (left|right) \u2192 (start|end)\\n    - Margin:\\n      - margin(Left|Right) \u2192 margin(Start|End)\\n    - Padding:\\n      - padding(Left|Right) \u2192 padding(Start|End)\\n    - Border:\\n      - borderTop(Left|Right)Radius \u2192 borderTop(Start|End)Radius\\n      - borderBottom(Left|Right)Radius \u2192 borderBottom(Start|End)Radius\\n      - border(Left|Right)Width \u2192 border(Start|End)Width\\n      - border(Left|Right)Color \u2192 border(Start|End)Color\\n  - The meaning of \u201cleft\u201d and \u201cright\u201d were swapped in RTL for position, margin, padding, and border styles. Within a few months, we\u2019re going to remove this behaviour and make \u201cleft\u201d always mean \u201cleft,\u201d and \u201cright\u201d always mean \u201cright\u201d. The breaking changes are hidden under a flag. Use `I18nManager.swapLeftAndRightInRTL(false)` in your React Native components to opt into them.\\n- Working on [Flow](https://github.com/facebook/flow) typing our internal native modules and using those to generate interfaces in Java and protocols in ObjC that the native implementations must implement. We hope this codegen becomes open source next year, at the earliest.\\n\\n### Infinite Red\\n\\n- New OSS tool for helping React Native and other projects. More [here](https://shift.infinite.red/solidarity-the-cli-for-developer-sanity-672fa81b98e9).\\n- Revamping [Ignite](https://github.com/infinitered/ignite) for a new boilerplate release (Code name: Bowser)\\n\\n### Shoutem\\n\\n- Improving the development flow on Shoutem. We want to streamline the process from creating an app to first custom screen and make it really easy, thus lowering the barrier for new React Native developers. Prepared a few workshops to test out new features. We also improved [Shoutem CLI](https://github.com/shoutem/cli) to support new flows.\\n- [Shoutem UI](https://github.com/shoutem/ui) received a few component improvements and bugfixes. We also checked compatibility with latest React Native versions.\\n- Shoutem platform received a few notable updates, new integrations are available as part of the [open-source extensions project](https://github.com/shoutem/extensions). We are really excited to see active development on Shoutem extensions from other developers. We actively contact and offer advice and guidance about their extensions.\\n\\n## Next session\\n\\nThe next session is scheduled for Wednesday 6, December 2017. Feel free to ping me [on Twitter](https://twitter.com/TomislavTenodi) if you have any suggestion on how we should improve the output of the meeting."},{"id":"/2017/09/21/react-native-monthly-4","metadata":{"permalink":"/blog/2017/09/21/react-native-monthly-4","source":"@site/blog/2017-09-21-react-native-monthly-4.md","title":"React Native Monthly #4","description":"The React Native monthly meeting continues! Here are the notes from each team:","date":"2017-09-21T00:00:00.000Z","formattedDate":"September 21, 2017","tags":[{"label":"engineering","permalink":"/blog/tags/engineering"}],"readingTime":2.54,"hasTruncateMarker":false,"authors":[{"name":"Mike Grabowski","title":"CTO at Callstack","url":"https://github.com/grabbou","imageURL":"https://pbs.twimg.com/profile_images/988860423897313281/L9ErG_lr_400x400.jpg"}],"frontMatter":{"title":"React Native Monthly #4","author":"Mike Grabowski","authorTitle":"CTO at Callstack","authorURL":"https://github.com/grabbou","authorImageURL":"https://pbs.twimg.com/profile_images/988860423897313281/L9ErG_lr_400x400.jpg","authorTwitter":"grabbou","tags":["engineering"]},"unlisted":false,"prevItem":{"title":"React Native Monthly #5","permalink":"/blog/2017/11/06/react-native-monthly-5"},"nextItem":{"title":"React Native Monthly #3","permalink":"/blog/2017/08/30/react-native-monthly-3"}},"content":"The React Native monthly meeting continues! Here are the notes from each team:\\n\\n### Callstack\\n\\n- [React Native EU](https://react-native.eu) is over. More than 300 participants from 33 countries have visited Wroclaw. Talks can be found [on YouTube](https://www.youtube.com/channel/UCUNE_g1mQPuyW975WjgjYxA/videos).\\n- We are slowly getting back to our open source schedule after the conference. One thing worth mentioning is that we are working on a next release of [react-native-opentok](https://github.com/callstack/react-native-opentok) that fixes most of the existing issues.\\n\\n### GeekyAnts\\n\\nTrying to lower the entry barrier for the developers embracing React Native with the following things:\\n\\n- Announced [BuilderX.io](https://builderx.io/) at [React Native EU](https://react-native.eu). BuilderX is a design tool that directly works with JavaScript files (only React Native is supported at the moment) to generate beautiful, readable, and editable code.\\n- Launched [ReactNativeSeed.com](https://reactnativeseed.com/) which provides a set of boilerplates for your next React Native project. It comes with a variety of options that include TypeScript & Flow for data-types, MobX, Redux, and mobx-state-tree for state-management with CRNA and plain React-Native as the stack.\\n\\n### Expo\\n\\n- Will release SDK 21 shortly, which adds support for react-native 0.48.3 and a bunch of bugfixes/reliability improvements/new features in the Expo SDK, including video recording, a new splash screen API, support for `react-native-gesture-handler`, and improved error handling.\\n- Re: [react-native-gesture-handler](https://github.com/kmagiera/react-native-gesture-handler), [Krzysztof Magiera](https://github.com/kmagiera) of [Software Mansion](https://swmansion.com/) continues pushing this forward and we\'ve been helping him with testing it and funding part of his development time. Having this integrated in Expo in SDK21 will allow people to play with it easily in Snack, so we\'re excited to see what people come up with.\\n- Re: improved error logging / handling - see [this gist of an internal Expo PR](https://gist.github.com/brentvatne/00407710a854627aa021fdf90490b958) for details on logging, (in particular, \\"Problem 2\\"), and [this commit](https://github.com/expo/xdl/commit/1d62eca293dfb867fc0afc920c3dad94b7209987) for a change that handles failed attempts to import npm standard library modules. There is plenty of opportunity to improve error messages upstream in React Native in this way and we will work on follow up upstream PRs. It would be great for the community to get involved too.\\n- [native.directory](https://native.directory/) continues to grow, you can add your projects from [the GitHub repo](https://github.com/react-community/native-directory).\\n- Visit hackathons around North America, including [PennApps](https://pennapps.com/), [Hack The North](https://hackthenorth.com/), [HackMIT](https://hackmit.org/), and soon [MHacks](https://mhacks.org/).\\n\\n### Facebook\\n\\n- Working on improving `<Text>` and `<TextInput>` components on Android. (Native auto-growing for `<TextInput>`; deeply nested `<Text>` components layout issues; better code structure; performance optimizations).\\n- We\'re still looking for additional contributors who would like to help triage issues and pull requests.\\n\\n### Microsoft\\n\\n- Released Code Signing feature for CodePush. React Native developers are now able to sign their application bundles in CodePush. The announcement can be found [here](https://microsoft.github.io/code-push/articles/CodeSigningAnnouncement.html)\\n- Working on completing integration of CodePush to Mobile Center. Considering test/crash integration as well.\\n\\n## Next session\\n\\nThe next session is scheduled for Wednesday 10, October 2017. As this was only our fourth meeting, we\'d like to know how do these notes benefit the React Native community. Feel free to ping me [on Twitter](https://twitter.com/grabbou) if you have any suggestion on how we should improve the output of the meeting."},{"id":"/2017/08/30/react-native-monthly-3","metadata":{"permalink":"/blog/2017/08/30/react-native-monthly-3","source":"@site/blog/2017-08-30-react-native-monthly-3.md","title":"React Native Monthly #3","description":"The React Native monthly meeting continues! This month\'s meeting was a bit shorter as most of our teams were busy shipping. Next month, we are at React Native EU conference in Wroclaw, Poland. Make sure to grab a ticket and see you there in person! Meanwhile, let\'s see what our teams are up to.","date":"2017-08-30T00:00:00.000Z","formattedDate":"August 30, 2017","tags":[{"label":"engineering","permalink":"/blog/tags/engineering"}],"readingTime":4.1,"hasTruncateMarker":false,"authors":[{"name":"Mike Grabowski","title":"CTO at Callstack","url":"https://github.com/grabbou","imageURL":"https://pbs.twimg.com/profile_images/988860423897313281/L9ErG_lr_400x400.jpg"}],"frontMatter":{"title":"React Native Monthly #3","author":"Mike Grabowski","authorTitle":"CTO at Callstack","authorURL":"https://github.com/grabbou","authorImageURL":"https://pbs.twimg.com/profile_images/988860423897313281/L9ErG_lr_400x400.jpg","authorTwitter":"grabbou","tags":["engineering"]},"unlisted":false,"prevItem":{"title":"React Native Monthly #4","permalink":"/blog/2017/09/21/react-native-monthly-4"},"nextItem":{"title":"React Native Performance in Marketplace","permalink":"/blog/2017/08/07/react-native-performance-in-marketplace"}},"content":"The React Native monthly meeting continues! This month\'s meeting was a bit shorter as most of our teams were busy shipping. Next month, we are at [React Native EU](https://react-native.eu/) conference in Wroclaw, Poland. Make sure to grab a ticket and see you there in person! Meanwhile, let\'s see what our teams are up to.\\n\\n## Teams\\n\\nOn this third meeting, we had 5 teams join us:\\n\\n- [Callstack](https://github.com/callstack)\\n- [Expo](https://github.com/expo)\\n- [Facebook](https://github.com/facebook)\\n- [Microsoft](https://github.com/microsoft)\\n- [Shoutem](https://github.com/shoutem)\\n\\n## Notes\\n\\nHere are the notes from each team:\\n\\n### Callstack\\n\\n- Recently open sourced [`react-native-material-palette`](https://github.com/callstack-io/react-native-material-palette). It extracts prominent colors from images to help you create visually engaging apps. It\'s Android only at the moment, but we are looking into adding support for iOS in the future.\\n- We have landed HMR support into [`haul`](https://github.com/callstack-io/haul) and a bunch of other, cool stuff! Check out latest releases.\\n- React Native EU 2017 is coming! Next month is all about React Native and Poland! Make sure to grab last tickets available [here](https://react-native.eu/).\\n\\n### Expo\\n\\n- Released support for installing npm packages on [Snack](https://snack.expo.io). Usual Expo restrictions apply -- packages can\'t depend on custom native APIs that aren\'t already included in Expo. We are also working on supporting multiple files and uploading assets in Snack. [Satyajit](https://github.com/satya164) will talk about Snack at [React Native Europe](https://react-native.eu/).\\n- Released SDK20 with camera, payments, secure storage, magnetometer, pause/resume fs downloads, and improved splash/loading screen.\\n- Continuing to work with [Krzysztof](https://github.com/kmagiera) on [react-native-gesture-handler](https://github.com/kmagiera/react-native-gesture-handler). Please give it a try, rebuild some gesture that you have previously built using PanResponder or native gesture recognizers and let us know what issues you encounter.\\n- Experimenting with JSC debugging protocol, working on a bunch of feature requests on [Canny](https://expo.canny.io/feature-requests).\\n\\n### Facebook\\n\\n- Last month we discussed management of the GitHub issue tracker and that we would try to make improvements to address the maintainability of the project.\\n- Currently, the number of open issues is holding steady at around 600, and it seems like it may stay that way for a while. In the past month, we have closed 690 issues due to lack of activity (defined as no comments in the last 60 days). Out of those 690 issues, 58 were re-opened for a variety of reasons (a maintainer committed to providing a fix, or a contributor made a great case for keeping the issue open).\\n- We plan to continue with the automated closing of stale issues for the foreseeable future. We\u2019d like to be in a state where every impactful issue opened in the tracker is acted upon, but we\u2019re not there yet. We need all the help we can from maintainers to triage issues and make sure we don\'t miss issues that introduce regressions or introduce breaking changes, especially those that affect newly created projects. People interested in helping out can use the Facebook GitHub Bot to triage issues and pull requests. The new Maintainers Guide contains more information on triage and use of the GitHub Bot. Please add yourself to the [issue task force](https://github.com/facebook/react-native/blob/master/bots/IssueCommands.txt) and encourage other active community members to do the same!\\n\\n### Microsoft\\n\\n- The new Skype app is built on top of React Native in order to facilitate sharing as much code between platforms as possible. The React Native-based Skype app is currently available in the Android and iOS app stores.\\n- While building the Skype app on React Native, we send pull requests to React Native in order to address bugs and missing features that we come across. So far, we\'ve gotten about [70 pull requests merged](https://github.com/facebook/react-native/pulls?utf8=%E2%9C%93&q=is%3Apr%20author%3Arigdern%20).\\n- React Native enabled us to power both the Android and iOS Skype apps from the same codebase. We also want to use that codebase to power the Skype web app. To help us achieve that goal, we built and open sourced a thin layer on top of React/React Native called [ReactXP](https://microsoft.github.io/reactxp/blog/2017/04/06/introducing-reactxp.html). ReactXP provides a set of cross platform components that get mapped to React Native when targeting iOS/Android and to react-dom when targeting the web. ReactXP\'s goals are similar to another open source library called React Native for Web. There\'s a brief description of how the approaches of these libraries differ in the [ReactXP FAQ](https://microsoft.github.io/reactxp/docs/faq.html).\\n\\n### Shoutem\\n\\n- We are continuing our efforts on improving and simplifying the developer experience when building apps using [Shoutem](https://shoutem.github.io/).\\n- Started migrating all our apps to react-navigation, but we ended postponing this until a more stable version is released, or one of the native navigation solutions becomes stable.\\n- Updating all our [extensions](https://github.com/shoutem/extensions) and most of our open source libraries ([animation](https://github.com/shoutem/animation), [theme](https://github.com/shoutem/theme), [ui](https://github.com/shoutem/ui)) to React Native 0.47.1.\\n\\n## Next session\\n\\nThe next session is scheduled for Wednesday 13, September 2017. As this was only our third meeting, we\'d like to know how do these notes benefit the React Native community. Feel free to ping me [on Twitter](https://twitter.com/grabbou) if you have any suggestion on how we should improve the output of the meeting."},{"id":"/2017/08/07/react-native-performance-in-marketplace","metadata":{"permalink":"/blog/2017/08/07/react-native-performance-in-marketplace","source":"@site/blog/2017-08-07-react-native-performance-in-marketplace.md","title":"React Native Performance in Marketplace","description":"React Native is used in multiple places across multiple apps in the Facebook family including a top level tab in the main Facebook apps. Our focus for this post is a highly visible product, Marketplace. It is available in a dozen or so countries and enables users to discover products and services provided by other users.","date":"2017-08-07T00:00:00.000Z","formattedDate":"August 7, 2017","tags":[{"label":"engineering","permalink":"/blog/tags/engineering"}],"readingTime":4.86,"hasTruncateMarker":false,"authors":[{"name":"Aaron Chiu","title":"Software Engineer at Facebook","url":"https://www.facebook.com/aaronechiu"}],"frontMatter":{"title":"React Native Performance in Marketplace","author":"Aaron Chiu","authorTitle":"Software Engineer at Facebook","authorURL":"https://www.facebook.com/aaronechiu","authorFBID":1057500063,"authorTwitter":"AaaChiuuu","tags":["engineering"]},"unlisted":false,"prevItem":{"title":"React Native Monthly #3","permalink":"/blog/2017/08/30/react-native-monthly-3"},"nextItem":{"title":"React Native Monthly #2","permalink":"/blog/2017/07/28/react-native-monthly-2"}},"content":"React Native is used in multiple places across multiple apps in the Facebook family including a top level tab in the main Facebook apps. Our focus for this post is a highly visible product, [Marketplace](https://newsroom.fb.com/news/2016/10/introducing-marketplace-buy-and-sell-with-your-local-community/). It is available in a dozen or so countries and enables users to discover products and services provided by other users.\\n\\nIn the first half of 2017, through the joint effort of the Relay Team, the Marketplace team, the Mobile JS Platform team, and the React Native team, we cut Marketplace Time to Interaction (TTI) in half for Android [Year Class 2010-11 devices](https://code.facebook.com/posts/307478339448736/year-class-a-classification-system-for-android/). Facebook has historically considered these devices as low-end Android devices, and they have the slowest TTIs on any platform or device type.\\n\\nA typical React Native startup looks something like this:\\n\\n![](/blog/assets/RNPerformanceStartup.png)\\n\\n> Disclaimer: ratios aren\'t representative and will vary depending on how React Native is configured and used.\\n\\nWe first initialize the React Native core (aka the \u201cBridge\u201d) before running the product specific JavaScript which determines what native views React Native will render in the Native Processing Time.\\n\\n### A different approach\\n\\nOne of the earlier mistakes that we made was to let [Systrace and CTScan](https://code.facebook.com/posts/747457662026706/performance-instrumentation-for-android-apps/) drive our performance efforts. These tools helped us find a lot of low-hanging fruit in 2016, but we discovered that both Systrace and CTScan are **not representative of production scenarios** and cannot emulate what happens in the wild. Ratios of time spent in the breakdowns are often incorrect and, wildly off-base at times. At the extreme, some things that we expected to take a few milliseconds actually take hundreds or thousands of milliseconds. That said, CTScan is useful and we\'ve found it catches a third of regressions before they hit production.\\n\\nOn Android, we attribute the shortcomings of these tools to the fact that 1) React Native is a multithreaded framework, 2) Marketplace is co-located with a multitude of complex views such as Newsfeed and other top-level tabs, and 3) computation times vary wildly. Thus, this half, we let production measurements and breakdowns drive almost all of our decision making and prioritization.\\n\\n### Down the path of production instrumentation\\n\\nInstrumenting production may sound simple on the surface, but it turned out to be quite a complex process. It took multiple iteration cycles of 2-3 weeks each; due to the latency of landing a commit in master, to pushing the app to the Play Store, to gathering sufficient production samples to have confidence in our work. Each iteration cycle involved discovering if our breakdowns were accurate, if they had the right level of granularity, and if they properly added up to the whole time span. We could not rely on alpha and beta releases because they are not representative of the general population. In essence, we very tediously built a very accurate production trace based on the aggregate of millions of samples.\\n\\nOne of the reasons we meticulously verified that every millisecond in breakdowns properly added up to their parent metrics was that we realized early on there were gaps in our instrumentation. It turned out that our initial breakdowns did not account for stalls caused by thread jumps. Thread jumps themselves aren\'t expensive, but thread jumps to busy threads already doing work are very expensive. We eventually reproduced these blockages locally by sprinkling `Thread.sleep()` calls at the right moments, and we managed to fix them by:\\n\\n1. removing our dependency on AsyncTask,\\n2. undoing the forced initialization of ReactContext and NativeModules on the UI thread, and\\n3. removing the dependency on measuring the ReactRootView at initialization time.\\n\\nTogether, removing these thread blockage issues reduced the startup time by over 25%.\\n\\nProduction metrics also challenged some of our prior assumptions. For example, we used to pre-load many JavaScript modules on the startup path under the assumption that co-locating modules in one bundle would reduce their initialization cost. However, the cost of pre-loading and co-locating these modules far outweighed the benefits. By re-configuring our inline require blacklists and removing JavaScript modules from the startup path, we were able to avoid loading unnecessary modules such as Relay Classic (when only [Relay Modern](https://relay.dev/docs/new-in-relay-modern) was necessary). Today, our `RUN_JS_BUNDLE` breakdown is over 75% faster.\\n\\nWe also found wins by investigating product-specific native modules. For example, by lazily injecting a native module\'s dependencies, we reduced that native module\'s cost by 98%. By removing the contention of Marketplace startup with other products, we reduced startup by an equivalent interval.\\n\\nThe best part is that many of these improvements are broadly applicable to all screens built with React Native.\\n\\n## Conclusion\\n\\nPeople assume that React Native startup performance problems are caused by JavaScript being slow or exceedingly high network times. While speeding up things like JavaScript would bring down TTI by a non-trivial sum, each of these contribute a much smaller percentage of TTI than was previously believed.\\n\\nThe lesson so far has been to _measure, measure, measure!_ Some wins come from moving run-time costs to build time, such as Relay Modern and [Lazy NativeModules](https://github.com/facebook/react-native/commit/797ca6c219b2a44f88f10c61d91e8cc21e2f306e). Other wins come from avoiding work by being smarter about parallelizing code or removing dead code. And some wins come from large architectural changes to React Native, such as cleaning up thread blockages. There is no grand solution to performance, and longer-term performance wins will come from incremental instrumentation and improvements. Do not let cognitive bias influence your decisions. Instead, carefully gather and interpret production data to guide future work.\\n\\n## Future plans\\n\\nIn the long term, we want Marketplace TTI to be comparable to similar products built with Native, and, in general, have React Native performance on par with native performance. Further more, although this half we drastically reduced the bridge startup cost by about 80%, we plan to bring the cost of the React Native bridge close to zero via projects like [Prepack](https://prepack.io/) and more build time processing."},{"id":"/2017/07/28/react-native-monthly-2","metadata":{"permalink":"/blog/2017/07/28/react-native-monthly-2","source":"@site/blog/2017-07-28-react-native-monthly-2.md","title":"React Native Monthly #2","description":"The React Native monthly meeting continues! On this session, we were joined by Infinite Red, great minds behind Chain React, the React Native Conference. As most of the people here were presenting talks at Chain React, we pushed the meeting to a week later. Talks from the conference have been posted online and I encourage you to check them out. So, let\'s see what our teams are up to.","date":"2017-07-28T00:00:00.000Z","formattedDate":"July 28, 2017","tags":[{"label":"engineering","permalink":"/blog/tags/engineering"}],"readingTime":7.57,"hasTruncateMarker":false,"authors":[{"name":"Tomislav Tenodi","title":"Product Manager at Shoutem","url":"https://github.com/tenodi","imageURL":"https://pbs.twimg.com/profile_images/877237660225609729/bKFDwfAq.jpg"}],"frontMatter":{"title":"React Native Monthly #2","author":"Tomislav Tenodi","authorTitle":"Product Manager at Shoutem","authorURL":"https://github.com/tenodi","authorImageURL":"https://pbs.twimg.com/profile_images/877237660225609729/bKFDwfAq.jpg","authorTwitter":"TomislavTenodi","tags":["engineering"]},"unlisted":false,"prevItem":{"title":"React Native Performance in Marketplace","permalink":"/blog/2017/08/07/react-native-performance-in-marketplace"},"nextItem":{"title":"React Native Monthly #1","permalink":"/blog/2017/06/21/react-native-monthly-1"}},"content":"The React Native monthly meeting continues! On this session, we were joined by [Infinite Red](https://infinite.red/), great minds behind [Chain React, the React Native Conference](https://infinite.red/ChainReactConf). As most of the people here were presenting talks at Chain React, we pushed the meeting to a week later. Talks from the conference have been [posted online](https://www.youtube.com/playlist?list=PLFHvL21g9bk3RxJ1Ut5nR_uTZFVOxu522) and I encourage you to check them out. So, let\'s see what our teams are up to.\\n\\n## Teams\\n\\nOn this second meeting, we had 9 teams join us:\\n\\n- [Airbnb](https://github.com/airbnb)\\n- [Callstack](https://github.com/callstack-io)\\n- [Expo](https://github.com/expo)\\n- [Facebook](https://github.com/facebook)\\n- [GeekyAnts](https://github.com/GeekyAnts)\\n- [Infinite Red](https://github.com/infinitered)\\n- [Microsoft](https://github.com/microsoft)\\n- [Shoutem](https://github.com/shoutem)\\n- [Wix](https://github.com/wix)\\n\\n## Notes\\n\\nHere are the notes from each team:\\n\\n### Airbnb\\n\\n- Check out the [Airbnb repository](https://github.com/airbnb) for React Native related projects.\\n\\n### Callstack\\n\\n- [Mike Grabowski](https://github.com/grabbou) has been managing React Native\'s monthly releases as always, including a few betas that were pushed out. In particular, working on getting a v0.43.5 build published to npm since it unblocks Windows users!\\n- Slow but consistent work is happening on [Haul](https://github.com/callstack-io/haul). There is a pull request that adds HMR, and other improvements have shipped. Recently got a few industry leaders to adopt it. Possibly planning to start a full-time paid work in that area.\\n- [Micha\u0142 Pierzcha\u0142a](https://twitter.com/thymikee) from the [Jest](https://github.com/facebook/jest) team has joined us at Callstack this month. He will help maintain [Haul](https://github.com/callstack-io/haul) and possibly work on [Metro Bundler](https://github.com/facebook/metro) and [Jest](https://github.com/facebook/jest).\\n- [Satyajit Sahoo](https://twitter.com/satya164) is now with us, yay!\\n- Got a bunch of cool stuff coming up from our OSS department. In particular, working on bringing Material Palette API to React Native. Planning to finally release our native iOS kit which is aimed to provide 1:1 look & feel of native components.\\n\\n### Expo\\n\\n- Recently launched [Native Directory](https://native.directory) to help with discoverability and evaluation of libraries in React Native ecosystem. The problem: lots of libraries, hard to test, need to manually apply heuristics and not immediately obvious which ones are just the best ones that you should use. It\'s also hard to know if something is compatible with CRNA/Expo. So Native Directory tries to solve these problems. Check it out and [add your library](https://github.com/react-community/native-directory) to it. The list of libraries is in [here](https://github.com/react-community/native-directory/blob/master/react-native-libraries.json). This is just our first pass of it, and we want this to be owned and run by the community, not just Expo folks. So please pitch in if you think this is valuable and want to make it better!\\n- Added initial support for installing npm packages in [Snack](https://snack.expo.io/) with Expo SDK 19. Let us know if you run into any issues with it, we are still working through some bugs. Along with Native Directory, this should make it easy to test libraries that have only JS dependencies, or dependencies included in [Expo SDK](https://github.com/expo/expo-sdk). Try it out:\\n  - [react-native-modal](https://snack.expo.io/ByBCD_2r-)\\n  - [react-native-animatable](https://snack.expo.io/SJfJguhrW)\\n  - [react-native-calendars](https://snack.expo.io/HkoXUdhr-)\\n- [Released Expo SDK19](https://blog.expo.io/expo-sdk-v19-0-0-is-now-available-821a62b58d3d) with a bunch of improvements across the board, and we\'re now using the [updated Android JSC](https://github.com/SoftwareMansion/jsc-android-buildscripts).\\n- Working on a guide in docs with [Alexander Kotliarskyi](https://github.com/frantic) with a list of tips on how to improve the user experience of your app. Please join in and add to the list or help write some of it!\\n  - Issue: [#14979](https://github.com/facebook/react-native/issues/14979)\\n  - Initial pull request: [#14993](https://github.com/facebook/react-native/pull/14993)\\n- Continuing to work on: audio/video, camera, gestures (with Software Mansion, `react-native-gesture-handler`), GL camera integration and hoping to land some of these for the first time in SDK20 (August), and significant improvements to others by then as well. We\'re just getting started on building infrastructure into the Expo client for background work (geolocation, audio, handling notifications, etc.).\\n- [Adam Miskiewicz](https://twitter.com/skevy) has made some nice progress on imitating the transitions from [UINavigationController](https://developer.apple.com/documentation/uikit/uinavigationcontroller) in [react-navigation](https://github.com/react-community/react-navigation). Check out an earlier version of it in [his tweet](https://twitter.com/skevy/status/884932473070735361) - release coming with it soon. Also check out `MaskedViewIOS` which he [upstreamed](https://github.com/facebook/react-native/commit/8ea6cea39a3db6171dd74838a6eea4631cf42bba). If you have the skills and desire to implement `MaskedView` for Android that would be awesome!\\n\\n### Facebook\\n\\n- Facebook is internally exploring being able to embed native [ComponentKit](https://componentkit.org/) and [Litho](https://fblitho.com/) components inside of React Native.\\n- Contributions to React Native are very welcome! If you are wondering how you can contribute, the [\\"How to Contribute\\" guide](https://github.com/facebook/react-native-website/blob/master/CONTRIBUTING.md) describes our development process and lays out the steps to send your first pull request. There are other ways to contribute that do not require writing code, such as by triaging issues or updating the docs.\\n  - At the time of writing, React Native has **635** [open issues](https://github.com/facebook/react-native/issues) and **249** [open pull requests](https://github.com/facebook/react-native/pulls). This is overwhelming for our maintainers, and when things get fixed internally, it is difficult to ensure the relevant tasks are updated.\\n  - We are unsure what the best approach is to handle this while keeping the community satisfied. Some (but not all!) options include closing stale issues, giving significantly more people permissions to manage issues, and automatically closing issues that do not follow the issue template. We wrote a \\"What to Expect from Maintainers\\" guide to set expectations and avoid surprises. If you have ideas on how we can make this experience better for maintainers as well as ensuring people opening issues and pull requests feel heard and valued, please let us know!\\n\\n### GeekyAnts\\n\\n- We demoed the Designer Tool which works with React Native files on Chain React. Many attendees signed up for the waiting list.\\n- We are also looking at other cross-platform solutions like [Google Flutter](https://flutter.io/) (a major comparison coming along), [Kotlin Native](https://github.com/JetBrains/kotlin-native), and [Apache Weex](https://weex.incubator.apache.org/) to understand the architectural differences and what we can learn from them to improve the overall performance of React Native.\\n- Switched to [react-navigation](https://github.com/react-community/react-navigation) for most of our apps, which has improved the overall performance.\\n- Also, announced [NativeBase Market](https://market.nativebase.io/) - A marketplace for React Native components and apps (for and by the developers).\\n\\n### Infinite Red\\n\\n- We want to introduce the [Reactotron](https://github.com/infinitered/reactotron). Check out the [introductory video](https://www.youtube.com/watch?v=tPBRfxswDjA). We\'ll be adding more features very soon!\\n- Organised Chain React Conference. It was awesome, thanks all for coming! [The videos are now online!](https://www.youtube.com/playlist?list=PLFHvL21g9bk3RxJ1Ut5nR_uTZFVOxu522)\\n\\n### Microsoft\\n\\n- [CodePush](https://github.com/Microsoft/code-push) has now been integrated into [Mobile Center](https://mobile.azure.com/). Existing users will have no change in their workflow.\\n  - Some people have reported an issue with duplicate apps - they already had an app on Mobile Center. We are working on resolving them, but if you have two apps, let us know, and we can merge them for you.\\n- Mobile Center now supports Push Notifications for CodePush. We also showed how a combination of Notifications and CodePush could be used for A/B testing apps - something unique to the ReactNative architecture.\\n- [VS Code](https://github.com/Microsoft/vscode) has a known debugging issue with ReactNative - the next release of the extension in a couple of days will be fixing the issue.\\n- Since there are many other teams also working on React Native inside Microsoft, we will work on getting better representation from all the groups for the next meeting.\\n\\n### Shoutem\\n\\n- Finished the process of making the React Native development easier on [Shoutem](https://shoutem.github.io/). You can use all the standard `react-native` commands when developing apps on Shoutem.\\n- We did a lot of work trying to figure out how to best approach the profiling on React Native. A big chunk of [documentation](/docs/performance) is outdated, and we\'ll do our best to create a pull request on the official docs or at least write some of our conclusions in a blog post.\\n- Switching our navigation solution to [react-navigation](https://github.com/react-community/react-navigation), so we might have some feedback soon.\\n- We released [a new HTML component](https://github.com/shoutem/ui/tree/develop/html) in our toolkit which transforms the raw HTML to the React Native components tree.\\n\\n### Wix\\n\\n- We started working on a pull request to [Metro Bundler](https://github.com/facebook/metro) with [react-native-repackager](https://github.com/wix/react-native-repackager) capabilities. We updated react-native-repackager to support RN 44 (which we use in production). We are using it for our mocking infrastructure for [detox](https://github.com/wix/detox).\\n- We have been covering the Wix app in detox tests for the last three weeks. It\'s an amazing learning experience of how to reduce manual QA in an app of this scale (over 40 engineers). We have resolved several issues with detox as a result, a new version was just published. I am happy to report that we are living up to the \\"zero flakiness policy\\" and the tests are passing consistently so far.\\n- Detox for Android is moving forward nicely. We are getting significant help from the community. We are expecting an initial version in about two weeks.\\n- [DetoxInstruments](https://github.com/wix/detoxinstruments), our performance testing tool, is getting a little bigger than we originally intended. We are now planning to turn it into a standalone tool that will not be tightly coupled to detox. It will allow investigating the performance of iOS apps in general. It will also be integrated with detox so we can run automated tests on performance metrics.\\n\\n## Next session\\n\\nThe next session is scheduled for August 16, 2017. As this was only our second meeting, we\'d like to know how do these notes benefit the React Native community. Feel free to ping me [on Twitter](https://twitter.com/TomislavTenodi) if you have any suggestion on how we should improve the output of the meeting."},{"id":"/2017/06/21/react-native-monthly-1","metadata":{"permalink":"/blog/2017/06/21/react-native-monthly-1","source":"@site/blog/2017-06-21-react-native-monthly-1.md","title":"React Native Monthly #1","description":"At Shoutem, we\'ve been fortunate enough to work with React Native from its very beginnings. We decided we wanted to be part of the amazing community from day one. Soon enough, we realized it\'s almost impossible to keep up with the pace the community was growing and improving. That\'s why we decided to organize a monthly meeting where all major React Native contributors can briefly present what their efforts and plans are.","date":"2017-06-21T00:00:00.000Z","formattedDate":"June 21, 2017","tags":[{"label":"engineering","permalink":"/blog/tags/engineering"}],"readingTime":5.22,"hasTruncateMarker":false,"authors":[{"name":"Tomislav Tenodi","title":"Product Manager at Shoutem","url":"https://github.com/tenodi","imageURL":"https://pbs.twimg.com/profile_images/877237660225609729/bKFDwfAq.jpg"}],"frontMatter":{"title":"React Native Monthly #1","author":"Tomislav Tenodi","authorTitle":"Product Manager at Shoutem","authorURL":"https://github.com/tenodi","authorImageURL":"https://pbs.twimg.com/profile_images/877237660225609729/bKFDwfAq.jpg","authorTwitter":"TomislavTenodi","tags":["engineering"]},"unlisted":false,"prevItem":{"title":"React Native Monthly #2","permalink":"/blog/2017/07/28/react-native-monthly-2"},"nextItem":{"title":"Better List Views in React Native","permalink":"/blog/2017/03/13/better-list-views"}},"content":"At [Shoutem](https://shoutem.github.io/), we\'ve been fortunate enough to work with React Native from its very beginnings. We decided we wanted to be part of the amazing community from day one. Soon enough, we realized it\'s almost impossible to keep up with the pace the community was growing and improving. That\'s why we decided to organize a monthly meeting where all major React Native contributors can briefly present what their efforts and plans are.\\n\\n## Monthly meetings\\n\\nWe had our first session of the monthly meeting on June 14, 2017. The mission for React Native Monthly is simple and straightforward: **improve the React Native community**. Presenting teams\' efforts eases collaboration between teams done offline.\\n\\n## Teams\\n\\nOn the first meeting, we had 8 teams join us:\\n\\n- [Airbnb](https://github.com/airbnb)\\n- [Callstack](https://github.com/callstack-io)\\n- [Expo](https://github.com/expo)\\n- [Facebook](https://github.com/facebook)\\n- [GeekyAnts](https://github.com/GeekyAnts)\\n- [Microsoft](https://github.com/microsoft)\\n- [Shoutem](https://github.com/shoutem)\\n- [Wix](https://github.com/wix)\\n\\nWe hope to have more core contributors join the upcoming sessions!\\n\\n## Notes\\n\\nAs teams\' plans might be of interest to a broader audience, we\'ll be sharing them here, on the React Native blog. So, here they are:\\n\\n### Airbnb\\n\\n- Plans to add some A11y (accessibility) APIs to `View` and the `AccessibilityInfo` native module.\\n- Will be investigating adding some APIs to native modules on Android to allow for specifying threads for them to run on.\\n- Have been investigating potential initialization performance improvements.\\n- Have been investigating some more sophisticated bundling strategies to use on top of \\"unbundle\\".\\n\\n### Callstack\\n\\n- Looking into improving the release process by using [Detox](https://github.com/wix/detox) for E2E testing. Pull request should land soon.\\n- Blob pull request they have been working on has been merged, subsequent pull requests coming up.\\n- Increasing [Haul](https://github.com/callstack-io/haul) adoption across internal projects to see how it performs compared to [Metro Bundler](https://github.com/facebook/metro-bundler). Working on better multi-threaded performance with the webpack team.\\n- Internally, they have implemented a better infrastructure to manage open source projects. Plans to be getting more stuff out in upcoming weeks.\\n- The React Native Europe conference is coming along, nothing interesting yet, but y\'all invited!\\n- Stepped back from [react-navigation](https://github.com/react-community/react-navigation) for a while to investigate alternatives (especially native navigations).\\n\\n### Expo\\n\\n- Working on making it possible to install npm modules in [Snack](https://snack.expo.io/), will be useful for libraries to add examples to documentation.\\n- Working with [Krzysztof](https://github.com/kmagiera) and other people at [Software Mansion](https://github.com/software-mansion) on a JSC update on Android and a gesture handling library.\\n- [Adam Miskiewicz](https://github.com/skevy) is transitioning his focus towards [react-navigation](https://github.com/react-community/react-navigation).\\n- [Create React Native App](https://github.com/react-community/create-react-native-app) is in the [Getting Started guide](/docs/getting-started) in the docs. Expo wants to encourage library authors to explain clearly whether their lib works with CRNA or not, and if so, explain how to set it up.\\n\\n### Facebook\\n\\n- React Native\'s packager is now [Metro Bundler](https://github.com/facebook/metro), in an independent repo. The Metro Bundler team in London is excited to address the needs of the community, improve modularity for additional use-cases beyond React Native, and increase responsiveness on issues and PRs.\\n- In the coming months, the React Native team will work on refining the APIs of primitive components. Expect improvements in layout quirks, accessibility, and flow typing.\\n- The React Native team also plans on improving core modularity this year, by refactoring to fully support 3rd party platforms such as Windows and macOS.\\n\\n### GeekyAnts\\n\\n- The team is working on a UI/UX design app (codename: Builder) which directly works with `.js` files. Right now, it supports only React Native. It\u2019s similar to Adobe XD and Sketch.\\n- The team is working hard so that you can load up an existing React Native app in the editor, make changes (visually, as a designer) and save the changes directly to the JS file.\\n- Folks are trying to bridge the gap between Designers and Developers and bring them on the same repo.\\n- Also, [NativeBase](https://github.com/GeekyAnts/NativeBase) recently reached 5,000 GitHub stars.\\n\\n### Microsoft\\n\\n- [CodePush](https://github.com/Microsoft/code-push) has now been integrated into [Mobile Center](https://mobile.azure.com/). This is the first step in providing a much more integrated experience with distribution, analytics and other services. See their announcement [here](https://microsoft.github.io/code-push/articles/CodePushOnMobileCenter.html).\\n- [VS Code](https://github.com/Microsoft/vscode) has a bug with debugging, they are working on fixing that right now and will have a new build.\\n- Investigating [Detox](https://github.com/wix/detox) for Integration testing, looking at JSC Context to get variables alongside crash reports.\\n\\n### Shoutem\\n\\n- Making it easier to work on Shoutem apps with tools from the React Native community. You will be able to use all the React Native commands to run the apps created on [Shoutem](https://shoutem.github.io/).\\n- Investigating profiling tools for React Native. They had a lot of problems setting it up and they will write some of the insights they discovered along the way.\\n- Shoutem is working on making it easier to integrate React Native with existing native apps. They will document the concept that they developed internally in the company, in order to get the feedback from the community.\\n\\n### Wix\\n\\n- Working internally to adopt [Detox](https://github.com/wix/detox) to move significant parts of the Wix app to \\"zero manual QA\\". As a result, Detox is being used heavily in a production setting by dozens of developers and maturing rapidly.\\n- Working to add support to the [Metro Bundler](https://github.com/facebook/metro) for overriding any file extension during the build. Instead of just \\"ios\\" and \\"android\\", it would support any custom extension like \\"e2e\\" or \\"detox\\". Plans to use this for E2E mocking. There\'s already a library out called [react-native-repackager](https://github.com/wix/react-native-repackager), now working on a PR.\\n- Investigating automation of performance tests. This is a new repo called [DetoxInstruments](https://github.com/wix/DetoxInstruments). You can take a look, it\'s being developed open source.\\n- Working with a contributor from KPN on Detox for Android and supporting real devices.\\n- Thinking about \\"Detox as a platform\\" to allow building other tools that need to automate the simulator/device. An example is [Storybook](https://github.com/storybooks/react-native-storybook) for React Native or Ram\'s idea for integration testing.\\n\\n## Next session\\n\\nMeetings will be held every four weeks. The next session is scheduled for July 12, 2017. As we just started with this meeting, we\'d like to know how do these notes benefit the React Native community. Feel free to ping me [on Twitter](https://twitter.com/TomislavTenodi) if you have any suggestion on what we should cover in the following sessions, or how we should improve the output of the meeting."},{"id":"/2017/03/13/better-list-views","metadata":{"permalink":"/blog/2017/03/13/better-list-views","source":"@site/blog/2017-03-13-better-list-views.md","title":"Better List Views in React Native","description":"Many of you have started playing with some of our new List components already after our teaser announcement in the community group, but we are officially announcing them today! No more ListViews or DataSources, stale rows, ignored bugs, or excessive memory consumption - with the latest React Native March 2017 release candidate (0.43-rc.1) you can pick from the new suite of components what best fits your use-case, with great perf and feature sets out of the box:","date":"2017-03-13T00:00:00.000Z","formattedDate":"March 13, 2017","tags":[{"label":"engineering","permalink":"/blog/tags/engineering"}],"readingTime":5.245,"hasTruncateMarker":false,"authors":[{"name":"Spencer Ahrens","title":"Software Engineer at Facebook","url":"https://github.com/sahrens","imageURL":"https://avatars1.githubusercontent.com/u/1509831"}],"frontMatter":{"title":"Better List Views in React Native","author":"Spencer Ahrens","authorTitle":"Software Engineer at Facebook","authorURL":"https://github.com/sahrens","authorImageURL":"https://avatars1.githubusercontent.com/u/1509831","authorTwitter":"sahrens2012","tags":["engineering"]},"unlisted":false,"prevItem":{"title":"React Native Monthly #1","permalink":"/blog/2017/06/21/react-native-monthly-1"},"nextItem":{"title":"idx: The Existential Function","permalink":"/blog/2017/03/13/idx-the-existential-function"}},"content":"Many of you have started playing with some of our new List components already after our [teaser announcement in the community group](https://www.facebook.com/groups/react.native.community/permalink/921378591331053), but we are officially announcing them today! No more `ListView`s or `DataSource`s, stale rows, ignored bugs, or excessive memory consumption - with the latest React Native March 2017 release candidate (`0.43-rc.1`) you can pick from the new suite of components what best fits your use-case, with great perf and feature sets out of the box:\\n\\n### [`<FlatList>`](/docs/flatlist)\\n\\nThis is the workhorse component for simple, performant lists. Provide an array of data and a `renderItem` function and you\'re good to go:\\n\\n```\\n<FlatList\\n  data={[{title: \'Title Text\', key: \'item1\'}, ...]}\\n  renderItem={({item}) => <ListItem title={item.title} />}\\n/>\\n```\\n\\n### [`<SectionList>`](/docs/sectionlist)\\n\\nIf you want to render a set of data broken into logical sections, maybe with section headers (e.g. in an alphabetical address book), and potentially with heterogeneous data and rendering (such as a profile view with some buttons followed by a composer, then a photo grid, then a friend grid, and finally a list of stories), this is the way to go.\\n\\n```\\n<SectionList\\n  renderItem={({item}) => <ListItem title={item.title} />}\\n  renderSectionHeader={({section}) => <H1 title={section.key} />}\\n  sections={[ // homogeneous rendering between sections\\n    {data: [...], key: ...},\\n    {data: [...], key: ...},\\n    {data: [...], key: ...},\\n  ]}\\n/>\\n\\n<SectionList\\n  sections={[ // heterogeneous rendering between sections\\n    {data: [...], key: ..., renderItem: ...},\\n    {data: [...], key: ..., renderItem: ...},\\n    {data: [...], key: ..., renderItem: ...},\\n  ]}\\n/>\\n```\\n\\n### [`<VirtualizedList>`](/docs/virtualizedlist)\\n\\nThe implementation behind the scenes with a more flexible API. Especially handy if your data is not in a plain array (e.g. an immutable list).\\n\\n## Features\\n\\nLists are used in many contexts, so we packed the new components full of features to handle the majority of use cases out of the box:\\n\\n- Scroll loading (`onEndReached`).\\n- Pull to refresh (`onRefresh` / `refreshing`).\\n- [Configurable](https://github.com/facebook/react-native/blob/master/Libraries/CustomComponents/Lists/ViewabilityHelper.js) viewability (VPV) callbacks (`onViewableItemsChanged` / `viewabilityConfig`).\\n- Horizontal mode (`horizontal`).\\n- Intelligent item and section separators.\\n- Multi-column support (`numColumns`)\\n- `scrollToEnd`, `scrollToIndex`, and `scrollToItem`\\n- Better Flow typing.\\n\\n### Some Caveats\\n\\n- The internal state of item subtrees is not preserved when content scrolls out of the render window. Make sure all your data is captured in the item data or external stores like Flux, Redux, or Relay.\\n\\n- These components are based on `PureComponent` which means that they will not re-render if `props` remains shallow-equal. Make sure that everything your `renderItem` function depends on directly is passed as a prop that is not `===` after updates, otherwise your UI may not update on changes. This includes the `data` prop and parent component state. For example:\\n\\n  ```jsx\\n  <FlatList\\n    data={this.state.data}\\n    renderItem={({item}) => (\\n      <MyItem\\n        item={item}\\n        onPress={() =>\\n          this.setState(oldState => ({\\n            selected: {\\n              // New instance breaks `===`\\n              ...oldState.selected, // copy old data\\n              [item.key]: !oldState.selected[item.key], // toggle\\n            },\\n          }))\\n        }\\n        selected={\\n          !!this.state.selected[item.key] // renderItem depends on state\\n        }\\n      />\\n    )}\\n    selected={\\n      // Can be any prop that doesn\'t collide with existing props\\n      this.state.selected // A change to selected should re-render FlatList\\n    }\\n  />\\n  ```\\n\\n- In order to constrain memory and enable smooth scrolling, content is rendered asynchronously offscreen. This means it\'s possible to scroll faster than the fill rate and momentarily see blank content. This is a tradeoff that can be adjusted to suit the needs of each application, and we are working on improving it behind the scenes.\\n\\n- By default, these new lists look for a `key` prop on each item and use that for the React key. Alternatively, you can provide a custom `keyExtractor` prop.\\n\\n## Performance\\n\\nBesides simplifying the API, the new list components also have significant performance enhancements, the main one being nearly constant memory usage for any number of rows. This is done by \'virtualizing\' elements that are outside of the render window by completely unmounting them from the component hierarchy and reclaiming the JS memory from the react components, along with the native memory from the shadow tree and the UI views. This has a catch which is that internal component state will not be preserved, so **make sure you track any important state outside of the components themselves, e.g. in Relay or Redux or Flux store.**\\n\\nLimiting the render window also reduces the amount of work that needs to be done by React and the native platform, e.g from view traversals. Even if you are rendering the last of a million elements, with these new lists there is no need to iterate through all those elements in order to render. You can even jump to the middle with `scrollToIndex` without excessive rendering.\\n\\nWe\'ve also made some improvements with scheduling which should help with application responsiveness. Items at the edge of the render window are rendered infrequently and at a lower priority after any active gestures or animations or other interactions have completed.\\n\\n## Advanced Usage\\n\\nUnlike `ListView`, all items in the render window are re-rendered any time any props change. Often this is fine because the windowing reduces the number of items to a constant number, but if your items are on the complex side, you should make sure to follow React best practices for performance and use `React.PureComponent` and/or `shouldComponentUpdate` as appropriate within your components to limit re-renders of the recursive subtree.\\n\\nIf you can calculate the height of your rows without rendering them, you can improve the user experience by providing the `getItemLayout` prop. This makes it much smoother to scroll to specific items with e.g. `scrollToIndex`, and will improve the scroll indicator UI because the height of the content can be determined without rendering it.\\n\\nIf you have an alternative data type, like an immutable list, `<VirtualizedList>` is the way to go. It takes a `getItem` prop that lets you return the item data for any given index and has looser flow typing.\\n\\nThere are also a bunch of parameters you can tweak if you have an unusual use case. For example, you can use `windowSize` to trade off memory usage vs. user experience, `maxToRenderPerBatch` to adjust fill rate vs. responsiveness, `onEndReachedThreshold` to control when scroll loading happens, and more.\\n\\n## Future Work\\n\\n- Migration of existing surfaces (ultimately deprecation of `ListView`).\\n- More features as we see/hear the need (let us know!).\\n- Sticky section header support.\\n- More performance optimizations.\\n- Support functional item components with state."},{"id":"/2017/03/13/idx-the-existential-function","metadata":{"permalink":"/blog/2017/03/13/idx-the-existential-function","source":"@site/blog/2017-03-13-idx-the-existential-function.md","title":"idx: The Existential Function","description":"At Facebook, we often need to access deeply nested values in data structures fetched with GraphQL. On the way to accessing these deeply nested values, it is common for one or more intermediate fields to be nullable. These intermediate fields may be null for a variety of reasons, from failed privacy checks to the mere fact that null happens to be the most flexible way to represent non-fatal errors.","date":"2017-03-13T00:00:00.000Z","formattedDate":"March 13, 2017","tags":[{"label":"engineering","permalink":"/blog/tags/engineering"}],"readingTime":1.89,"hasTruncateMarker":false,"authors":[{"name":"Timothy Yung","title":"Engineering Manager at Facebook","url":"https://github.com/yungsters","imageURL":"https://pbs.twimg.com/profile_images/1592444107/image.jpg"}],"frontMatter":{"title":"idx: The Existential Function","author":"Timothy Yung","authorTitle":"Engineering Manager at Facebook","authorURL":"https://github.com/yungsters","authorImageURL":"https://pbs.twimg.com/profile_images/1592444107/image.jpg","authorTwitter":"yungsters","tags":["engineering"]},"unlisted":false,"prevItem":{"title":"Better List Views in React Native","permalink":"/blog/2017/03/13/better-list-views"},"nextItem":{"title":"Introducing Create React Native App","permalink":"/blog/2017/03/13/introducing-create-react-native-app"}},"content":"At Facebook, we often need to access deeply nested values in data structures fetched with GraphQL. On the way to accessing these deeply nested values, it is common for one or more intermediate fields to be nullable. These intermediate fields may be null for a variety of reasons, from failed privacy checks to the mere fact that null happens to be the most flexible way to represent non-fatal errors.\\n\\nUnfortunately, accessing these deeply nested values is currently tedious and verbose.\\n\\n```jsx\\nprops.user &&\\n  props.user.friends &&\\n  props.user.friends[0] &&\\n  props.user.friends[0].friends;\\n```\\n\\nThere is [an ECMAScript proposal to introduce the existential operator](https://github.com/claudepache/es-optional-chaining) which will make this much more convenient. But until a time when that proposal is finalized, we want a solution that improves our quality of life, maintains existing language semantics, and encourages type safety with Flow.\\n\\nWe came up with an existential _function_ we call `idx`.\\n\\n```jsx\\nidx(props, _ => _.user.friends[0].friends);\\n```\\n\\nThe invocation in this code snippet behaves similarly to the boolean expression in the code snippet above, except with significantly less repetition. The `idx` function takes exactly two arguments:\\n\\n- Any value, typically an object or array into which you want to access a nested value.\\n- A function that receives the first argument and accesses a nested value on it.\\n\\nIn theory, the `idx` function will try-catch errors that are the result of accessing properties on null or undefined. If such an error is caught, it will return either null or undefined. (And you can see how this might be implemented in [idx.js](https://github.com/facebookincubator/idx/blob/master/packages/idx/src/idx.js).)\\n\\nIn practice, try-catching every nested property access is slow, and differentiating between specific kinds of TypeErrors is fragile. To deal with these shortcomings, we created a Babel plugin that transforms the above `idx` invocation into the following expression:\\n\\n```jsx\\nprops.user == null\\n  ? props.user\\n  : props.user.friends == null\\n  ? props.user.friends\\n  : props.user.friends[0] == null\\n  ? props.user.friends[0]\\n  : props.user.friends[0].friends;\\n```\\n\\nFinally, we added a custom Flow type declaration for `idx` that allows the traversal in the second argument to be properly type-checked while permitting nested access on nullable properties.\\n\\nThe function, Babel plugin, and Flow declaration are now [available on GitHub](https://github.com/facebookincubator/idx). They are used by installing the **idx** and **babel-plugin-idx** npm packages, and adding \u201cidx\u201d to the list of plugins in your `.babelrc` file."},{"id":"/2017/03/13/introducing-create-react-native-app","metadata":{"permalink":"/blog/2017/03/13/introducing-create-react-native-app","source":"@site/blog/2017-03-13-introducing-create-react-native-app.md","title":"Introducing Create React Native App","description":"Today we\u2019re announcing Create React Native App: a new tool that makes it significantly easier to get started with a React Native project! It\u2019s heavily inspired by the design of Create React App and is the product of a collaboration between Facebook and Expo (formerly Exponent).","date":"2017-03-13T00:00:00.000Z","formattedDate":"March 13, 2017","tags":[{"label":"engineering","permalink":"/blog/tags/engineering"}],"readingTime":1.815,"hasTruncateMarker":false,"authors":[{"name":"Adam Perry","title":"Software Engineer at Expo","url":"https://github.com/dikaiosune","imageURL":"https://avatars2.githubusercontent.com/u/6812281"}],"frontMatter":{"title":"Introducing Create React Native App","author":"Adam Perry","authorTitle":"Software Engineer at Expo","authorURL":"https://github.com/dikaiosune","authorImageURL":"https://avatars2.githubusercontent.com/u/6812281","authorTwitter":"dika10sune","tags":["engineering"],"youtubeVideoId":"9baaVjGdBqs"},"unlisted":false,"prevItem":{"title":"idx: The Existential Function","permalink":"/blog/2017/03/13/idx-the-existential-function"},"nextItem":{"title":"Using Native Driver for Animated","permalink":"/blog/2017/02/14/using-native-driver-for-animated"}},"content":"Today we\u2019re announcing [Create React Native App](https://github.com/react-community/create-react-native-app): a new tool that makes it significantly easier to get started with a React Native project! It\u2019s heavily inspired by the design of [Create React App](https://github.com/facebookincubator/create-react-app) and is the product of a collaboration between [Facebook](https://code.facebook.com) and [Expo](https://expo.io) (formerly Exponent).\\n\\nMany developers struggle with installing and configuring React Native\u2019s current native build dependencies, especially for Android. With Create React Native App, there\u2019s no need to use Xcode or Android Studio, and you can develop for your iOS device using Linux or Windows. This is accomplished using the Expo app, which loads and runs CRNA projects written in pure JavaScript without compiling any native code.\\n\\nTry creating a new project (replace with suitable yarn commands if you have it installed):\\n\\n```sh\\n$ npm i -g create-react-native-app\\n$ create-react-native-app my-project\\n$ cd my-project\\n$ npm start\\n```\\n\\nThis will start the React Native packager and print a QR code. Open it in the [Expo app](https://expo.io) to load your JavaScript. Calls to `console.log` are forwarded to your terminal. You can make use of any standard React Native APIs as well as the [Expo SDK](https://docs.expo.dev/versions/latest/).\\n\\n## What about native code?\\n\\nMany React Native projects have Java or Objective-C/Swift dependencies that need to be compiled. The Expo app does include APIs for camera, video, contacts, and more, and bundles popular libraries like [Airbnb\u2019s react-native-maps](https://docs.expo.dev/versions/latest/sdk/map-view/), or [Facebook authentication](https://docs.expo.dev/versions/latest/sdk/facebook/). However if you need a native code dependency that Expo doesn\u2019t bundle then you\u2019ll probably need to have your own build configuration for it. Just like Create React App, \u201cejecting\u201d is supported by CRNA.\\n\\nYou can run `npm run eject` to get a project very similar to what `react-native init` would generate. At that point you\u2019ll need Xcode and/or Android Studio just as you would if you started with `react-native init` , adding libraries with `react-native link` will work, and you\u2019ll have full control over the native code compilation process.\\n\\n## Questions? Feedback?\\n\\nCreate React Native App is now stable enough for general use, which means we\u2019re very eager to hear about your experience using it! You can find me [on Twitter](https://twitter.com/dika10sune) or open an issue on [the GitHub repository](https://github.com/react-community/create-react-native-app). Pull requests are very welcome!"},{"id":"/2017/02/14/using-native-driver-for-animated","metadata":{"permalink":"/blog/2017/02/14/using-native-driver-for-animated","source":"@site/blog/2017-02-14-using-native-driver-for-animated.md","title":"Using Native Driver for Animated","description":"For the past year, we\'ve been working on improving performance of animations that use the Animated library. Animations are very important to create a beautiful user experience but can also be hard to do right. We want to make it easy for developers to create performant animations without having to worry about some of their code causing it to lag.","date":"2017-02-14T00:00:00.000Z","formattedDate":"February 14, 2017","tags":[{"label":"engineering","permalink":"/blog/tags/engineering"}],"readingTime":6.09,"hasTruncateMarker":false,"authors":[{"name":"Janic Duplessis","title":"Software Engineer at App & Flow","url":"https://twitter.com/janicduplessis","imageURL":"https://secure.gravatar.com/avatar/8d6b6c0f5b228b0a8566a69de448b9dd?s=128"}],"frontMatter":{"title":"Using Native Driver for Animated","author":"Janic Duplessis","authorTitle":"Software Engineer at App & Flow","authorURL":"https://twitter.com/janicduplessis","authorImageURL":"https://secure.gravatar.com/avatar/8d6b6c0f5b228b0a8566a69de448b9dd?s=128","authorTwitter":"janicduplessis","tags":["engineering"]},"unlisted":false,"prevItem":{"title":"Introducing Create React Native App","permalink":"/blog/2017/03/13/introducing-create-react-native-app"},"nextItem":{"title":"A Monthly Release Cadence: Releasing December and January RC","permalink":"/blog/2017/01/07/monthly-release-cadence"}},"content":"For the past year, we\'ve been working on improving performance of animations that use the Animated library. Animations are very important to create a beautiful user experience but can also be hard to do right. We want to make it easy for developers to create performant animations without having to worry about some of their code causing it to lag.\\n\\n## What is this?\\n\\nThe Animated API was designed with a very important constraint in mind, it is serializable. This means we can send everything about the animation to native before it has even started and allows native code to perform the animation on the UI thread without having to go through the bridge on every frame. It is very useful because once the animation has started, the JS thread can be blocked and the animation will still run smoothly. In practice this can happen a lot because user code runs on the JS thread and React renders can also lock JS for a long time.\\n\\n## A bit of history...\\n\\nThis project started about a year ago, when Expo built the li.st app on Android. [Krzysztof Magiera](https://twitter.com/kzzzf) was contracted to build the initial implementation on Android. It ended up working well and li.st was the first app to ship with native driven animations using Animated. A few months later, [Brandon Withrow](https://github.com/buba447) built the initial implementation on iOS. After that, [Ryan Gomba](https://twitter.com/ryangomba) and myself worked on adding missing features like support for `Animated.event` as well as squash bugs we found when using it in production apps. This was truly a community effort and I would like to thanks everyone that was involved as well as Expo for sponsoring a large part of the development. It is now used by `Touchable` components in React Native as well as for navigation animations in the newly released [React Navigation](https://github.com/react-community/react-navigation) library.\\n\\n## How does it work?\\n\\nFirst, let\'s check out how animations currently work using Animated with the JS driver. When using Animated, you declare a graph of nodes that represent the animations that you want to perform, and then use a driver to update an Animated value using a predefined curve. You may also update an Animated value by connecting it to an event of a `View` using `Animated.event`.\\n\\n![](/blog/assets/animated-diagram.png)\\n\\nHere\'s a breakdown of the steps for an animation and where it happens:\\n\\n- JS: The animation driver uses `requestAnimationFrame` to execute on every frame and update the value it drives using the new value it calculates based on the animation curve.\\n- JS: Intermediate values are calculated and passed to a props node that is attached to a `View`.\\n- JS: The `View` is updated using `setNativeProps`.\\n- JS to Native bridge.\\n- Native: The `UIView` or `android.View` is updated.\\n\\nAs you can see, most of the work happens on the JS thread. If it is blocked the animation will skip frames. It also needs to go through the JS to Native bridge on every frame to update native views.\\n\\nWhat the native driver does is move all of these steps to native. Since Animated produces a graph of animated nodes, it can be serialized and sent to native only once when the animation starts, eliminating the need to callback into the JS thread; the native code can take care of updating the views directly on the UI thread on every frame.\\n\\nHere\'s an example of how we can serialize an animated value and an interpolation node (not the exact implementation, just an example).\\n\\nCreate the native value node, this is the value that will be animated:\\n\\n```\\nNativeAnimatedModule.createNode({\\n  id: 1,\\n  type: \'value\',\\n  initialValue: 0,\\n});\\n```\\n\\nCreate the native interpolation node, this tells the native driver how to interpolate a value:\\n\\n```\\nNativeAnimatedModule.createNode({\\n  id: 2,\\n  type: \'interpolation\',\\n  inputRange: [0, 10],\\n  outputRange: [10, 0],\\n  extrapolate: \'clamp\',\\n});\\n```\\n\\nCreate the native props node, this tells the native driver which prop on the view it is attached to:\\n\\n```\\nNativeAnimatedModule.createNode({\\n  id: 3,\\n  type: \'props\',\\n  properties: [\'style.opacity\'],\\n});\\n```\\n\\nConnect nodes together:\\n\\n```\\nNativeAnimatedModule.connectNodes(1, 2);\\nNativeAnimatedModule.connectNodes(2, 3);\\n```\\n\\nConnect the props node to a view:\\n\\n```\\nNativeAnimatedModule.connectToView(3, ReactNative.findNodeHandle(viewRef));\\n```\\n\\nWith that, the native animated module has all the info it needs to update the native views directly without having to go to JS to calculate any value.\\n\\nAll there is left to do is actually start the animation by specifying what type of animation curve we want and what animated value to update. Timing animations can also be simplified by calculating every frame of the animation in advance in JS to make the native implementation smaller.\\n\\n```\\nNativeAnimatedModule.startAnimation({\\n  type: \'timing\',\\n  frames: [0, 0.1, 0.2, 0.4, 0.65, ...],\\n  animatedValueId: 1,\\n});\\n```\\n\\nAnd now here\'s the breakdown of what happens when the animation runs:\\n\\n- Native: The native animation driver uses `CADisplayLink` or `android.view.Choreographer` to execute on every frame and update the value it drives using the new value it calculates based on the animation curve.\\n- Native: Intermediate values are calculated and passed to a props node that is attached to a native view.\\n- Native: The `UIView` or `android.View` is updated.\\n\\nAs you can see, no more JS thread and no more bridge which means faster animations! \ud83c\udf89\ud83c\udf89\\n\\n## How do I use this in my app?\\n\\nFor normal animations the answer is simple, just add `useNativeDriver: true` to the animation config when starting it.\\n\\nBefore:\\n\\n```\\nAnimated.timing(this.state.animatedValue, {\\n  toValue: 1,\\n  duration: 500,\\n}).start();\\n```\\n\\nAfter:\\n\\n```\\nAnimated.timing(this.state.animatedValue, {\\n  toValue: 1,\\n  duration: 500,\\n  useNativeDriver: true, // <-- Add this\\n}).start();\\n```\\n\\nAnimated values are only compatible with one driver so if you use native driver when starting an animation on a value, make sure every animation on that value also uses the native driver.\\n\\nIt also works with `Animated.event`, this is very useful if you have an animation that must follow the scroll position because without the native driver it will always run a frame behind of the gesture because of the async nature of React Native.\\n\\nBefore:\\n\\n```\\n<ScrollView\\n  scrollEventThrottle={16}\\n  onScroll={Animated.event(\\n    [{ nativeEvent: { contentOffset: { y: this.state.animatedValue } } }]\\n  )}\\n>\\n  {content}\\n</ScrollView>\\n```\\n\\nAfter:\\n\\n```\\n<Animated.ScrollView // <-- Use the Animated ScrollView wrapper\\n  scrollEventThrottle={1} // <-- Use 1 here to make sure no events are ever missed\\n  onScroll={Animated.event(\\n    [{ nativeEvent: { contentOffset: { y: this.state.animatedValue } } }],\\n    { useNativeDriver: true } // <-- Add this\\n  )}\\n>\\n  {content}\\n</Animated.ScrollView>\\n```\\n\\n## Caveats\\n\\nNot everything you can do with Animated is currently supported in Native Animated. The main limitation is that you can only animate non-layout properties, things like `transform` and `opacity` will work but Flexbox and position properties won\'t. Another one is with `Animated.event`, it will only work with direct events and not bubbling events. This means it does not work with `PanResponder` but does work with things like `ScrollView#onScroll`.\\n\\nNative Animated has also been part of React Native for quite a while but has never been documented because it was considered experimental. Because of that make sure you are using a recent version (0.40+) of React Native if you want to use this feature.\\n\\n## Resources\\n\\nFor more information about animated I recommend watching [this talk](https://www.youtube.com/watch?v=xtqUJVqpKNo) by [Christopher Chedeau](https://twitter.com/Vjeux).\\n\\nIf you want a deep dive into animations and how offloading them to native can improve user experience there is also [this talk](https://www.youtube.com/watch?v=qgSMjYWqBk4) by [Krzysztof Magiera](https://twitter.com/kzzzf)."},{"id":"/2017/01/07/monthly-release-cadence","metadata":{"permalink":"/blog/2017/01/07/monthly-release-cadence","source":"@site/blog/2017-01-07-monthly-release-cadence.md","title":"A Monthly Release Cadence: Releasing December and January RC","description":"Shortly after React Native was introduced, we started releasing every two weeks to help the community adopt new features, while keeping versions stable for production use. At Facebook we had to stabilize the codebase every two weeks for the release of our production iOS apps, so we decided to release the open source versions at the same pace. Now, many of the Facebook apps ship once per week, especially on Android. Because we ship from master weekly, we need to keep it quite stable. So the bi-weekly release cadence doesn\'t even benefit internal contributors anymore.","date":"2017-01-07T00:00:00.000Z","formattedDate":"January 7, 2017","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":1.83,"hasTruncateMarker":false,"authors":[{"name":"Eric Vicenti","title":"Engineer at Facebook","url":"https://twitter.com/EricVicenti","imageURL":"https://secure.gravatar.com/avatar/077ad5372b65567fe952a99f3b627048?s=128"}],"frontMatter":{"title":"A Monthly Release Cadence: Releasing December and January RC","author":"Eric Vicenti","authorTitle":"Engineer at Facebook","authorURL":"https://twitter.com/EricVicenti","authorImageURL":"https://secure.gravatar.com/avatar/077ad5372b65567fe952a99f3b627048?s=128","authorTwitter":"EricVicenti","tags":["announcement"]},"unlisted":false,"prevItem":{"title":"Using Native Driver for Animated","permalink":"/blog/2017/02/14/using-native-driver-for-animated"},"nextItem":{"title":"Easier Upgrades Thanks to Git","permalink":"/blog/2016/12/05/easier-upgrades"}},"content":"Shortly after React Native was introduced, we started releasing every two weeks to help the community adopt new features, while keeping versions stable for production use. At Facebook we had to stabilize the codebase every two weeks for the release of our production iOS apps, so we decided to release the open source versions at the same pace. Now, many of the Facebook apps ship once per week, especially on Android. Because we ship from master weekly, we need to keep it quite stable. So the bi-weekly release cadence doesn\'t even benefit internal contributors anymore.\\n\\nWe frequently hear feedback from the community that the release rate is hard to keep up with. Tools like [Expo](https://expo.io/) had to skip every other release in order to manage the rapid change in version. So it seems clear that the bi-weekly releases did not serve the community well.\\n\\n### Now releasing monthly\\n\\nWe\'re happy to announce the new monthly release cadence, and the December 2016 release, `v0.40`, which has been stabilizing for all last month and is ready to adopt. (Just make sure to [update headers in your native modules on iOS](https://github.com/facebook/react-native/releases/tag/v0.40.0)).\\n\\nAlthough it may vary a few days to avoid weekends or handle unforeseen issues, you can now expect a given release to be available on the first day of the month, and released on the last.\\n\\n### Use the current month for the best support\\n\\nThe January release candidate is ready to try, and you can [see what\'s new here](https://github.com/facebook/react-native/releases/tag/v0.41.0-rc.0).\\n\\nTo see what changes are coming and provide better feedback to React Native contributors, always use the current month\'s release candidate when possible. By the time each version is released at the end of the month, the changes it contains will have been shipped in production Facebook apps for over two weeks.\\n\\nYou can easily upgrade your app with the new [react-native-git-upgrade](/blog/2016/12/05/easier-upgrades) command:\\n\\n```\\nnpm install -g react-native-git-upgrade\\nreact-native-git-upgrade 0.41.0-rc.0\\n```\\n\\nWe hope this simpler approach will make it easier for the community to keep track of changes in React Native, and to adopt new versions as quickly as possible!\\n\\n(Thanks go to [Martin Konicek](https://github.com/mkonicek) for coming up with this plan and [Mike Grabowski](https://github.com/grabbou) for making it happen)"},{"id":"/2016/12/05/easier-upgrades","metadata":{"permalink":"/blog/2016/12/05/easier-upgrades","source":"@site/blog/2016-12-05-easier-upgrades.md","title":"Easier Upgrades Thanks to Git","description":"Upgrading to new versions of React Native has been difficult. You might have seen something like this before:","date":"2016-12-05T00:00:00.000Z","formattedDate":"December 5, 2016","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":3.92,"hasTruncateMarker":false,"authors":[{"name":"Nicolas Cuillery","title":"JavaScript consultant and trainer at Zenika","url":"https://twitter.com/ncuillery","imageURL":"https://fr.gravatar.com/userimage/78328995/184460def705a160fd8edadc04f60eaf.jpg?size=128"}],"frontMatter":{"title":"Easier Upgrades Thanks to Git","author":"Nicolas Cuillery","authorTitle":"JavaScript consultant and trainer at Zenika","authorURL":"https://twitter.com/ncuillery","authorImageURL":"https://fr.gravatar.com/userimage/78328995/184460def705a160fd8edadc04f60eaf.jpg?size=128","authorTwitter":"ncuillery","tags":["announcement"]},"unlisted":false,"prevItem":{"title":"A Monthly Release Cadence: Releasing December and January RC","permalink":"/blog/2017/01/07/monthly-release-cadence"},"nextItem":{"title":"Introducing Button, Faster Installs with Yarn, and a Public Roadmap","permalink":"/blog/2016/11/08/introducing-button-yarn-and-a-public-roadmap"}},"content":"Upgrading to new versions of React Native has been difficult. You might have seen something like this before:\\n\\n![](/blog/assets/git-upgrade-conflict.png)\\n\\nNone of those options is ideal. By overwriting the file we lose our local changes. By not overwriting we don\'t get the latest updates.\\n\\nToday I am proud to introduce a new tool that helps solve this problem. The tool is called `react-native-git-upgrade` and uses Git behind the scenes to resolve conflicts automatically whenever possible.\\n\\n## Usage\\n\\n> **Requirement**: Git has to be available in the `PATH`. Your project doesn\'t have to be managed by Git.\\n\\nInstall `react-native-git-upgrade` globally:\\n\\n```shell\\n$ npm install -g react-native-git-upgrade\\n```\\n\\nor, using [Yarn](https://yarnpkg.com/):\\n\\n```shell\\n$ yarn global add react-native-git-upgrade\\n```\\n\\nThen, run it inside your project directory:\\n\\n```shell\\n$ cd MyProject\\n$ react-native-git-upgrade 0.38.0\\n```\\n\\n> Note: Do **not** run \'npm install\' to install a new version of `react-native`. The tool needs to be able to compare the old and new project template to work correctly. Simply run it inside your app folder as shown above, while still on the old version.\\n\\nExample output:\\n\\n![](/blog/assets/git-upgrade-output.png)\\n\\nYou can also run `react-native-git-upgrade` with no arguments to upgrade to the latest version of React Native.\\n\\nWe try to preserve your changes in Android and iOS build files, so you don\'t need to run `react-native link` after an upgrade.\\n\\nWe have designed the implementation to be as little intrusive as possible. It is entirely based on a local Git repository created on-the-fly in a temporary directory. It won\'t interfere with your project repository (no matter what VCS you use: Git, SVN, Mercurial, ... or none). Your sources are restored in case of unexpected errors.\\n\\n## How does it work?\\n\\nThe key step is generating a Git patch. The patch contains all the changes made in the React Native templates between the version your app is using and the new version.\\n\\nTo obtain this patch, we need to generate an app from the templates embedded in the `react-native` package inside your `node_modules` directory (these are the same templates the `react-native init` commands uses). Then, after the native apps have been generated from the templates in both the current version and the new version, Git is able to produce a patch that is adapted to your project (i.e. containing your app name):\\n\\n```\\n[...]\\n\\ndiff --git a/ios/MyAwesomeApp/Info.plist b/ios/MyAwesomeApp/Info.plist\\nindex e98ebb0..2fb6a11 100644\\n--- a/ios/MyAwesomeApp/Info.plist\\n+++ b/ios/MyAwesomeApp/Info.plist\\n@@ -45,7 +45,7 @@\\n        <dict>\\n            <key>localhost</key>\\n            <dict>\\n-               <key>NSTemporaryExceptionAllowsInsecureHTTPLoads</key>\\n+               <key>NSExceptionAllowsInsecureHTTPLoads</key>\\n                <true/>\\n            </dict>\\n        </dict>\\n[...]\\n```\\n\\nAll we need now is to apply this patch to your source files. While the old `react-native upgrade` process would have prompted you for any small difference, Git is able to merge most of the changes automatically using its 3-way merge algorithm and eventually leave us with familiar conflict delimiters:\\n\\n```\\n    13B07F951A680F5B00A75B9A /* Release */ = {\\n      isa = XCBuildConfiguration;\\n      buildSettings = {\\n        ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;\\n<<<<<<< ours\\n        CODE_SIGN_IDENTITY = \\"iPhone Developer\\";\\n        FRAMEWORK_SEARCH_PATHS = (\\n          \\"$(inherited)\\",\\n          \\"$(PROJECT_DIR)/HockeySDK.embeddedframework\\",\\n          \\"$(PROJECT_DIR)/HockeySDK-iOS/HockeySDK.embeddedframework\\",\\n        );\\n=======\\n        CURRENT_PROJECT_VERSION = 1;\\n>>>>>>> theirs\\n        HEADER_SEARCH_PATHS = (\\n          \\"$(inherited)\\",\\n          /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include,\\n          \\"$(SRCROOT)/../node_modules/react-native/React/**\\",\\n          \\"$(SRCROOT)/../node_modules/react-native-code-push/ios/CodePush/**\\",\\n        );\\n```\\n\\nThese conflicts are generally easy to reason about. The delimiter **ours** stands for \\"your team\\" whereas **theirs** could be seen as \\"the React Native team\\".\\n\\n## Why introduce a new global package?\\n\\nReact Native comes with a global CLI (the [react-native-cli](https://www.npmjs.com/package/react-native-cli) package) which delegates commands to the local CLI embedded in the `node_modules/react-native/local-cli` directory.\\n\\nAs we mentioned above, the process has to be started from your current React Native version. If we had embedded the implementation in the local-cli, you wouldn\'t be able to enjoy this feature when using old versions of React Native. For example, you wouldn\'t be able to upgrade from 0.29.2 to 0.38.0 if this new upgrade code was only released in 0.38.0.\\n\\nUpgrading based on Git is a big improvement in developer experience and it is important to make it available to everyone. By using a separate package [react-native-git-upgrade](https://www.npmjs.com/package/react-native-git-upgrade) installed globally you can use this new code today no matter what version of React Native your project is using.\\n\\nOne more reason is the recent [Yeoman wipeout](https://twitter.com/martinkonicek/status/800730190141857793) by Martin Konicek. We didn\'t want to get these Yeoman dependencies back into the `react-native` package to be able to evaluate the old template in order to create the patch.\\n\\n## Try it out and provide feedback\\n\\nAs a conclusion, I would say, enjoy the feature and feel free [to suggest improvements, report issues](https://github.com/facebook/react-native/issues) and especially [send pull requests](https://github.com/facebook/react-native/pulls). Each environment is a bit different and each React Native project is different, and we need your feedback to make this work well for everyone.\\n\\n### Thank you!\\n\\nI would like to thank the awesome companies [Zenika](https://www.zenika.com) and [M6 Web (archived)](https://web.archive.org/web/20161230163633/http://www.groupem6.fr:80/le-groupe_en/activites/diversifications/m6-web.html) without whom none of this would have been possible!"},{"id":"/2016/11/08/introducing-button-yarn-and-a-public-roadmap","metadata":{"permalink":"/blog/2016/11/08/introducing-button-yarn-and-a-public-roadmap","source":"@site/blog/2016-11-08-introducing-button-yarn-and-a-public-roadmap.md","title":"Introducing Button, Faster Installs with Yarn, and a Public Roadmap","description":"We have heard from many people that there is so much work happening with React Native, it can be tough to keep track of what\'s going on. To help communicate what work is in progress, we are now publishing a roadmap for React Native. At a high level, this work can be broken down into three priorities:","date":"2016-11-08T00:00:00.000Z","formattedDate":"November 8, 2016","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":2.53,"hasTruncateMarker":false,"authors":[{"name":"H\xe9ctor Ramos","title":"Developer Advocate at Facebook","url":"https://twitter.com/hectorramos","imageURL":"https://s.gravatar.com/avatar/f2223874e66e884c99087e452501f2da?s=128"}],"frontMatter":{"title":"Introducing Button, Faster Installs with Yarn, and a Public Roadmap","author":"H\xe9ctor Ramos","authorTitle":"Developer Advocate at Facebook","authorURL":"https://twitter.com/hectorramos","authorImageURL":"https://s.gravatar.com/avatar/f2223874e66e884c99087e452501f2da?s=128","authorTwitter":"hectorramos","tags":["announcement"]},"unlisted":false,"prevItem":{"title":"Easier Upgrades Thanks to Git","permalink":"/blog/2016/12/05/easier-upgrades"},"nextItem":{"title":"0.36: Headless JS, the Keyboard API, & more","permalink":"/blog/2016/10/25/0.36-headless-js-the-keyboard-api-and-more"}},"content":"We have heard from many people that there is so much work happening with React Native, it can be tough to keep track of what\'s going on. To help communicate what work is in progress, we are now publishing a [roadmap for React Native](https://github.com/facebook/react-native/wiki/Roadmap). At a high level, this work can be broken down into three priorities:\\n\\n- **Core Libraries**. Adding more functionality to the most useful components and APIs.\\n- **Stability**. Improve the underlying infrastructure to reduce bugs and improve code quality.\\n- **Developer Experience**. Help React Native developers move faster\\n\\nIf you have suggestions for features that you think would be valuable on the roadmap, check out [Canny](https://react-native.canny.io/feature-requests), where you can suggest new features and discuss existing proposals.\\n\\n## What\'s new in React Native\\n\\n[Version 0.37 of React Native](https://github.com/facebook/react-native/releases/tag/v0.37.0), released today, introduces a new core component to make it really easy to add a touchable Button to any app. We\'re also introducing support for the new [Yarn](https://yarnpkg.com/) package manager, which should speed up the whole process of updating your app\'s dependencies.\\n\\n## Introducing Button\\n\\nToday we\'re introducing a basic `<Button />` component that looks great on every platform. This addresses one of the most common pieces of feedback we get: React Native is one of the only mobile development toolkits without a button ready to use out of the box.\\n\\n![Simple Button on Android, iOS](/blog/assets/button-android-ios.png)\\n\\n```\\n<Button\\n  onPress={onPressMe}\\n  title=\\"Press Me\\"\\n  accessibilityLabel=\\"Learn more about this Simple Button\\"\\n/>\\n```\\n\\nExperienced React Native developers know how to make a button: use TouchableOpacity for the default look on iOS, TouchableNativeFeedback for the ripple effect on Android, then apply a few styles. Custom buttons aren\'t particularly hard to build or install, but we aim to make React Native radically easy to learn. With the addition of a basic button into core, newcomers will be able to develop something awesome in their first day, rather than spending that time formatting a Button and learning about Touchable nuances.\\n\\nButton is meant to work great and look native on every platform, so it won\'t support all the bells and whistles that custom buttons do. It is a great starting point, but is not meant to replace all your existing buttons. To learn more, check out the [new Button documentation](/docs/button), complete with a runnable example!\\n\\n## Speed up `react-native init` using Yarn\\n\\nYou can now use [Yarn](https://yarnpkg.com/), the new package manager for JavaScript, to speed up `react-native init` significantly. To see the speedup please [install yarn](https://yarnpkg.com/en/docs/install) and upgrade your `react-native-cli` to 1.2.0:\\n\\n```sh\\n$ npm install -g react-native-cli\\n```\\n\\nYou should now see \u201cUsing yarn\u201d when setting up new apps:\\n\\n![Using yarn](/blog/assets/yarn-rncli.png)\\n\\nIn simple local testing `react-native init` finished in **about 1 minute on a good network** (vs around 3 minutes when using npm 3.10.8). Installing yarn is optional but highly recommended.\\n\\n## Thank you!\\n\\nWe\'d like to thank everyone who contributed to this release. The full [release notes](https://github.com/facebook/react-native/releases/tag/v0.37.0) are now available on GitHub. With over two dozen bug fixes and new features, React Native just keeps getting better thanks to you."},{"id":"/2016/10/25/0.36-headless-js-the-keyboard-api-and-more","metadata":{"permalink":"/blog/2016/10/25/0.36-headless-js-the-keyboard-api-and-more","source":"@site/blog/2016-10-25-0.36-headless-js-the-keyboard-api-and-more.md","title":"0.36: Headless JS, the Keyboard API, & more","description":"Today we are releasing React Native 0.36. Read on to learn more about what\'s new.","date":"2016-10-25T00:00:00.000Z","formattedDate":"October 25, 2016","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":2.22,"hasTruncateMarker":false,"authors":[{"name":"H\xe9ctor Ramos","title":"Developer Advocate at Facebook","url":"https://twitter.com/hectorramos","imageURL":"https://s.gravatar.com/avatar/f2223874e66e884c99087e452501f2da?s=128"}],"frontMatter":{"title":"0.36: Headless JS, the Keyboard API, & more","author":"H\xe9ctor Ramos","authorTitle":"Developer Advocate at Facebook","authorURL":"https://twitter.com/hectorramos","authorImageURL":"https://s.gravatar.com/avatar/f2223874e66e884c99087e452501f2da?s=128","authorTwitter":"hectorramos","tags":["announcement"]},"unlisted":false,"prevItem":{"title":"Introducing Button, Faster Installs with Yarn, and a Public Roadmap","permalink":"/blog/2016/11/08/introducing-button-yarn-and-a-public-roadmap"},"nextItem":{"title":"Expo Talks: Adam on Unraveling Navigation","permalink":"/blog/2016/09/08/exponent-talks-unraveling-navigation"}},"content":"Today we are releasing [React Native 0.36](https://github.com/facebook/react-native/releases/tag/v0.36.0). Read on to learn more about what\'s new.\\n\\n## Headless JS\\n\\nHeadless JS is a way to run tasks in JavaScript while your app is in the background. It can be used, for example, to sync fresh data, handle push notifications, or play music. It is only available on Android, for now.\\n\\nTo get started, define your async task in a dedicated file (e.g. `SomeTaskName.js`):\\n\\n```jsx\\nmodule.exports = async taskData => {\\n  // Perform your task here.\\n};\\n```\\n\\nNext, register your task in on `AppRegistry`:\\n\\n```jsx\\nAppRegistry.registerHeadlessTask(\'SomeTaskName\', () =>\\n  require(\'SomeTaskName\'),\\n);\\n```\\n\\nUsing Headless JS does require some native Java code to be written in order to allow you to start up the service when needed. Take a look at our new [Headless JS docs](/docs/headless-js-android) to learn more!\\n\\n## The Keyboard API\\n\\nWorking with the on-screen keyboard is now easier with [`Keyboard`](/docs/keyboard). You can now listen for native keyboard events and react to them. For example, to dismiss the active keyboard, simply call `Keyboard.dismiss()`:\\n\\n```js\\nimport {Keyboard} from \'react-native\';\\n\\n// Hide that keyboard!\\nKeyboard.dismiss();\\n```\\n\\n## Animated Division\\n\\nCombining two animated values via addition, multiplication, and modulo are already supported by React Native. With version 0.36, combining two [animated values via division](/docs/animated#divide) is now possible. There are some cases where an animated value needs to invert another animated value for calculation. An example is inverting a scale (2x --\x3e 0.5x):\\n\\n```\\nconst a = Animated.Value(1);\\nconst b = Animated.divide(1, a);\\n\\nAnimated.spring(a, {\\n  toValue: 2,\\n}).start();\\n```\\n\\n`b` will then follow `a`\'s spring animation and produce the value of `1 / a`.\\n\\nThe basic usage is like this:\\n\\n```\\n<Animated.View style={{transform: [{scale: a}]}}>\\n  <Animated.Image style={{transform: [{scale: b}]}} />\\n<Animated.View>\\n```\\n\\nIn this example, the inner image won\'t get stretched at all because the parent\'s scaling gets cancelled out. If you\'d like to learn more, check out the [Animations guide](/docs/animations).\\n\\n## Dark Status Bars\\n\\nA new `barStyle` value has been added to `StatusBar`: `dark-content`. With this addition, you can now use [`barStyle`](/docs/statusbar#barstyle) on both Android and iOS. The behavior will now be the following:\\n\\n- `default`: Use the platform default (light on iOS, dark on Android).\\n- `light-content`: Use a light status bar with black text and icons.\\n- `dark-content`: Use a dark status bar with white text and icons.\\n\\n## ...and more\\n\\nThe above is just a sample of what has changed in 0.36. Check out the [release notes on GitHub](https://github.com/facebook/react-native/releases/tag/v0.36.0) to see the full list of new features, bug fixes, and breaking changes.\\n\\nYou can upgrade to 0.36 by running the following commands in a terminal:\\n\\n```bash\\n$ npm install --save react-native@0.36\\n$ react-native upgrade\\n```"},{"id":"/2016/09/08/exponent-talks-unraveling-navigation","metadata":{"permalink":"/blog/2016/09/08/exponent-talks-unraveling-navigation","source":"@site/blog/2016-09-08-exponent-talks-unraveling-navigation.md","title":"Expo Talks: Adam on Unraveling Navigation","description":"Adam Miskiewicz from Expo talks about mobile navigation and the ex-navigation React Native library at Expo\'s office hours last week.","date":"2016-09-08T00:00:00.000Z","formattedDate":"September 8, 2016","tags":[{"label":"videos","permalink":"/blog/tags/videos"}],"readingTime":0.1,"hasTruncateMarker":false,"authors":[{"name":"H\xe9ctor Ramos","title":"Developer Advocate at Facebook","url":"https://twitter.com/hectorramos","imageURL":"https://s.gravatar.com/avatar/f2223874e66e884c99087e452501f2da?s=128"}],"frontMatter":{"title":"Expo Talks: Adam on Unraveling Navigation","author":"H\xe9ctor Ramos","authorTitle":"Developer Advocate at Facebook","authorURL":"https://twitter.com/hectorramos","authorImageURL":"https://s.gravatar.com/avatar/f2223874e66e884c99087e452501f2da?s=128","authorTwitter":"hectorramos","youtubeVideoId":"oeSjTxVkMhc","tags":["videos"]},"unlisted":false,"prevItem":{"title":"0.36: Headless JS, the Keyboard API, & more","permalink":"/blog/2016/10/25/0.36-headless-js-the-keyboard-api-and-more"},"nextItem":{"title":"Right-to-Left Layout Support For React Native Apps","permalink":"/blog/2016/08/19/right-to-left-support-for-react-native-apps"}},"content":"[Adam Miskiewicz](https://twitter.com/skevy) from [Expo](https://expo.io/) talks about mobile navigation and the [`ex-navigation`](https://github.com/exponent/ex-navigation) React Native library at Expo\'s office hours last week."},{"id":"/2016/08/19/right-to-left-support-for-react-native-apps","metadata":{"permalink":"/blog/2016/08/19/right-to-left-support-for-react-native-apps","source":"@site/blog/2016-08-19-right-to-left-support-for-react-native-apps.md","title":"Right-to-Left Layout Support For React Native Apps","description":"After launching an app to the app stores, internationalization is the next step to further your audience reach. Over 20 countries and numerous people around the world use Right-to-Left (RTL) languages. Thus, making your app support RTL for them is necessary.","date":"2016-08-19T00:00:00.000Z","formattedDate":"August 19, 2016","tags":[{"label":"engineering","permalink":"/blog/tags/engineering"}],"readingTime":6.63,"hasTruncateMarker":false,"authors":[{"name":"Mengjue (Mandy) Wang","title":"Software Engineer Intern at Facebook","url":"https://github.com/MengjueW","imageURL":"https://avatars0.githubusercontent.com/u/13987140?v=3&s=128"}],"frontMatter":{"title":"Right-to-Left Layout Support For React Native Apps","author":"Mengjue (Mandy) Wang","authorTitle":"Software Engineer Intern at Facebook","authorURL":"https://github.com/MengjueW","authorImageURL":"https://avatars0.githubusercontent.com/u/13987140?v=3&s=128","tags":["engineering"]},"unlisted":false,"prevItem":{"title":"Expo Talks: Adam on Unraveling Navigation","permalink":"/blog/2016/09/08/exponent-talks-unraveling-navigation"},"nextItem":{"title":"San Francisco Meetup Recap","permalink":"/blog/2016/08/12/react-native-meetup-san-francisco"}},"content":"After launching an app to the app stores, internationalization is the next step to further your audience reach. Over 20 countries and numerous people around the world use Right-to-Left (RTL) languages. Thus, making your app support RTL for them is necessary.\\n\\nWe\'re glad to announce that React Native has been improved to support RTL layouts. This is now available in the [react-native](https://github.com/facebook/react-native) master branch today, and will be available in the next RC: [`v0.33.0-rc`](https://github.com/facebook/react-native/releases).\\n\\nThis involved changing [css-layout](https://github.com/facebook/css-layout), the core layout engine used by RN, and RN core implementation, as well as specific OSS JS components to support RTL.\\n\\nTo battle test the RTL support in production, the latest version of the **Facebook Ads Manager** app (the first cross-platform 100% RN app) is now available in Arabic and Hebrew with RTL layouts for both [iOS](https://itunes.apple.com/app/id964397083) and [Android](https://play.google.com/store/apps/details?id=com.facebook.adsmanager). Here is how it looks like in those RTL languages:\\n\\n<>\\n<img src=\\"/blog/assets/rtl-ama-ios-arabic.png\\" width={280} style={{ margin: 10 }} />\\n<img src=\\"/blog/assets/rtl-ama-android-hebrew.png\\" width={280} style={{ margin: 10 }} />\\n</>\\n\\n## Overview Changes in RN for RTL support\\n\\n[css-layout](https://github.com/facebook/css-layout) already has a concept of `start` and `end` for the layout. In the Left-to-Right (LTR) layout, `start` means `left`, and `end` means `right`. But in RTL, `start` means `right`, and `end` means `left`. This means we can make RN depend on the `start` and `end` calculation to compute the correct layout, which includes `position`, `padding`, and `margin`.\\n\\nIn addition, [css-layout](https://github.com/facebook/css-layout) already makes each component\'s direction inherits from its parent. This means, we simply need to set the direction of the root component to RTL, and the entire app will flip.\\n\\nThe diagram below describes the changes at high level:\\n\\n![](/blog/assets/rtl-rn-core-updates.png)\\n\\nThese include:\\n\\n- [css-layout RTL support for absolute positioning](https://github.com/facebook/css-layout/commit/46c842c71a1232c3c78c4215275d104a389a9a0f)\\n- mapping `left` and `right` to `start` and `end` in RN core implementation for shadow nodes\\n- and exposing a [bridged utility module](https://github.com/facebook/react-native/blob/f0fb228ec76ed49e6ed6d786d888e8113b8959a2/Libraries/Utilities/I18nManager.js) to help control the RTL layout\\n\\nWith this update, when you allow RTL layout for your app:\\n\\n- every component layout will flip horizontally\\n- some gestures and animations will automatically have RTL layout, if you are using RTL-ready OSS components\\n- minimal additional effort may be needed to make your app fully RTL-ready\\n\\n## Making an App RTL-ready\\n\\n1. To support RTL, you should first add the RTL language bundles to your app.\\n\\n   - See the general guides from [iOS](https://developer.apple.com/library/ios/documentation/MacOSX/Conceptual/BPInternational/LocalizingYourApp/LocalizingYourApp.html#//apple_ref/doc/uid/10000171i-CH5-SW1) and [Android](https://developer.android.com/training/basics/supporting-devices/languages.html).\\n\\n2. Allow RTL layout for your app by calling the `allowRTL()` function at the beginning of native code. We provided this utility to only apply to an RTL layout when your app is ready. Here is an example:\\n\\n   iOS:\\n\\n   ```objc\\n   // in AppDelegate.m\\n     [[RCTI18nUtil sharedInstance] allowRTL:YES];\\n   ```\\n\\n   Android:\\n\\n   ```java\\n   // in MainActivity.java\\n     I18nUtil sharedI18nUtilInstance = I18nUtil.getInstance();\\n     sharedI18nUtilInstance.allowRTL(context, true);\\n   ```\\n\\n3. For Android, you need add `android:supportsRtl=\\"true\\"` to the [`<application>`](https://developer.android.com/guide/topics/manifest/application-element.html) element in `AndroidManifest.xml` file.\\n\\nNow, when you recompile your app and change the device language to an RTL language (e.g. Arabic or Hebrew), your app layout should change to RTL automatically.\\n\\n## Writing RTL-ready Components\\n\\nIn general, most components are already RTL-ready, for example:\\n\\n- Left-to-Right Layout\\n\\n<img src=\\"/blog/assets/rtl-demo-listitem-ltr.png\\" width=\\"300\\" />\\n\\n- Right-to-Left Layout\\n\\n<img src=\\"/blog/assets/rtl-demo-listitem-rtl.png\\" width=\\"300\\" />\\n\\nHowever, there are several cases to be aware of, for which you will need the [`I18nManager`](https://github.com/facebook/react-native/blob/f0fb228ec76ed49e6ed6d786d888e8113b8959a2/Libraries/Utilities/I18nManager.js). In [`I18nManager`](https://github.com/facebook/react-native/blob/f0fb228ec76ed49e6ed6d786d888e8113b8959a2/Libraries/Utilities/I18nManager.js), there is a constant `isRTL` to tell if layout of app is RTL or not, so that you can make the necessary changes according to the layout.\\n\\n#### Icons with Directional Meaning\\n\\nIf your component has icons or images, they will be displayed the same way in LTR and RTL layout, because RN will not flip your source image. Therefore, you should flip them according to the layout style.\\n\\n- Left-to-Right Layout\\n\\n<img src=\\"/blog/assets/rtl-demo-icon-ltr.png\\" width=\\"300\\" />\\n\\n- Right-to-Left Layout\\n\\n<img src=\\"/blog/assets/rtl-demo-icon-rtl.png\\" width=\\"300\\" />\\n\\nHere are two ways to flip the icon according to the direction:\\n\\n- Adding a `transform` style to the image component:\\n\\n  ```jsx\\n  <Image\\n    source={...}\\n    style={{transform: [{scaleX: I18nManager.isRTL ? -1 : 1}]}}\\n  />\\n  ```\\n\\n- Or, changing the image source according to the direction:\\n\\n  ```jsx\\n  let imageSource = require(\'./back.png\');\\n  if (I18nManager.isRTL) {\\n    imageSource = require(\'./forward.png\');\\n  }\\n  return <Image source={imageSource} />;\\n  ```\\n\\n#### Gestures and Animations\\n\\nIn Android and iOS development, when you change to RTL layout, the gestures and animations are the opposite of LTR layout. Currently, in RN, gestures and animations are not supported on RN core code level, but on components level. The good news is, some of these components already support RTL today, such as [`SwipeableRow`](https://github.com/facebook/react-native/blob/38a6eec0db85a5204e85a9a92b4dee2db9641671/Libraries/Experimental/SwipeableRow/SwipeableRow.js) and [`NavigationExperimental`](https://github.com/facebook/react-native/tree/master/Libraries/NavigationExperimental). However, other components with gestures will need to support RTL manually.\\n\\nA good example to illustrate gesture RTL support is [`SwipeableRow`](https://github.com/facebook/react-native/blob/38a6eec0db85a5204e85a9a92b4dee2db9641671/Libraries/Experimental/SwipeableRow/SwipeableRow.js).\\n\\n<p align=\\"center\\">\\n  <img src=\\"/blog/assets/rtl-demo-swipe-ltr.png\\" width={280} style={{margin: 10}} />\\n  <img src=\\"/blog/assets/rtl-demo-swipe-rtl.png\\" width={280} style={{margin: 10}} />\\n</p>\\n\\n##### Gestures Example\\n\\n```js\\n// SwipeableRow.js\\n_isSwipingExcessivelyRightFromClosedPosition(gestureState: Object): boolean {\\n  // ...\\n  const gestureStateDx = IS_RTL ? -gestureState.dx : gestureState.dx;\\n  return (\\n    this._isSwipingRightFromClosed(gestureState) &&\\n    gestureStateDx > RIGHT_SWIPE_THRESHOLD\\n  );\\n},\\n```\\n\\n##### Animation Example\\n\\n```js\\n// SwipeableRow.js\\n_animateBounceBack(duration: number): void {\\n  // ...\\n  const swipeBounceBackDistance = IS_RTL ?\\n    -RIGHT_SWIPE_BOUNCE_BACK_DISTANCE :\\n    RIGHT_SWIPE_BOUNCE_BACK_DISTANCE;\\n  this._animateTo(\\n    -swipeBounceBackDistance,\\n    duration,\\n    this._animateToClosedPositionDuringBounce,\\n  );\\n},\\n```\\n\\n## Maintaining Your RTL-ready App\\n\\nEven after the initial RTL-compatible app release, you will likely need to iterate on new features. To improve development efficiency, [`I18nManager`](https://github.com/facebook/react-native/blob/f0fb228ec76ed49e6ed6d786d888e8113b8959a2/Libraries/Utilities/I18nManager.js) provides the `forceRTL()` function for faster RTL testing without changing the test device language. You might want to provide a simple switch for this in your app. Here\'s an example from the RTL example in the RNTester:\\n\\n<p align=\\"center\\">\\n  <img src=\\"/blog/assets/rtl-demo-forcertl.png\\" width=\\"300\\" />\\n</p>\\n\\n```js\\n<RNTesterBlock title={\'Quickly Test RTL Layout\'}>\\n  <View style={styles.flexDirectionRow}>\\n    <Text style={styles.switchRowTextView}>forceRTL</Text>\\n    <View style={styles.switchRowSwitchView}>\\n      <Switch\\n        onValueChange={this._onDirectionChange}\\n        style={styles.rightAlignStyle}\\n        value={this.state.isRTL}\\n      />\\n    </View>\\n  </View>\\n</RNTesterBlock>;\\n\\n_onDirectionChange = () => {\\n  I18nManager.forceRTL(!this.state.isRTL);\\n  this.setState({isRTL: !this.state.isRTL});\\n  Alert.alert(\\n    \'Reload this page\',\\n    \'Please reload this page to change the UI direction! \' +\\n      \'All examples in this app will be affected. \' +\\n      \'Check them out to see what they look like in RTL layout.\',\\n  );\\n};\\n```\\n\\nWhen working on a new feature, you can easily toggle this button and reload the app to see RTL layout. The benefit is you won\'t need to change the language setting to test, however some text alignment won\'t change, as explained in the next section. Therefore, it\'s always a good idea to test your app in the RTL language before launching.\\n\\n## Limitations and Future Plan\\n\\nThe RTL support should cover most of the UX in your app; however, there are some limitations for now:\\n\\n- Text alignment behaviors differ in Android and iOS\\n  - In iOS, the default text alignment depends on the active language bundle, they are consistently on one side. In Android, the default text alignment depends on the language of the text content, i.e. English will be left-aligned and Arabic will be right-aligned.\\n  - In theory, this should be made consistent across platform, but some people may prefer one behavior to another when using an app. More user experience research may be needed to find out the best practice for text alignment.\\n\\n* There is no \\"true\\" left/right\\n\\n  As discussed before, we map the `left`/`right` styles from the JS side to `start`/`end`, all `left` in code for RTL layout becomes \\"right\\" on screen, and `right` in code becomes \\"left\\" on screen. This is convenient because you don\'t need to change your product code too much, but it means there is no way to specify \\"true left\\" or \\"true right\\" in the code. In the future, allowing a component to control its direction regardless of the language may be necessary.\\n\\n* Make RTL support for gestures and animations more developer friendly\\n\\n  Currently, there is still some programming effort required to make gestures and animations RTL compatible. In the future, it would be ideal to find a way to make gestures and animations RTL support more developer friendly.\\n\\n## Try it Out!\\n\\nCheck out the [`RTLExample`](https://github.com/facebook/react-native/blob/master/packages/rn-tester/js/examples/RTL/RTLExample.js) in the `RNTester` to understand more about RTL support, and let us know how it works for you!\\n\\nFinally, thank you for reading! We hope that the RTL support for React Native helps you grow your apps for international audience!"},{"id":"/2016/08/12/react-native-meetup-san-francisco","metadata":{"permalink":"/blog/2016/08/12/react-native-meetup-san-francisco","source":"@site/blog/2016-08-12-react-native-meetup-san-francisco.md","title":"San Francisco Meetup Recap","description":"Last week I had the opportunity to attend the React Native Meetup at Zynga\u2019s San Francisco office. With around 200 people in attendance, it served as a great place to meet other developers near me that are also interested in React Native.","date":"2016-08-12T00:00:00.000Z","formattedDate":"August 12, 2016","tags":[{"label":"events","permalink":"/blog/tags/events"}],"readingTime":8.3,"hasTruncateMarker":false,"authors":[{"name":"H\xe9ctor Ramos","title":"Developer Advocate at Facebook","url":"https://twitter.com/hectorramos","imageURL":"https://s.gravatar.com/avatar/f2223874e66e884c99087e452501f2da?s=128"}],"frontMatter":{"title":"San Francisco Meetup Recap","author":"H\xe9ctor Ramos","authorTitle":"Developer Advocate at Facebook","authorURL":"https://twitter.com/hectorramos","authorImageURL":"https://s.gravatar.com/avatar/f2223874e66e884c99087e452501f2da?s=128","authorTwitter":"hectorramos","hero":"/blog/img/rnmsf-august-2016-hero.jpg","tags":["events"]},"unlisted":false,"prevItem":{"title":"Right-to-Left Layout Support For React Native Apps","permalink":"/blog/2016/08/19/right-to-left-support-for-react-native-apps"},"nextItem":{"title":"Toward Better Documentation","permalink":"/blog/2016/07/06/toward-better-documentation"}},"content":"Last week I had the opportunity to attend the [React Native Meetup](https://www.meetup.com/React-Native-San-Francisco/photos/27168649/#452793854) at Zynga\u2019s San Francisco office. With around 200 people in attendance, it served as a great place to meet other developers near me that are also interested in React Native.\\n\\n![](/blog/assets/rnmsf-august-2016-hero.jpg)\\n\\nI was particularly interested in learning more about how React and React Native are used at companies like Zynga, Netflix, and Airbnb. The agenda for the night would be as follows:\\n\\n- Rapid Prototyping in React\\n- Designing APIs for React Native\\n- Bridging the Gap: Using React Native in Existing Codebases\\n\\nBut first, the event started off with a quick introduction and a brief recap of recent news:\\n\\n- Did you know that React Native is now the [top Java repository on GitHub](https://twitter.com/jamespearce/status/759637111880359937)?\\n- [rnpm](https://github.com/rnpm/rnpm) is now part of React Native core! You can now use `react-native link` in place of `rnpm link` to [install libraries with native dependencies](/docs/linking-libraries-ios).\\n- The React Native Meetup community is growing fast! There are now over 4,800 developers across a variety of React Native meetup groups all over the globe.\\n\\nIf [one of these meetups](https://www.meetup.com/find/?allMeetups=false&keywords=react+native&radius=Infinity&userFreeform=San+Francisco%2C+CA&mcId=z94105&mcName=San+Francisco%2C+CA&sort=recommended&eventFilter=mysugg) is held near you, I highly recommend attending!\\n\\n## Rapid Prototyping in React at Zynga\\n\\nThe first round of news was followed by a quick introduction by Zynga, our hosts for the evening. Abhishek Chadha talked about how they use React to quickly prototype new experiences on mobile, demoing a quick prototype of a Draw Something-like app. They use a similar approach as React Native, providing access to native APIs via a bridge. This was demonstrated when Abhishek used the device\'s camera to snap a photo of the audience and then drew a hat on someone\'s head.\\n\\n## Designing APIs for React Native at Netflix\\n\\nUp next, the first featured talk of the evening. [Clarence Leung](https://twitter.com/clarler), Senior Software Engineer at Netflix, presented his talk on Designing APIs for React Native. First he noted the two main types of libraries one may work on: components such as tab bars and date pickers, and libraries that provide access to native services such as the camera roll or in-app payments. There are two ways one may approach when building a library for use in React Native:\\n\\n- Provide platform-specific components\\n- A cross-platform library with a similar API for both Android and iOS\\n\\nEach approach has its own considerations, and it\u2019s up to you to determine what works best for your needs.\\n\\n**Approach #1**\\n\\nAs an example of platform-specific components, Clarence talked about the DatePickerIOS and DatePickerAndroid from core React Native. On iOS, date pickers are rendered as part of the UI and can be easily embedded in an existing view, while date pickers on Android are presented modally. It makes sense to provide separate components in this case.\\n\\n**Approach #2**\\n\\nPhoto pickers, on the other hand, are treated similarly on Android and iOS. There are some slight differences \u2014 Android does not group photos into folders like iOS does with Selfies, for example \u2014 but those are easily handled using `if` statements and the `Platform` component.\\n\\nRegardless of which approach you settle on, it\u2019s a good idea to minimize the API surface and build app-specific libraries. For example, iOS\u2019s In-App Purchase framework supports one-time, consumable purchases, as well as renewable subscriptions. If your app will only need to support consumable purchases, you may get away with dropping support for subscriptions in your cross-platform library.\\n\\n![](/blog/assets/rnmsf-august-2016-netflix.jpg)\\n\\nThere was a brief Q&A session at the end of Clarence\u2019s talk. One of the interesting tid bits that came out of it was that around 80% of the React Native code written for these libraries at Netflix is shared across both Android and iOS.\\n\\n## Bridging the Gap, Using React Native in Existing Codebases\\n\\nThe final talk of the night was by [Leland Richardson](https://twitter.com/intelligibabble) from Airbnb. The talk was focused on the use of React Native in existing codebases. I already know how easy it is to write a new app from scratch using React Native, so I was very interested to hear about Airbnb\u2019s experience adopting React Native in their existing native apps.\\n\\nLeland started off by talking about greenfield apps versus brownfield apps. Greenfield means to start a project without the need to consider any prior work. This is in contrast to brownfield projects where you need to take into account the existing project\u2019s requirements, development processes, and all of the teams various needs.\\n\\nWhen you\u2019re working on a greenfield app, the React Native CLI sets up a single repository for both Android and iOS and everything just works. The first challenge against using React Native at Airbnb was the fact that the Android and iOS app each had their own repository. Multi-repo companies have some hurdles to get past before they can adopt React Native.\\n\\nTo get around this, Airbnb first set up a new repo for the React Native codebase. They used their continuous integration servers to mirror the Android and iOS repos into this new repo. After tests are run and the bundle is built, the build artifacts are synced back to the Android and iOS repos. This allows the mobile engineers to work on native code without altering their development environment. Mobile engineers don\'t need to install npm, run the packager, or remember to build the JavaScript bundle. The engineers writing actual React Native code do not have to worry about syncing their code across Android and iOS, as they work on the React Native repository directly.\\n\\nThis does come with some drawbacks, mainly they could not ship atomic updates. Changes that require a combination of native and JavaScript code would require three separate pull requests, all of which had to be carefully landed. In order to avoid conflicts, CI will fail to land changes back to the Android and iOS repos if master has changed since the build started. This would cause long delays during high commit frequency days (such as when new releases are cut).\\n\\nAirbnb has since moved to a mono repo approach. Fortunately this was already under consideration, and once the Android and iOS teams became comfortable with using React Native they were happy to accelerate the move towards the mono repo.\\n\\nThis has solved most of the issues they had with the split repo approach. Leland did note that this does cause a higher strain on the version control servers, which may be an issue for smaller companies.\\n\\n![](/blog/assets/rnmsf-august-2016-airbnb.jpg)\\n\\n### The Navigation Problem\\n\\nThe second half of Leland\'s talk focused on a topic that is dear to me: the Navigation problem in React Native. He talked about the abundance of navigation libraries in React Native, both first party and third party. NavigationExperimental was mentioned as something that seemed promising, but ended up not being well suited for their use case.\\n\\nIn fact, none of the existing navigation libraries seem to work well for brownfield apps. A brownfield app requires that the navigation state be fully owned by the native app. For example, if a user\u2019s session expires while a React Native view is being presented, the native app should be able to take over and present a login screen as needed.\\n\\nAirbnb also wanted to avoid replacing native navigation bars with JavaScript versions as part of a transition, as the effect could be jarring. Initially they limited themselves to modally presented views, but this obviously presented a problem when it came to adopting React Native more widely within their apps.\\n\\nThey decided that they needed their own library. The library is called `airbnb-navigation`. The library has not yet being open sourced as it is strongly tied to Airbnb\u2019s codebase, but it is something they\u2019d like to release by the end of the year.\\n\\nI won\u2019t go into much detail into the library\u2019s API, but here are some of the key takeaways:\\n\\n- One must preregister scenes ahead of time\\n- Each scene is displayed within its own `RCTRootView`. They are presented natively on each platform (e.g. `UINavigationController`s are used on iOS).\\n- The main `ScrollView` in a scene should be wrapped in a `ScrollScene` component. Doing so allows you to take advantage of native behaviors such as tapping on the status bar to scroll to the top on iOS.\\n- Transitions between scenes are handled natively, no need to worry about performance.\\n- The Android back button is automatically supported.\\n- They can take advantage of View Controller based navigation bar styling via a Navigator.Config UI-less component.\\n\\nThere\u2019s also some considerations to keep in mind:\\n\\n- The navigation bar is not easily customized in JavaScript, as it is a native component. This is intentional, as using native navigation bars is a hard requirement for this type of library.\\n- ScreenProps must be serialized/de-serialized whenever they\'re sent through the bridge, so care must be taken if sending too much data here.\\n- Navigation state is owned by the native app (also a hard requirement for the library), so things like Redux cannot manipulate navigation state.\\n\\nLeland\'s talk was also followed by a Q&A session. Overall, Airbnb is satisfied with React Native. They\u2019re interested in using Code Push to fix any issues without going through the App Store, and their engineers love Live Reload, as they don\'t have to wait for the native app to be rebuilt after every minor change.\\n\\n## Closing Remarks\\n\\nThe event ended with some additional React Native news:\\n\\n- Deco announced their [React Native Showcase](https://www.decosoftware.com/showcase), and invited everyone to add their app to the list.\\n- The recent [documentation overhaul](/blog/2016/07/06/toward-better-documentation) got a shoutout!\\n- Devin Abbott, one of the creators of Deco IDE, will be teaching an introductory [React Native course](https://www.decosoftware.com/course).\\n\\n![](/blog/assets/rnmsf-august-2016-docs.jpg)\\n\\nMeetups provide a good opportunity to meet and learn from other developers in the community. I\'m looking forward to attending more React Native meetups in the future. If you make it up to one of these, please look out for me and let me know how we can make React Native work better for you!"},{"id":"/2016/07/06/toward-better-documentation","metadata":{"permalink":"/blog/2016/07/06/toward-better-documentation","source":"@site/blog/2016-07-06-toward-better-documentation.md","title":"Toward Better Documentation","description":"Part of having a great developer experience is having great documentation. A lot goes into creating good docs - the ideal documentation is concise, helpful, accurate, complete, and delightful. Recently we\'ve been working hard to make the docs better based on your feedback, and we wanted to share some of the improvements we\'ve made.","date":"2016-07-06T00:00:00.000Z","formattedDate":"July 6, 2016","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":4,"hasTruncateMarker":false,"authors":[{"name":"Kevin Lacker","title":"Engineering Manager at Facebook","url":"https://twitter.com/lacker","imageURL":"https://www.gravatar.com/avatar/9b790592be15d4f55a5ed7abb5103304?s=128"}],"frontMatter":{"title":"Toward Better Documentation","author":"Kevin Lacker","authorTitle":"Engineering Manager at Facebook","authorURL":"https://twitter.com/lacker","authorImageURL":"https://www.gravatar.com/avatar/9b790592be15d4f55a5ed7abb5103304?s=128","authorTwitter":"lacker","tags":["announcement"]},"unlisted":false,"prevItem":{"title":"San Francisco Meetup Recap","permalink":"/blog/2016/08/12/react-native-meetup-san-francisco"},"nextItem":{"title":"React Native: A year in review","permalink":"/blog/2016/04/13/react-native-a-year-in-review"}},"content":"Part of having a great developer experience is having great documentation. A lot goes into creating good docs - the ideal documentation is concise, helpful, accurate, complete, and delightful. Recently we\'ve been working hard to make the docs better based on your feedback, and we wanted to share some of the improvements we\'ve made.\\n\\n## Inline Examples\\n\\nWhen you learn a new library, a new programming language, or a new framework, there\'s a beautiful moment when you first write a bit of code, try it out, see if it works... and it _does_ work. You created something real. We wanted to put that visceral experience right into our docs. Like this:\\n\\n```ReactNativeWebPlayer\\nimport React, { Component } from \'react\';\\nimport { AppRegistry, Text, View } from \'react-native\';\\n\\nclass ScratchPad extends Component {\\n  render() {\\n    return (\\n      <View style={{flex: 1}}>\\n        <Text style={{fontSize: 30, flex: 1, textAlign: \'center\'}}>\\n          Isn\'t this cool?\\n        </Text>\\n        <Text style={{fontSize: 100, flex: 1, textAlign: \'center\'}}>\\n          \ud83d\udc4d\\n        </Text>\\n      </View>\\n    );\\n  }\\n}\\n\\nAppRegistry.registerComponent(\'ScratchPad\', () => ScratchPad);\\n```\\n\\nWe think these inline examples, using the [`react-native-web-player`](https://github.com/dabbott/react-native-web-player) module with help from [Devin Abbott](https://twitter.com/devinaabbott), are a great way to learn the basics of React Native, and we have updated our [tutorial for new React Native developers](/docs/tutorial) to use these wherever possible. Check it out - if you have ever been curious to see what would happen if you modified just one little bit of sample code, this is a really nice way to poke around. Also, if you\'re building developer tools and you want to show a live React Native sample on your own site, [`react-native-web-player`](https://github.com/dabbott/react-native-web-player) can make that straightforward.\\n\\nThe core simulation engine is provided by [Nicolas Gallagher](https://twitter.com/necolas)\'s [`react-native-web`](https://github.com/necolas/react-native-web) project, which provides a way to display React Native components like `Text` and `View` on the web. Check out [`react-native-web`](https://github.com/necolas/react-native-web) if you\'re interested in building mobile and web experiences that share a large chunk of the codebase.\\n\\n## Better Guides\\n\\nIn some parts of React Native, there are multiple ways to do things, and we\'ve heard feedback that we could provide better guidance.\\n\\nWe have a new [guide to Navigation](/docs/navigation) that compares the different approaches and advises on what you should use - `Navigator`, `NavigatorIOS`, `NavigationExperimental`. In the medium term, we\'re working towards improving and consolidating those interfaces. In the short term, we hope that a better guide will make your life easier.\\n\\nWe also have a new [guide to handling touches](/docs/handling-touches) that explains some of the basics of making button-like interfaces, and a brief summary of the different ways to handle touch events.\\n\\nAnother area we worked on is Flexbox. This includes tutorials on how to [handle layout with Flexbox](/docs/flexbox) and how to control [the size of components](/docs/height-and-width). It also includes an unsexy but hopefully-useful [list of all the props that control layout in React Native](/docs/layout-props).\\n\\n## Getting Started\\n\\nWhen you start getting a React Native development environment set up on your machine, you do have to do a bunch of installing and configuring things. It\'s hard to make installation a really fun and exciting experience, but we can at least make it as quick and painless as possible.\\n\\nWe built a [new Getting Started workflow](/docs/next/getting-started) that lets you select your development operating system and your mobile operating system up front, to provide one concise place with all the setup instructions. We also went through the installation process to make sure everything worked and to make sure that every decision point had a clear recommendation. After testing it out on our innocent coworkers, we\'re pretty sure this is an improvement.\\n\\nWe also worked on the [guide to integrating React Native into an existing app](/docs/integration-with-existing-apps). Many of the largest apps that use React Native, like the Facebook app itself, actually build part of the app in React Native, and part of it using regular development tools. We hope this guide makes it easier for more people to build apps this way.\\n\\n## We Need Your Help\\n\\nYour feedback lets us know what we should prioritize. I know some people will read this blog post and think \\"Better docs? Pffft. The documentation for X is still garbage!\\". That\'s great - we need that energy. The best way to give us feedback depends on the sort of feedback.\\n\\nIf you find a mistake in the documentation, like inaccurate descriptions or code that doesn\'t actually work, [file an issue](https://github.com/facebook/react-native/issues). Tag it with \\"Documentation\\", so that it\'s easier to route it to the right people.\\n\\nIf there isn\'t a specific mistake, but something in the documentation is fundamentally confusing, it\'s not a great fit for a GitHub issue. Instead, post on [Canny](https://react-native.canny.io/feature-requests) about the area of the docs that could use help. This helps us prioritize when we are doing more general work like guide-writing.\\n\\nThanks for reading this far, and thanks for using React Native!"},{"id":"/2016/04/13/react-native-a-year-in-review","metadata":{"permalink":"/blog/2016/04/13/react-native-a-year-in-review","source":"@site/blog/2016-04-13-react-native-a-year-in-review.md","title":"React Native: A year in review","description":"It\'s been one year since we open-sourced React Native. What started as an idea with a handful of engineers is now a framework being used by product teams across Facebook and beyond. Today at F8 we announced that Microsoft is bringing React Native to the Windows ecosystem, giving developers the potential to build React Native on Windows PC, Phone, and Xbox. It will also provide open source tools and services such as a React Native extension for Visual Studio Code and CodePush to help developers create React Native apps on the Windows platform. In addition, Samsung is building React Native for its hybrid platform, which will empower developers to build apps for millions of SmartTVs and mobile and wearable devices. We also released the Facebook SDK for React Native, which makes it easier for developers to incorporate Facebook social features like Login, Sharing, App Analytics, and Graph APIs into their apps. In one year, React Native has changed the way developers build on every major platform.","date":"2016-04-13T00:00:00.000Z","formattedDate":"April 13, 2016","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":1.18,"hasTruncateMarker":false,"authors":[{"name":"Martin Konicek","title":"Software Engineer at Facebook","url":"https://github.com/mkonicek","imageURL":"https://avatars1.githubusercontent.com/u/346214?v=3&s=460"}],"frontMatter":{"title":"React Native: A year in review","author":"Martin Konicek","authorTitle":"Software Engineer at Facebook","authorURL":"https://github.com/mkonicek","authorImageURL":"https://avatars1.githubusercontent.com/u/346214?v=3&s=460","authorTwitter":"martinkonicek","hero":"/blog/assets/big-hero.png","tags":["announcement"]},"unlisted":false,"prevItem":{"title":"Toward Better Documentation","permalink":"/blog/2016/07/06/toward-better-documentation"},"nextItem":{"title":"Dive into React Native Performance","permalink":"/blog/2016/03/28/dive-into-react-native-performance"}},"content":"It\'s been one year since we open-sourced React Native. What started as an idea with a handful of engineers is now a framework being used by product teams across Facebook and beyond. Today at F8 we announced that Microsoft is bringing [React Native to the Windows ecosystem](https://microsoft.github.io/code-push/articles/ReactNativeWindows.html), giving developers the potential to build React Native on Windows PC, Phone, and Xbox. It will also provide open source tools and services such as a React Native extension for Visual Studio Code and CodePush to help developers create React Native apps on the Windows platform. In addition, [Samsung](https://www.tizen.org/blogs) is building React Native for its hybrid platform, which will empower developers to build apps for millions of SmartTVs and mobile and wearable devices. We also released the [Facebook SDK for React Native](https://github.com/facebook/react-native-fbsdk), which makes it easier for developers to incorporate Facebook social features like Login, Sharing, App Analytics, and Graph APIs into their apps. In one year, React Native has changed the way developers build on every major platform.\\n\\nIt\'s been an epic ride \u2014 but we are only getting started. Here is a look back at how React Native has grown and evolved since we open-sourced it a year ago, some challenges we faced along the way, and what we expect as we look ahead to the future.\\n\\n<footer>\\n  <a\\n    href=\\"https://code.facebook.com/posts/597378980427792/react-native-a-year-in-review/\\"\\n    className=\\"btn\\">Read more</a>\\n</footer>\\n\\n> This is an excerpt. Read the rest of the post on [Facebook Code](https://code.facebook.com/posts/597378980427792/react-native-a-year-in-review/)."},{"id":"/2016/03/28/dive-into-react-native-performance","metadata":{"permalink":"/blog/2016/03/28/dive-into-react-native-performance","source":"@site/blog/2016-03-28-dive-into-react-native-performance.md","title":"Dive into React Native Performance","description":"React Native allows you to build Android and iOS apps in JavaScript using React and Relay\'s declarative programming model. This leads to more concise, easier-to-understand code; fast iteration without a compile cycle; and easy sharing of code across multiple platforms. You can ship faster and focus on details that really matter, making your app look and feel fantastic. Optimizing performance is a big part of this. Here is the story of how we made React Native app startup twice as fast.","date":"2016-03-28T00:00:00.000Z","formattedDate":"March 28, 2016","tags":[{"label":"engineering","permalink":"/blog/tags/engineering"}],"readingTime":1.075,"hasTruncateMarker":false,"authors":[{"name":"Pieter De Baets","title":"Software Engineer at Facebook","url":"https://github.com/javache","imageURL":"https://avatars1.githubusercontent.com/u/5676?v=3&s=460"}],"frontMatter":{"title":"Dive into React Native Performance","author":"Pieter De Baets","authorTitle":"Software Engineer at Facebook","authorURL":"https://github.com/javache","authorImageURL":"https://avatars1.githubusercontent.com/u/5676?v=3&s=460","authorTwitter":"javache","tags":["engineering"]},"unlisted":false,"prevItem":{"title":"React Native: A year in review","permalink":"/blog/2016/04/13/react-native-a-year-in-review"},"nextItem":{"title":"Introducing Hot Reloading","permalink":"/blog/2016/03/24/introducing-hot-reloading"}},"content":"React Native allows you to build Android and iOS apps in JavaScript using React and Relay\'s declarative programming model. This leads to more concise, easier-to-understand code; fast iteration without a compile cycle; and easy sharing of code across multiple platforms. You can ship faster and focus on details that really matter, making your app look and feel fantastic. Optimizing performance is a big part of this. Here is the story of how we made React Native app startup twice as fast.\\n\\n## Why the hurry?\\n\\nWith an app that runs faster, content loads quickly, which means people get more time to interact with it, and smooth animations make the app enjoyable to use. In emerging markets, where [2011 class phones](https://code.facebook.com/posts/952628711437136/classes-performance-and-network-segmentation-on-android/) on [2G networks](https://newsroom.fb.com/news/2015/10/news-feed-fyi-building-for-all-connectivity/) are the majority, a focus on performance can make the difference between an app that is usable and one that isn\'t.\\n\\nSince releasing React Native on [iOS](https://reactjs.org/blog/2015/03/26/introducing-react-native.html) and on [Android](https://code.facebook.com/posts/1189117404435352/react-native-for-android-how-we-built-the-first-cross-platform-react-native-app/), we have been improving list view scrolling performance, memory efficiency, UI responsiveness, and app startup time. Startup sets the first impression of an app and stresses all parts of the framework, so it is the most rewarding and challenging problem to tackle.\\n\\n<footer>\\n  <a\\n    href=\\"https://code.facebook.com/posts/895897210527114/dive-into-react-native-performance/\\"\\n    className=\\"btn\\">Read more</a>\\n</footer>\\n\\n> This is an excerpt. Read the rest of the post on [Facebook Code](https://code.facebook.com/posts/895897210527114/dive-into-react-native-performance/)."},{"id":"/2016/03/24/introducing-hot-reloading","metadata":{"permalink":"/blog/2016/03/24/introducing-hot-reloading","source":"@site/blog/2016-03-24-introducing-hot-reloading.md","title":"Introducing Hot Reloading","description":"React Native\'s goal is to give you the best possible developer experience. A big part of it is the time it takes between you save a file and be able to see the changes. Our goal is to get this feedback loop to be under 1 second, even as your app grows.","date":"2016-03-24T00:00:00.000Z","formattedDate":"March 24, 2016","tags":[{"label":"engineering","permalink":"/blog/tags/engineering"}],"readingTime":8.575,"hasTruncateMarker":false,"authors":[{"name":"Mart\xedn Bigio","title":"Software Engineer at Instagram","url":"https://twitter.com/martinbigio","imageURL":"https://avatars3.githubusercontent.com/u/535661?v=3&s=128"}],"frontMatter":{"title":"Introducing Hot Reloading","author":"Mart\xedn Bigio","authorTitle":"Software Engineer at Instagram","authorURL":"https://twitter.com/martinbigio","authorImageURL":"https://avatars3.githubusercontent.com/u/535661?v=3&s=128","authorTwitter":"martinbigio","tags":["engineering"]},"unlisted":false,"prevItem":{"title":"Dive into React Native Performance","permalink":"/blog/2016/03/28/dive-into-react-native-performance"},"nextItem":{"title":"Making React Native apps accessible","permalink":"/blog/2015/11/23/making-react-native-apps-accessible"}},"content":"React Native\'s goal is to give you the best possible developer experience. A big part of it is the time it takes between you save a file and be able to see the changes. Our goal is to get this feedback loop to be under 1 second, even as your app grows.\\n\\nWe got close to this ideal via three main features:\\n\\n- Use JavaScript as the language doesn\'t have a long compilation cycle time.\\n- Implement a tool called Packager that transforms es6/flow/jsx files into normal JavaScript that the VM can understand. It was designed as a server that keeps intermediate state in memory to enable fast incremental changes and uses multiple cores.\\n- Build a feature called Live Reload that reloads the app on save.\\n\\nAt this point, the bottleneck for developers is no longer the time it takes to reload the app but losing the state of your app. A common scenario is to work on a feature that is multiple screens away from the launch screen. Every time you reload, you\'ve got to click on the same path again and again to get back to your feature, making the cycle multiple-seconds long.\\n\\n## Hot Reloading\\n\\nThe idea behind hot reloading is to keep the app running and to inject new versions of the files that you edited at runtime. This way, you don\'t lose any of your state which is especially useful if you are tweaking the UI.\\n\\nA video is worth a thousand words. Check out the difference between Live Reload (current) and Hot Reload (new).\\n\\n<iframe\\n  width=\\"100%\\"\\n  height=\\"315\\"\\n  src=\\"https://www.youtube.com/embed/2uQzVi-KFuc\\"\\n  frameborder=\\"0\\"\\n  allowfullscreen></iframe>\\n\\nIf you look closely, you can notice that it is possible to recover from a red box and you can also start importing modules that were not previously there without having to do a full reload.\\n\\n**Word of warning:** because JavaScript is a very stateful language, hot reloading cannot be perfectly implemented. In practice, we found out that the current setup is working well for a large amount of usual use cases and a full reload is always available in case something gets messed up.\\n\\nHot reloading is available as of 0.22, you can enable it:\\n\\n- Open the developer menu\\n- Tap on \\"Enable Hot Reloading\\"\\n\\n## Implementation in a nutshell\\n\\nNow that we\'ve seen why we want it and how to use it, the fun part begins: how it actually works.\\n\\nHot Reloading is built on top of a feature [Hot Module Replacement](https://webpack.js.org/guides/hot-module-replacement/), or HMR. It was first introduced by webpack and we implemented it inside of React Native Packager. HMR makes the Packager watch for file changes and send HMR updates to a thin HMR runtime included on the app.\\n\\nIn a nutshell, the HMR update contains the new code of the JS modules that changed. When the runtime receives them, it replaces the old modules\' code with the new one:\\n\\n![](/blog/assets/hmr-architecture.png)\\n\\nThe HMR update contains a bit more than just the module\'s code we want to change because replacing it, it\'s not enough for the runtime to pick up the changes. The problem is that the module system may have already cached the _exports_ of the module we want to update. For instance, say you have an app composed of these two modules:\\n\\n```\\n// log.js\\nfunction log(message) {\\n  const time = require(\'./time\');\\n  console.log(`[${time()}] ${message}`);\\n}\\n\\nmodule.exports = log;\\n```\\n\\n```\\n// time.js\\nfunction time() {\\n  return new Date().getTime();\\n}\\n\\nmodule.exports = time;\\n```\\n\\nThe module `log`, prints out the provided message including the current date provided by the module `time`.\\n\\nWhen the app is bundled, React Native registers each module on the module system using the `__d` function. For this app, among many `__d` definitions, there will one for `log`:\\n\\n```\\n__d(\'log\', function() {\\n  ... // module\'s code\\n});\\n```\\n\\nThis invocation wraps each module\'s code into an anonymous function which we generally refer to as the factory function. The module system runtime keeps track of each module\'s factory function, whether it has already been executed, and the result of such execution (exports). When a module is required, the module system either provides the already cached exports or executes the module\'s factory function for the first time and saves the result.\\n\\nSo say you start your app and require `log`. At this point, neither `log` nor `time`\'s factory functions have been executed so no exports have been cached. Then, the user modifies `time` to return the date in `MM/DD`:\\n\\n```js\\n// time.js\\nfunction bar() {\\n  const date = new Date();\\n  return `${date.getMonth() + 1}/${date.getDate()}`;\\n}\\n\\nmodule.exports = bar;\\n```\\n\\nThe Packager will send time\'s new code to the runtime (step 1), and when `log` gets eventually required the exported function gets executed it will do so with `time`\'s changes (step 2):\\n\\n![](/blog/assets/hmr-step.png)\\n\\nNow say the code of `log` requires `time` as a top level require:\\n\\n```\\nconst time = require(\'./time\'); // top level require\\n\\n// log.js\\nfunction log(message) {\\n  console.log(`[${time()}] ${message}`);\\n}\\n\\nmodule.exports = log;\\n```\\n\\nWhen `log` is required, the runtime will cache its exports and `time`\'s one. (step 1). Then, when `time` is modified, the HMR process cannot simply finish after replacing `time`\'s code. If it did, when `log` gets executed, it would do so with a cached copy of `time` (old code).\\n\\nFor `log` to pick up `time` changes, we\'ll need to clear its cached exports because one of the modules it depends on was hot swapped (step 3). Finally, when `log` gets required again, its factory function will get executed requiring `time` and getting its new code.\\n\\n![](/blog/assets/hmr-log.png)\\n\\n## HMR API\\n\\nHMR in React Native extends the module system by introducing the `hot` object. This API is based on [webpack](https://webpack.github.io/hot-module-replacement.md)\'s one. The `hot` object exposes a function called `accept` which allows you to define a callback that will be executed when the module needs to be hot swapped. For instance, if we would change `time`\'s code as follows, every time we save time, we\'ll see \u201ctime changed\u201d in the console:\\n\\n```\\n// time.js\\nfunction time() {\\n  ... // new code\\n}\\n\\nmodule.hot.accept(() => {\\n  console.log(\'time changed\');\\n});\\n\\nmodule.exports = time;\\n```\\n\\nNote that only in rare cases you would need to use this API manually. Hot Reloading should work out of the box for the most common use cases.\\n\\n## HMR Runtime\\n\\nAs we\'ve seen before, sometimes it\'s not enough only accepting the HMR update because a module that uses the one being hot swapped may have been already executed and its imports cached. For instance, suppose the dependency tree for the movies app example had a top-level `MovieRouter` that depended on the `MovieSearch` and `MovieScreen` views, which depended on the `log` and `time` modules from the previous examples:\\n\\n![](/blog/assets/hmr-diamond.png)\\n\\nIf the user accesses the movies\' search view but not the other one, all the modules except for `MovieScreen` would have cached exports. If a change is made to module `time`, the runtime will have to clear the exports of `log` for it to pick up `time`\'s changes. The process wouldn\'t finish there: the runtime will repeat this process recursively up until all the parents have been accepted. So, it\'ll grab the modules that depend on `log` and try to accept them. For `MovieScreen` it can bail, as it hasn\'t been required yet. For `MovieSearch`, it will have to clear its exports and process its parents recursively. Finally, it will do the same thing for `MovieRouter` and finish there as no modules depends on it.\\n\\nIn order to walk the dependency tree, the runtime receives the inverse dependency tree from the Packager on the HMR update. For this example the runtime will receive a JSON object like this one:\\n\\n```\\n{\\n  modules: [\\n    {\\n      name: \'time\',\\n      code: /* time\'s new code */\\n    }\\n  ],\\n  inverseDependencies: {\\n    MovieRouter: [],\\n    MovieScreen: [\'MovieRouter\'],\\n    MovieSearch: [\'MovieRouter\'],\\n    log: [\'MovieScreen\', \'MovieSearch\'],\\n    time: [\'log\'],\\n  }\\n}\\n```\\n\\n## React Components\\n\\nReact components are a bit harder to get to work with Hot Reloading. The problem is that we can\'t simply replace the old code with the new one as we\'d loose the component\'s state. For React web applications, [Dan Abramov](https://twitter.com/dan_abramov) implemented a babel [transform](https://gaearon.github.io/react-hot-loader/) that uses webpack\'s HMR API to solve this issue. In a nutshell, his solution works by creating a proxy for every single React component on _transform time_. The proxies hold the component\'s state and delegate the lifecycle methods to the actual components, which are the ones we hot reload:\\n\\n![](/blog/assets/hmr-proxy.png)\\n\\nBesides creating the proxy component, the transform also defines the `accept` function with a piece of code to force React to re-render the component. This way, we can hot reload rendering code without losing any of the app\'s state.\\n\\nThe default [transformer](https://github.com/facebook/react-native/blob/master/packager/transformer.js#L92-L95) that comes with React Native uses the `babel-preset-react-native`, which is [configured](https://github.com/facebook/react-native/blob/master/babel-preset/configs/hmr.js#L24-L31) to use `react-transform` the same way you\'d use it on a React web project that uses webpack.\\n\\n## Redux Stores\\n\\nTo enable Hot Reloading on [Redux](https://redux.js.org/) stores you will just need to use the HMR API similarly to what you\'d do on a web project that uses webpack:\\n\\n```\\n// configureStore.js\\nimport { createStore, applyMiddleware, compose } from \'redux\';\\nimport thunk from \'redux-thunk\';\\nimport reducer from \'../reducers\';\\n\\nexport default function configureStore(initialState) {\\n  const store = createStore(\\n    reducer,\\n    initialState,\\n    applyMiddleware(thunk),\\n  );\\n\\n  if (module.hot) {\\n    module.hot.accept(() => {\\n      const nextRootReducer = require(\'../reducers/index\').default;\\n      store.replaceReducer(nextRootReducer);\\n    });\\n  }\\n\\n  return store;\\n};\\n```\\n\\nWhen you change a reducer, the code to accept that reducer will be sent to the client. Then the client will realize that the reducer doesn\'t know how to accept itself, so it will look for all the modules that refer it and try to accept them. Eventually, the flow will get to the single store, the `configureStore` module, which will accept the HMR update.\\n\\n## Conclusion\\n\\nIf you are interested in helping making hot reloading better, I encourage you to read [Dan Abramov\'s post around the future of hot reloading](https://medium.com/@dan_abramov/hot-reloading-in-react-1140438583bf#.jmivpvmz4) and to contribute. For example, Johny Days is going to [make it work with multiple connected clients](https://github.com/facebook/react-native/pull/6179). We\'re relying on you all to maintain and improve this feature.\\n\\nWith React Native, we have the opportunity to rethink the way we build apps in order to make it a great developer experience. Hot reloading is only one piece of the puzzle, what other crazy hacks can we do to make it better?"},{"id":"/2015/11/23/making-react-native-apps-accessible","metadata":{"permalink":"/blog/2015/11/23/making-react-native-apps-accessible","source":"@site/blog/2015-11-23-making-react-native-apps-accessible.md","title":"Making React Native apps accessible","description":"With the recent launch of React on web and React Native on mobile, we\'ve provided a new front-end framework for developers to build products. One key aspect of building a robust product is ensuring that anyone can use it, including people who have vision loss or other disabilities. The Accessibility API for React and React Native enables you to make any React-powered experience usable by someone who may use assistive technology, like a screen reader for the blind and visually impaired.","date":"2015-11-23T00:00:00.000Z","formattedDate":"November 23, 2015","tags":[{"label":"engineering","permalink":"/blog/tags/engineering"}],"readingTime":1.07,"hasTruncateMarker":false,"authors":[{"name":"Georgiy Kassabli","title":"Software Engineer at Facebook","url":"https://www.facebook.com/georgiy.kassabli","imageURL":"https://scontent-sea1-1.xx.fbcdn.net/v/t1.0-1/c0.0.160.160/p160x160/1978838_795592927136196_1205041943_n.jpg?_nc_log=1&oh=d7a500fdece1250955a4d27b0a80fee2&oe=59E8165A"}],"frontMatter":{"title":"Making React Native apps accessible","author":"Georgiy Kassabli","authorTitle":"Software Engineer at Facebook","authorURL":"https://www.facebook.com/georgiy.kassabli","authorImageURL":"https://scontent-sea1-1.xx.fbcdn.net/v/t1.0-1/c0.0.160.160/p160x160/1978838_795592927136196_1205041943_n.jpg?_nc_log=1&oh=d7a500fdece1250955a4d27b0a80fee2&oe=59E8165A","hero":"/blog/assets/blue-hero.png","tags":["engineering"]},"unlisted":false,"prevItem":{"title":"Introducing Hot Reloading","permalink":"/blog/2016/03/24/introducing-hot-reloading"},"nextItem":{"title":"React Native for Android: How we built the first cross-platform React Native app","permalink":"/blog/2015/09/14/react-native-for-android"}},"content":"With the recent launch of React on web and React Native on mobile, we\'ve provided a new front-end framework for developers to build products. One key aspect of building a robust product is ensuring that anyone can use it, including people who have vision loss or other disabilities. The Accessibility API for React and React Native enables you to make any React-powered experience usable by someone who may use assistive technology, like a screen reader for the blind and visually impaired.\\n\\nFor this post, we\'re going to focus on React Native apps. We\'ve designed the React Accessibility API to look and feel similar to the Android and iOS APIs. If you\'ve developed accessible applications for Android, iOS, or the web before, you should feel comfortable with the framework and nomenclature of the React AX API. For instance, you can make a UI element _accessible_ (therefore exposed to assistive technology) and use _accessibilityLabel_ to provide a string description for the element:\\n\\n```\\n<View accessible={true} accessibilityLabel=\u201dThis is simple view\u201d>\\n```\\n\\nLet\'s walk through a slightly more involved application of the React AX API by looking at one of Facebook\'s own React-powered products: the **Ads Manager app**.\\n\\n<footer>\\n  <a\\n    href=\\"https://code.facebook.com/posts/435862739941212/making-react-native-apps-accessible/\\"\\n    className=\\"btn\\">Read more</a>\\n</footer>\\n\\n> This is an excerpt. Read the rest of the post on [Facebook Code](https://code.facebook.com/posts/435862739941212/making-react-native-apps-accessible/)."},{"id":"/2015/09/14/react-native-for-android","metadata":{"permalink":"/blog/2015/09/14/react-native-for-android","source":"@site/blog/2015-09-14-react-native-for-android.md","title":"React Native for Android: How we built the first cross-platform React Native app","description":"Earlier this year, we introduced React Native for iOS. React Native brings what developers are used to from React on the web \u2014 declarative self-contained UI components and fast development cycles \u2014 to the mobile platform, while retaining the speed, fidelity, and feel of native applications. Today, we\'re happy to release React Native for Android.","date":"2015-09-14T00:00:00.000Z","formattedDate":"September 14, 2015","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":0.885,"hasTruncateMarker":false,"authors":[{"name":"Daniel Witte","title":"Software Engineer at Facebook","url":"https://www.facebook.com/drwitte"}],"frontMatter":{"title":"React Native for Android: How we built the first cross-platform React Native app","author":"Daniel Witte","authorTitle":"Software Engineer at Facebook","authorURL":"https://www.facebook.com/drwitte","authorFBID":210064,"hero":"/blog/assets/blue-hero.png","tags":["announcement"]},"unlisted":false,"prevItem":{"title":"Making React Native apps accessible","permalink":"/blog/2015/11/23/making-react-native-apps-accessible"},"nextItem":{"title":"React Native: Bringing modern web techniques to mobile","permalink":"/blog/2015/03/26/react-native-bringing-modern-web-techniques-to-mobile"}},"content":"Earlier this year, we introduced [React Native for iOS](https://code.facebook.com/posts/1014532261909640/react-native-bringing-modern-web-techniques-to-mobile/). React Native brings what developers are used to from React on the web \u2014 declarative self-contained UI components and fast development cycles \u2014 to the mobile platform, while retaining the speed, fidelity, and feel of native applications. Today, we\'re happy to release React Native for Android.\\n\\nAt Facebook we\'ve been using React Native in production for over a year now. Almost exactly a year ago, our team set out to develop the [Ads Manager app](https://www.facebook.com/business/news/ads-manager-app). Our goal was to create a new app to let the millions of people who advertise on Facebook manage their accounts and create new ads on the go. It ended up being not only Facebook\'s first fully React Native app but also the first cross-platform one. In this post, we\'d like to share with you how we built this app, how React Native enabled us to move faster, and the lessons we learned.\\n\\n<footer>\\n  <a\\n    href=\\"https://code.facebook.com/posts/1189117404435352/react-native-for-android-how-we-built-the-first-cross-platform-react-native-app/\\"\\n    className=\\"btn\\">Read more</a>\\n</footer>\\n\\n> This is an excerpt. Read the rest of the post on [Facebook Code](https://code.facebook.com/posts/1189117404435352/react-native-for-android-how-we-built-the-first-cross-platform-react-native-app/)."},{"id":"/2015/03/26/react-native-bringing-modern-web-techniques-to-mobile","metadata":{"permalink":"/blog/2015/03/26/react-native-bringing-modern-web-techniques-to-mobile","source":"@site/blog/2015-03-26-react-native-bringing-modern-web-techniques-to-mobile.md","title":"React Native: Bringing modern web techniques to mobile","description":"We introduced React to the world two years ago, and since then it\'s seen impressive growth, both inside and outside of Facebook. Today, even though no one is forced to use it, new web projects at Facebook are commonly built using React in one form or another, and it\'s being broadly adopted across the industry. Engineers are choosing to use React every day because it enables them to spend more time focusing on their products and less time fighting with their framework. It wasn\'t until we\'d been building with React for a while, though, that we started to understand what makes it so powerful.","date":"2015-03-26T00:00:00.000Z","formattedDate":"March 26, 2015","tags":[{"label":"announcement","permalink":"/blog/tags/announcement"}],"readingTime":1.85,"hasTruncateMarker":false,"authors":[{"name":"Tom Occhino","title":"Engineering Manager at Facebook","url":"https://github.com/tomocchino","imageURL":"https://avatars0.githubusercontent.com/u/13947?v=3&s=460"}],"frontMatter":{"title":"React Native: Bringing modern web techniques to mobile","author":"Tom Occhino","authorTitle":"Engineering Manager at Facebook","authorURL":"https://github.com/tomocchino","authorImageURL":"https://avatars0.githubusercontent.com/u/13947?v=3&s=460","authorTwitter":"tomocchino","hero":"/blog/assets/dark-hero.png","tags":["announcement"]},"unlisted":false,"prevItem":{"title":"React Native for Android: How we built the first cross-platform React Native app","permalink":"/blog/2015/09/14/react-native-for-android"}},"content":"We introduced [React](https://code.facebook.com/projects/176988925806765/react/) to the world two years ago, and since then it\'s seen impressive growth, both inside and outside of Facebook. Today, even though no one is forced to use it, new web projects at Facebook are commonly built using React in one form or another, and it\'s being broadly adopted across the industry. Engineers are choosing to use React every day because it enables them to spend more time focusing on their products and less time fighting with their framework. It wasn\'t until we\'d been building with React for a while, though, that we started to understand what makes it so powerful.\\n\\nReact forces us to break our applications down into discrete components, each representing a single view. These components make it easier to iterate on our products, since we don\'t need to keep the entire system in our head in order to make changes to one part of it. More important, though, React wraps the DOM\'s mutative, imperative API with a declarative one, which raises the level of abstraction and simplifies the programming model. What we\'ve found is that when we build with React, our code is a lot more predictable. This predictability makes it so we can iterate more quickly with confidence, and our applications are a lot more reliable as a result. Additionally, it\'s not only easier to scale our applications when they\'re built with React, but we\'ve found it\'s also easier to scale the size of our teams themselves.\\n\\nTogether with the rapid iteration cycle of the web, we\'ve been able to build some awesome products with React, including many components of Facebook.com. Additionally, we\'ve built amazing frameworks in JavaScript on top of React, like [Relay](https://reactjs.org/blog/2015/02/20/introducing-relay-and-graphql.html), which allows us to greatly simplify our data fetching at scale. Of course, web is only part of the story. Facebook also has widely used Android and iOS apps, which are built on top of disjointed, proprietary technology stacks. Having to build our apps on top of multiple platforms has bifurcated our engineering organization, but that\'s only one of the things that makes native mobile application development hard.\\n\\n<footer>\\n  <a\\n    href=\\"https://code.facebook.com/posts/1014532261909640/react-native-bringing-modern-web-techniques-to-mobile/\\"\\n    className=\\"btn\\">Read more</a>\\n</footer>\\n\\n> This is an excerpt. Read the rest of the post on [Facebook Code](https://code.facebook.com/posts/1014532261909640/react-native-bringing-modern-web-techniques-to-mobile/)."}]}')}}]);