/*! For license information please see 2c2b467e.84fbaa56.js.LICENSE.txt */
"use strict";(self.webpackChunkreact_native_website=self.webpackChunkreact_native_website||[]).push([[67953],{60123:(e,t,r)=>{r.d(t,{ZP:()=>o});var n=r(24246),i=r(71670);function a(e){const t=Object.assign({admonition:"admonition",p:"p",a:"a"},(0,i.ah)(),e.components);return(0,n.jsx)(t.admonition,{type:"caution",children:(0,n.jsxs)(t.p,{children:["This document refers to the ",(0,n.jsx)(t.a,{href:"fabric-renderer",children:"New Architecture"}),", that is in active roll-out."]})})}const o=function(e={}){const{wrapper:t}=Object.assign({},(0,i.ah)(),e.components);return t?(0,n.jsx)(t,Object.assign({},e,{children:(0,n.jsx)(a,e)})):a(e)}},53622:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var n=r(24246),i=r(71670),a=r(60123);const o={id:"xplat-implementation",title:"Cross Platform Implementation"},s=void 0,c={id:"xplat-implementation",title:"Cross Platform Implementation",description:"The React Native renderer utilizes a core render implementation to be shared across platforms",source:"@site/architecture/xplat-implementation.md",sourceDirName:".",slug:"/xplat-implementation",permalink:"/architecture/xplat-implementation",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/react-native-website/blob/main/website/architecture/xplat-implementation.md",tags:[],version:"current",lastUpdatedAt:1646922074,formattedLastUpdatedAt:"Mar 10, 2022",frontMatter:{id:"xplat-implementation",title:"Cross Platform Implementation"},sidebar:"architecture",previous:{title:"Render, Commit, and Mount",permalink:"/architecture/render-pipeline"},next:{title:"View Flattening",permalink:"/architecture/view-flattening"}},l={},d=[{value:"The React Native renderer utilizes a core render implementation to be shared across platforms",id:"the-react-native-renderer-utilizes-a-core-render-implementation-to-be-shared-across-platforms",level:4}];function h(e){const t=Object.assign({h4:"h4",p:"p",strong:"strong",a:"a",ul:"ul",li:"li",code:"code",img:"img"},(0,i.ah)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.ZP,{}),"\n",(0,n.jsx)(t.h4,{id:"the-react-native-renderer-utilizes-a-core-render-implementation-to-be-shared-across-platforms",children:"The React Native renderer utilizes a core render implementation to be shared across platforms"}),"\n",(0,n.jsxs)(t.p,{children:["In the previous render system of React Native, the ",(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.a,{href:"/architecture/glossary#react-shadow-tree-and-react-shadow-node",children:"React Shadow Tree"})}),", layout logic, and ",(0,n.jsx)(t.strong,{children:(0,n.jsx)(t.a,{href:"/architecture/view-flattening",children:"View Flattening"})})," algorithm were implemented once for each platform. The current renderer was designed to be a cross-platform solution by sharing a core C++ implementation."]}),"\n",(0,n.jsx)(t.p,{children:"The React Native team intends to incorporate an animation system into the render system and also extend the React Native render system to new platforms such as Windows, and operating systems in game consoles, televisions, and more."}),"\n",(0,n.jsxs)(t.p,{children:["Leveraging C++ for the core render system introduces several advantages. A single implementation reduces the cost of development and maintenance. It improves the performance of creating React Shadow Trees and layout calculation because the overhead of integrating ",(0,n.jsx)(t.a,{href:"/architecture/glossary#yoga-tree-and-yoga-node",children:"Yoga"})," with the renderer is minimized on Android (i.e. no more ",(0,n.jsx)(t.a,{href:"/architecture/glossary#java-native-interface-jni",children:"JNI"})," for Yoga). Finally, the memory footprint of each React Shadow Node is smaller in C++ than it would be if allocated from Kotlin or Swift."]}),"\n",(0,n.jsx)(t.p,{children:"The team is also leveraging C++ features that enforce immutability to ensure there are no issues related to concurrent access to shared but not protected resources."}),"\n",(0,n.jsxs)(t.p,{children:["It is important to recognize that the renderer use case for Android still incurs the cost of ",(0,n.jsx)(t.a,{href:"/architecture/glossary#java-native-interface-jni",children:"JNI"})," for two primary use cases:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Layout calculation of complex views (e.g. ",(0,n.jsx)(t.code,{children:"Text"}),", ",(0,n.jsx)(t.code,{children:"TextInput"}),", etc.) requires sending props over JNI."]}),"\n",(0,n.jsx)(t.li,{children:"The mount phase requires sending mutation operations over JNI."}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["The team is exploring replacing ",(0,n.jsx)(t.code,{children:"ReadableMap"})," with a new mechanism to serialize data using ",(0,n.jsx)(t.code,{children:"ByteBuffer"})," to reduce overhead of JNI. Our goal is to reduce overhead of JNI by 35\u201350%."]}),"\n",(0,n.jsx)(t.p,{children:"The renderer provides two sides of its C++ APIs:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"(i)"})," to communicate with React"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"(ii)"})," to communicate with the host platform"]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["For ",(0,n.jsx)(t.strong,{children:"(i)"}),", React communicates with the renderer to ",(0,n.jsx)(t.strong,{children:"render"})," a React Tree and to \u201clisten\u201d for ",(0,n.jsx)(t.strong,{children:"events"})," (e.g. ",(0,n.jsx)(t.code,{children:"onLayout"}),", ",(0,n.jsx)(t.code,{children:"onKeyPress"}),", touch, etc)."]}),"\n",(0,n.jsxs)(t.p,{children:["For ",(0,n.jsx)(t.strong,{children:"(ii)"}),", the React Native renderer communicates with the host platform to mount host views on the screen (create, insert, update or delete of host views) and it listens for ",(0,n.jsx)(t.strong,{children:"events"})," that are generated by the user on the host platform."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Cross-platform implementation diagram",src:r(30001).Z+"",width:"1992",height:"1192"})})]})}const m=function(e={}){const{wrapper:t}=Object.assign({},(0,i.ah)(),e.components);return t?(0,n.jsx)(t,Object.assign({},e,{children:(0,n.jsx)(h,e)})):h(e)}},71426:(e,t,r)=>{var n=r(27378),i=Symbol.for("react.element"),a=Symbol.for("react.fragment"),o=Object.prototype.hasOwnProperty,s=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,c={key:!0,ref:!0,__self:!0,__source:!0};function l(e,t,r){var n,a={},l=null,d=null;for(n in void 0!==r&&(l=""+r),void 0!==t.key&&(l=""+t.key),void 0!==t.ref&&(d=t.ref),t)o.call(t,n)&&!c.hasOwnProperty(n)&&(a[n]=t[n]);if(e&&e.defaultProps)for(n in t=e.defaultProps)void 0===a[n]&&(a[n]=t[n]);return{$$typeof:i,type:e,key:l,ref:d,props:a,_owner:s.current}}t.Fragment=a,t.jsx=l,t.jsxs=l},24246:(e,t,r)=>{e.exports=r(71426)},30001:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/xplat-implementation-diagram-7611cf9dfb6d15667365630147d83ca5.png"},71670:(e,t,r)=>{r.d(t,{Zo:()=>s,ah:()=>a});var n=r(27378);const i=n.createContext({});function a(e){const t=n.useContext(i);return n.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}const o={};function s({components:e,children:t,disableParentContext:r}){let s;return s=r?"function"==typeof e?e({}):e||o:a(e),n.createElement(i.Provider,{value:s},t)}}}]);