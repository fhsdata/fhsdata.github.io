"use strict";(self.webpackChunkreact_native_website=self.webpackChunkreact_native_website||[]).push([[807],{77604:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"0.73","label":"0.73","banner":null,"badge":false,"noIndex":false,"className":"docs-version-0.73","isLast":true,"docsSidebars":{"docs":[{"type":"category","label":"The Basics","items":[{"type":"link","label":"Introduction","href":"/docs/getting-started","docId":"getting-started","unlisted":false},{"type":"link","label":"Core Components and Native Components","href":"/docs/intro-react-native-components","docId":"intro-react-native-components","unlisted":false},{"type":"link","label":"React Fundamentals","href":"/docs/intro-react","docId":"intro-react","unlisted":false},{"type":"link","label":"Handling Text Input","href":"/docs/handling-text-input","docId":"handling-text-input","unlisted":false},{"type":"link","label":"Using a ScrollView","href":"/docs/using-a-scrollview","docId":"using-a-scrollview","unlisted":false},{"type":"link","label":"Using List Views","href":"/docs/using-a-listview","docId":"using-a-listview","unlisted":false},{"type":"link","label":"Troubleshooting","href":"/docs/troubleshooting","docId":"troubleshooting","unlisted":false},{"type":"link","label":"Platform-Specific Code","href":"/docs/platform-specific-code","docId":"platform-specific-code","unlisted":false},{"type":"link","label":"More Resources","href":"/docs/more-resources","docId":"more-resources","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Environment setup","items":[{"type":"link","label":"Setting up the development environment","href":"/docs/environment-setup","docId":"environment-setup","unlisted":false},{"type":"link","label":"Integration with Existing Apps","href":"/docs/integration-with-existing-apps","docId":"integration-with-existing-apps","unlisted":false},{"type":"link","label":"Integration with an Android Fragment","href":"/docs/integration-with-android-fragment","docId":"integration-with-android-fragment","unlisted":false},{"type":"link","label":"Building For TV Devices","href":"/docs/building-for-tv","docId":"building-for-tv","unlisted":false},{"type":"link","label":"Out-of-Tree Platforms","href":"/docs/out-of-tree-platforms","docId":"out-of-tree-platforms","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Workflow","items":[{"type":"link","label":"Running On Device","href":"/docs/running-on-device","docId":"running-on-device","unlisted":false},{"type":"link","label":"Fast Refresh","href":"/docs/fast-refresh","docId":"fast-refresh","unlisted":false},{"type":"link","label":"Metro","href":"/docs/metro","docId":"metro","unlisted":false},{"type":"link","label":"Using Libraries","href":"/docs/libraries","docId":"libraries","unlisted":false},{"type":"link","label":"Using TypeScript","href":"/docs/typescript","docId":"typescript","unlisted":false},{"type":"link","label":"Upgrading to new versions","href":"/docs/upgrading","docId":"upgrading","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"UI & Interaction","items":[{"type":"link","label":"Style","href":"/docs/style","docId":"style","unlisted":false},{"type":"link","label":"Height and Width","href":"/docs/height-and-width","docId":"height-and-width","unlisted":false},{"type":"link","label":"Layout with Flexbox","href":"/docs/flexbox","docId":"flexbox","unlisted":false},{"type":"link","label":"Images","href":"/docs/images","docId":"images","unlisted":false},{"type":"link","label":"Color Reference","href":"/docs/colors","docId":"colors","unlisted":false},{"type":"category","label":"Interaction","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"Handling Touches","href":"/docs/handling-touches","docId":"handling-touches","unlisted":false},{"type":"link","label":"Navigating Between Screens","href":"/docs/navigation","docId":"navigation","unlisted":false},{"type":"link","label":"Animations","href":"/docs/animations","docId":"animations","unlisted":false},{"type":"link","label":"Gesture Responder System","href":"/docs/gesture-responder-system","docId":"gesture-responder-system","unlisted":false}]},{"type":"category","label":"Connectivity","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"Networking","href":"/docs/network","docId":"network","unlisted":false},{"type":"link","label":"Security","href":"/docs/security","docId":"security","unlisted":false}]},{"type":"category","label":"Inclusion","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"Accessibility","href":"/docs/accessibility","docId":"accessibility","unlisted":false}]}],"collapsed":true,"collapsible":true},{"type":"category","label":"Debugging","items":[{"type":"link","label":"Debugging Basics","href":"/docs/debugging","docId":"debugging","unlisted":false},{"type":"link","label":"React DevTools","href":"/docs/react-devtools","docId":"react-devtools","unlisted":false},{"type":"link","label":"Native Debugging","href":"/docs/native-debugging","docId":"native-debugging","unlisted":false},{"type":"link","label":"Debugging Release Builds","href":"/docs/debugging-release-builds","docId":"debugging-release-builds","unlisted":false},{"type":"link","label":"Other Debugging Methods","href":"/docs/other-debugging-methods","docId":"other-debugging-methods","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Testing","items":[{"type":"link","label":"Testing","href":"/docs/testing-overview","docId":"testing-overview","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Performance","items":[{"type":"link","label":"Performance Overview","href":"/docs/performance","docId":"performance","unlisted":false},{"type":"link","label":"Speeding up your Build phase","href":"/docs/build-speed","docId":"build-speed","unlisted":false},{"type":"link","label":"Speeding Up CI Builds","href":"/docs/speeding-ci-builds","docId":"speeding-ci-builds","unlisted":false},{"type":"link","label":"Optimizing Flatlist Configuration","href":"/docs/optimizing-flatlist-configuration","docId":"optimizing-flatlist-configuration","unlisted":false},{"type":"link","label":"RAM Bundles and Inline Requires","href":"/docs/ram-bundles-inline-requires","docId":"ram-bundles-inline-requires","unlisted":false},{"type":"link","label":"Profiling","href":"/docs/profiling","docId":"profiling","unlisted":false},{"type":"link","label":"Profiling with Hermes","href":"/docs/profile-hermes","docId":"profile-hermes","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"JavaScript Runtime","items":[{"type":"link","label":"JavaScript Environment","href":"/docs/javascript-environment","docId":"javascript-environment","unlisted":false},{"type":"link","label":"Timers","href":"/docs/timers","docId":"timers","unlisted":false},{"type":"link","label":"Using Hermes","href":"/docs/hermes","docId":"hermes","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Native Modules","items":[{"type":"link","label":"Native Modules Intro","href":"/docs/native-modules-intro","docId":"native-modules-intro","unlisted":false},{"type":"link","label":"Android Native Modules","href":"/docs/native-modules-android","docId":"native-modules-android","unlisted":false},{"type":"link","label":"iOS Native Modules","href":"/docs/native-modules-ios","docId":"native-modules-ios","unlisted":false},{"type":"link","label":"Native Modules NPM Package Setup","href":"/docs/native-modules-setup","docId":"native-modules-setup","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Native Components","items":[{"type":"link","label":"Android Native UI Components","href":"/docs/native-components-android","docId":"native-components-android","unlisted":false},{"type":"link","label":"iOS Native UI Components","href":"/docs/native-components-ios","docId":"native-components-ios","unlisted":false},{"type":"link","label":"Direct Manipulation","href":"/docs/direct-manipulation","docId":"direct-manipulation","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Android and iOS guides","items":[{"type":"category","label":"Android","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"Headless JS","href":"/docs/headless-js-android","docId":"headless-js-android","unlisted":false},{"type":"link","label":"Publishing to Google Play Store","href":"/docs/signed-apk-android","docId":"signed-apk-android","unlisted":false},{"type":"link","label":"Communication between native and React Native","href":"/docs/communication-android","docId":"communication-android","unlisted":false},{"type":"link","label":"React Native Gradle Plugin","href":"/docs/react-native-gradle-plugin","docId":"react-native-gradle-plugin","unlisted":false}]},{"type":"category","label":"iOS","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"Linking Libraries","href":"/docs/linking-libraries-ios","docId":"linking-libraries-ios","unlisted":false},{"type":"link","label":"Running On Simulator","href":"/docs/running-on-simulator-ios","docId":"running-on-simulator-ios","unlisted":false},{"type":"link","label":"Communication between native and React Native","href":"/docs/communication-ios","docId":"communication-ios","unlisted":false},{"type":"link","label":"App Extensions","href":"/docs/app-extensions","docId":"app-extensions","unlisted":false},{"type":"link","label":"Publishing to Apple App Store","href":"/docs/publishing-to-app-store","docId":"publishing-to-app-store","unlisted":false}]}],"collapsed":true,"collapsible":true},{"type":"category","label":"Experimental","items":[{"type":"link","label":"About the New Architecture","href":"/docs/the-new-architecture/landing-page","docId":"the-new-architecture/landing-page","unlisted":false}],"collapsed":true,"collapsible":true}],"api":[{"type":"category","label":"APIs","items":[{"type":"link","label":"AccessibilityInfo","href":"/docs/accessibilityinfo","docId":"accessibilityinfo","unlisted":false},{"type":"link","label":"Alert","href":"/docs/alert","docId":"alert","unlisted":false},{"type":"link","label":"Animated","href":"/docs/animated","docId":"animated","unlisted":false},{"type":"link","label":"Animated.Value","href":"/docs/animatedvalue","docId":"animatedvalue","unlisted":false},{"type":"link","label":"Animated.ValueXY","href":"/docs/animatedvaluexy","docId":"animatedvaluexy","unlisted":false},{"type":"link","label":"Appearance","href":"/docs/appearance","docId":"appearance","unlisted":false},{"type":"link","label":"AppRegistry","href":"/docs/appregistry","docId":"appregistry","unlisted":false},{"type":"link","label":"AppState","href":"/docs/appstate","docId":"appstate","unlisted":false},{"type":"link","label":"DevSettings","href":"/docs/devsettings","docId":"devsettings","unlisted":false},{"type":"link","label":"Dimensions","href":"/docs/dimensions","docId":"dimensions","unlisted":false},{"type":"link","label":"Easing","href":"/docs/easing","docId":"easing","unlisted":false},{"type":"link","label":"InteractionManager","href":"/docs/interactionmanager","docId":"interactionmanager","unlisted":false},{"type":"link","label":"Keyboard","href":"/docs/keyboard","docId":"keyboard","unlisted":false},{"type":"link","label":"LayoutAnimation","href":"/docs/layoutanimation","docId":"layoutanimation","unlisted":false},{"type":"link","label":"Linking","href":"/docs/linking","docId":"linking","unlisted":false},{"type":"link","label":"PanResponder","href":"/docs/panresponder","docId":"panresponder","unlisted":false},{"type":"link","label":"PixelRatio","href":"/docs/pixelratio","docId":"pixelratio","unlisted":false},{"type":"link","label":"Platform","href":"/docs/platform","docId":"platform","unlisted":false},{"type":"link","label":"PlatformColor","href":"/docs/platformcolor","docId":"platformcolor","unlisted":false},{"type":"link","label":"RootTag","href":"/docs/roottag","docId":"roottag","unlisted":false},{"type":"link","label":"Share","href":"/docs/share","docId":"share","unlisted":false},{"type":"link","label":"StyleSheet","href":"/docs/stylesheet","docId":"stylesheet","unlisted":false},{"type":"link","label":"Systrace","href":"/docs/systrace","docId":"systrace","unlisted":false},{"type":"link","label":"Transforms","href":"/docs/transforms","docId":"transforms","unlisted":false},{"type":"link","label":"Vibration","href":"/docs/vibration","docId":"vibration","unlisted":false},{"type":"category","label":"Hooks","collapsed":false,"items":[{"type":"link","label":"useColorScheme","href":"/docs/usecolorscheme","docId":"usecolorscheme","unlisted":false},{"type":"link","label":"useWindowDimensions","href":"/docs/usewindowdimensions","docId":"usewindowdimensions","unlisted":false}],"collapsible":true},{"type":"category","label":"Android APIs","collapsed":false,"items":[{"type":"link","label":"BackHandler","href":"/docs/backhandler","docId":"backhandler","unlisted":false},{"type":"link","label":"PermissionsAndroid","href":"/docs/permissionsandroid","docId":"permissionsandroid","unlisted":false},{"type":"link","label":"ToastAndroid","href":"/docs/toastandroid","docId":"toastandroid","unlisted":false}],"collapsible":true},{"type":"category","label":"iOS APIs","collapsed":false,"items":[{"type":"link","label":"ActionSheetIOS","href":"/docs/actionsheetios","docId":"actionsheetios","unlisted":false},{"type":"link","label":"DynamicColorIOS","href":"/docs/dynamiccolorios","docId":"dynamiccolorios","unlisted":false},{"type":"link","label":"Settings","href":"/docs/settings","docId":"settings","unlisted":false}],"collapsible":true}],"collapsed":true,"collapsible":true}],"components":[{"type":"category","label":"Core Components","items":[{"type":"link","label":"Core Components and APIs","href":"/docs/components-and-apis","docId":"components-and-apis","unlisted":false},{"type":"link","label":"ActivityIndicator","href":"/docs/activityindicator","docId":"activityindicator","unlisted":false},{"type":"link","label":"Button","href":"/docs/button","docId":"button","unlisted":false},{"type":"link","label":"FlatList","href":"/docs/flatlist","docId":"flatlist","unlisted":false},{"type":"link","label":"Image","href":"/docs/image","docId":"image","unlisted":false},{"type":"link","label":"ImageBackground","href":"/docs/imagebackground","docId":"imagebackground","unlisted":false},{"type":"link","label":"KeyboardAvoidingView","href":"/docs/keyboardavoidingview","docId":"keyboardavoidingview","unlisted":false},{"type":"link","label":"Modal","href":"/docs/modal","docId":"modal","unlisted":false},{"type":"link","label":"Pressable","href":"/docs/pressable","docId":"pressable","unlisted":false},{"type":"link","label":"RefreshControl","href":"/docs/refreshcontrol","docId":"refreshcontrol","unlisted":false},{"type":"link","label":"ScrollView","href":"/docs/scrollview","docId":"scrollview","unlisted":false},{"type":"link","label":"SectionList","href":"/docs/sectionlist","docId":"sectionlist","unlisted":false},{"type":"link","label":"StatusBar","href":"/docs/statusbar","docId":"statusbar","unlisted":false},{"type":"link","label":"Switch","href":"/docs/switch","docId":"switch","unlisted":false},{"type":"link","label":"Text","href":"/docs/text","docId":"text","unlisted":false},{"type":"link","label":"TextInput","href":"/docs/textinput","docId":"textinput","unlisted":false},{"type":"link","label":"TouchableHighlight","href":"/docs/touchablehighlight","docId":"touchablehighlight","unlisted":false},{"type":"link","label":"TouchableOpacity","href":"/docs/touchableopacity","docId":"touchableopacity","unlisted":false},{"type":"link","label":"TouchableWithoutFeedback","href":"/docs/touchablewithoutfeedback","docId":"touchablewithoutfeedback","unlisted":false},{"type":"link","label":"View","href":"/docs/view","docId":"view","unlisted":false},{"type":"link","label":"VirtualizedList","href":"/docs/virtualizedlist","docId":"virtualizedlist","unlisted":false},{"type":"category","label":"Android Components","collapsed":false,"items":[{"type":"link","label":"DrawerLayoutAndroid","href":"/docs/drawerlayoutandroid","docId":"drawerlayoutandroid","unlisted":false},{"type":"link","label":"TouchableNativeFeedback","href":"/docs/touchablenativefeedback","docId":"touchablenativefeedback","unlisted":false}],"collapsible":true},{"type":"category","label":"iOS Components","collapsed":false,"items":[{"type":"link","label":"InputAccessoryView","href":"/docs/inputaccessoryview","docId":"inputaccessoryview","unlisted":false},{"type":"link","label":"SafeAreaView","href":"/docs/safeareaview","docId":"safeareaview","unlisted":false}],"collapsible":true}],"collapsed":true,"collapsible":true},{"type":"category","label":"Props","items":[{"type":"link","label":"Image Style Props","href":"/docs/image-style-props","docId":"image-style-props","unlisted":false},{"type":"link","label":"Layout Props","href":"/docs/layout-props","docId":"layout-props","unlisted":false},{"type":"link","label":"Shadow Props","href":"/docs/shadow-props","docId":"shadow-props","unlisted":false},{"type":"link","label":"Text Style Props","href":"/docs/text-style-props","docId":"text-style-props","unlisted":false},{"type":"link","label":"View Style Props","href":"/docs/view-style-props","docId":"view-style-props","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Object Types","items":[{"type":"link","label":"LayoutEvent Object Type","href":"/docs/layoutevent","docId":"layoutevent","unlisted":false},{"type":"link","label":"PressEvent Object Type","href":"/docs/pressevent","docId":"pressevent","unlisted":false},{"type":"link","label":"React Node Object Type","href":"/docs/react-node","docId":"react-node","unlisted":false},{"type":"link","label":"Rect Object Type","href":"/docs/rect","docId":"rect","unlisted":false},{"type":"link","label":"ViewToken Object Type","href":"/docs/viewtoken","docId":"viewtoken","unlisted":false}],"collapsed":true,"collapsible":true}]},"docs":{"accessibility":{"id":"accessibility","title":"Accessibility","description":"Create mobile apps accessible to assistive technology with React Native\'s suite of APIs designed to work with Android and iOS.","sidebar":"docs"},"accessibilityinfo":{"id":"accessibilityinfo","title":"AccessibilityInfo","description":"Sometimes it\'s useful to know whether or not the device has a screen reader that is currently active. The AccessibilityInfo API is designed for this purpose. You can use it to query the current state of the screen reader as well as to register to be notified when the state of the screen reader changes.","sidebar":"api"},"actionsheetios":{"id":"actionsheetios","title":"ActionSheetIOS","description":"Displays native to iOS Action Sheet component.","sidebar":"api"},"activityindicator":{"id":"activityindicator","title":"ActivityIndicator","description":"Displays a circular loading indicator.","sidebar":"components"},"alert":{"id":"alert","title":"Alert","description":"Launches an alert dialog with the specified title and message.","sidebar":"api"},"alertios":{"id":"alertios","title":"\ud83d\udea7 AlertIOS","description":"Removed. Use Alert instead."},"animated":{"id":"animated","title":"Animated","description":"The Animated library is designed to make animations fluid, powerful, and painless to build and maintain. Animated focuses on declarative relationships between inputs and outputs, configurable transforms in between, and start/stop methods to control time-based animation execution.","sidebar":"api"},"animatedvalue":{"id":"animatedvalue","title":"Animated.Value","description":"Standard value for driving animations. One Animated.Value can drive multiple properties in a synchronized fashion, but can only be driven by one mechanism at a time. Using a new mechanism (e.g. starting a new animation, or calling setValue) will stop any previous ones.","sidebar":"api"},"animatedvaluexy":{"id":"animatedvaluexy","title":"Animated.ValueXY","description":"2D Value for driving 2D animations, such as pan gestures. Almost identical API to normal Animated.Value, but multiplexed. Contains two regular Animated.Values under the hood.","sidebar":"api"},"animations":{"id":"animations","title":"Animations","description":"Animations are very important to create a great user experience. Stationary objects must overcome inertia as they start moving. Objects in motion have momentum and rarely come to a stop immediately. Animations allow you to convey physically believable motion in your interface.","sidebar":"docs"},"app-extensions":{"id":"app-extensions","title":"App Extensions","description":"App extensions let you provide custom functionality and content outside of your main app. There are different types of app extensions on iOS, and they are all covered in the App Extension Programming Guide. In this guide, we\'ll briefly cover how you may take advantage of app extensions on iOS.","sidebar":"docs"},"appearance":{"id":"appearance","title":"Appearance","description":"The Appearance module exposes information about the user\'s appearance preferences, such as their preferred color scheme (light or dark).","sidebar":"api"},"appregistry":{"id":"appregistry","title":"AppRegistry","description":"Project with Native Code Required","sidebar":"api"},"appstate":{"id":"appstate","title":"AppState","description":"AppState can tell you if the app is in the foreground or background, and notify you when the state changes.","sidebar":"api"},"asyncstorage":{"id":"asyncstorage","title":"\ud83d\udea7 AsyncStorage","description":"Removed. Use one of the community packages instead."},"backhandler":{"id":"backhandler","title":"BackHandler","description":"The Backhandler API detects hardware button presses for back navigation, lets you register event listeners for the system\'s back action, and lets you control how your application responds. It is Android-only.","sidebar":"api"},"build-speed":{"id":"build-speed","title":"Speeding up your Build phase","description":"Building your React Native app could be expensive and take several minutes of developers time.","sidebar":"docs"},"building-for-tv":{"id":"building-for-tv","title":"Building For TV Devices","description":"TV devices support has been implemented with the intention of making existing React Native applications work on Apple TV and Android TV, with few or no changes needed in the JavaScript code for the applications.","sidebar":"docs"},"button":{"id":"button","title":"Button","description":"A basic button component that should render nicely on any platform. Supports a minimal level of customization.","sidebar":"components"},"checkbox":{"id":"checkbox","title":"\ud83d\udea7 CheckBox","description":"Removed. Use one of the community packages instead."},"clipboard":{"id":"clipboard","title":"\ud83d\udea7 Clipboard","description":"Removed. Use one of the community packages instead."},"colors":{"id":"colors","title":"Color Reference","description":"Components in React Native are styled using JavaScript. Color properties usually match how CSS works on the web. General guides on the color usage on each platform could be found below:","sidebar":"docs"},"communication-android":{"id":"communication-android","title":"Communication between native and React Native","description":"In Integrating with Existing Apps guide and Native UI Components guide we learn how to embed React Native in a native component and vice versa. When we mix native and React Native components, we\'ll eventually find a need to communicate between these two worlds. Some ways to achieve that have been already mentioned in other guides. This article summarizes available techniques.","sidebar":"docs"},"communication-ios":{"id":"communication-ios","title":"Communication between native and React Native","description":"In Integrating with Existing Apps guide and Native UI Components guide we learn how to embed React Native in a native component and vice versa. When we mix native and React Native components, we\'ll eventually find a need to communicate between these two worlds. Some ways to achieve that have been already mentioned in other guides. This article summarizes available techniques.","sidebar":"docs"},"components-and-apis":{"id":"components-and-apis","title":"Core Components and APIs","description":"React Native provides a number of built-in Core Components ready for you to use in your app. You can find them all in the left sidebar (or menu above, if you are on a narrow screen). If you\'re not sure where to get started, take a look at the following categories:","sidebar":"components"},"custom-webview-android":{"id":"custom-webview-android","title":"Custom WebView","description":"While the built-in web view has a lot of features, it is not possible to handle every use-case in React Native. You can, however, extend the web view with native code without forking React Native or duplicating all the existing web view code."},"custom-webview-ios":{"id":"custom-webview-ios","title":"Custom WebView","description":"While the built-in web view has a lot of features, it is not possible to handle every use-case in React Native. You can, however, extend the web view with native code without forking React Native or duplicating all the existing web view code."},"datepickerandroid":{"id":"datepickerandroid","title":"\ud83d\udea7 DatePickerAndroid","description":"Removed. Use one of the community packages instead."},"datepickerios":{"id":"datepickerios","title":"\ud83d\udea7 DatePickerIOS","description":"Removed. Use one of the community packages instead."},"debugging":{"id":"debugging","title":"Debugging Basics","description":"Accessing the Dev Menu","sidebar":"docs"},"debugging-release-builds":{"id":"debugging-release-builds","title":"Debugging Release Builds","description":"Symbolicating a stack trace","sidebar":"docs"},"devsettings":{"id":"devsettings","title":"DevSettings","description":"The DevSettings module exposes methods for customizing settings for developers in development.","sidebar":"api"},"dimensions":{"id":"dimensions","title":"Dimensions","description":"useWindowDimensions is the preferred API for React components. Unlike Dimensions, it updates as the window\'s dimensions update. This works nicely with the React paradigm.","sidebar":"api"},"direct-manipulation":{"id":"direct-manipulation","title":"Direct Manipulation","description":"It is sometimes necessary to make changes directly to a component without using state/props to trigger a re-render of the entire subtree. When using React in the browser for example, you sometimes need to directly modify a DOM node, and the same is true for views in mobile apps. setNativeProps is the React Native equivalent to setting properties directly on a DOM node.","sidebar":"docs"},"drawerlayoutandroid":{"id":"drawerlayoutandroid","title":"DrawerLayoutAndroid","description":"React component that wraps the platform DrawerLayout (Android only). The Drawer (typically used for navigation) is rendered with renderNavigationView and direct children are the main view (where your content goes). The navigation view is initially not visible on the screen, but can be pulled in from the side of the window specified by the drawerPosition prop and its width can be set by the drawerWidth prop.","sidebar":"components"},"dynamiccolorios":{"id":"dynamiccolorios","title":"DynamicColorIOS","description":"The DynamicColorIOS function is a platform color type specific to iOS.","sidebar":"api"},"easing":{"id":"easing","title":"Easing","description":"The Easing module implements common easing functions. This module is used by Animated.timing() to convey physically believable motion in animations.","sidebar":"api"},"environment-setup":{"id":"environment-setup","title":"Setting up the development environment","description":"This page will help you install and build your first React Native app.","sidebar":"docs"},"fast-refresh":{"id":"fast-refresh","title":"Fast Refresh","description":"Fast Refresh is a React Native feature that allows you to get near-instant feedback for changes in your React components. Fast Refresh is enabled by default, and you can toggle \\"Enable Fast Refresh\\" in the React Native Dev Menu. With Fast Refresh enabled, most edits should be visible within a second or two.","sidebar":"docs"},"flatlist":{"id":"flatlist","title":"FlatList","description":"A performant interface for rendering basic, flat lists, supporting the most handy features:","sidebar":"components"},"flexbox":{"id":"flexbox","title":"Layout with Flexbox","description":"A component can specify the layout of its children using the Flexbox algorithm. Flexbox is designed to provide a consistent layout on different screen sizes.","sidebar":"docs"},"gesture-responder-system":{"id":"gesture-responder-system","title":"Gesture Responder System","description":"The gesture responder system manages the lifecycle of gestures in your app. A touch can go through several phases as the app determines what the user\'s intention is. For example, the app needs to determine if the touch is scrolling, sliding on a widget, or tapping. This can even change during the duration of a touch. There can also be multiple simultaneous touches.","sidebar":"docs"},"getting-started":{"id":"getting-started","title":"Introduction","description":"This helpful guide lays out the prerequisites for learning React Native, using these docs, and setting up your environment.","sidebar":"docs"},"handling-text-input":{"id":"handling-text-input","title":"Handling Text Input","description":"TextInput is a Core Component that allows the user to enter text. It has an onChangeText prop that takes a function to be called every time the text changed, and an onSubmitEditing prop that takes a function to be called when the text is submitted.","sidebar":"docs"},"handling-touches":{"id":"handling-touches","title":"Handling Touches","description":"Users interact with mobile apps mainly through touch. They can use a combination of gestures, such as tapping on a button, scrolling a list, or zooming on a map. React Native provides components to handle all sorts of common gestures, as well as a comprehensive gesture responder system to allow for more advanced gesture recognition, but the one component you will most likely be interested in is the basic Button.","sidebar":"docs"},"headless-js-android":{"id":"headless-js-android","title":"Headless JS","description":"Headless JS is a way to run tasks in JavaScript while your app is in the background. It can be used, for example, to sync fresh data, handle push notifications, or play music.","sidebar":"docs"},"height-and-width":{"id":"height-and-width","title":"Height and Width","description":"A component\'s height and width determine its size on the screen.","sidebar":"docs"},"hermes":{"id":"hermes","title":"Using Hermes","description":"Hermes is an open-source JavaScript engine optimized for React Native. For many apps, using Hermes will result in improved start-up time, decreased memory usage, and smaller app size when compared to JavaScriptCore.","sidebar":"docs"},"image":{"id":"image","title":"Image","description":"A React component for displaying different types of images, including network images, static resources, temporary local images, and images from local disk, such as the camera roll.","sidebar":"components"},"image-style-props":{"id":"image-style-props","title":"Image Style Props","description":"Examples","sidebar":"components"},"imagebackground":{"id":"imagebackground","title":"ImageBackground","description":"A common feature request from developers familiar with the web is background-image. To handle this use case, you can use the ` component, which has the same props as `, and add whatever children to it you would like to layer on top of it.","sidebar":"components"},"imagepickerios":{"id":"imagepickerios","title":"\ud83d\udea7 ImagePickerIOS","description":"Removed. Use one of the community packages instead."},"images":{"id":"images","title":"Images","description":"Static Image Resources","sidebar":"docs"},"improvingux":{"id":"improvingux","title":"Improving User Experience","description":"Configure text inputs"},"inputaccessoryview":{"id":"inputaccessoryview","title":"InputAccessoryView","description":"A component which enables customization of the keyboard input accessory view on iOS. The input accessory view is displayed above the keyboard whenever a TextInput has focus. This component can be used to create custom toolbars.","sidebar":"components"},"integration-with-android-fragment":{"id":"integration-with-android-fragment","title":"Integration with an Android Fragment","description":"The guide for Integration with Existing Apps details how to integrate a full-screen React Native app into an existing Android app as an Activity. To use React Native components within Fragments in an existing app requires some additional setup. The benefit of this is that it allows for a native app to integrate React Native components alongside native fragments in an Activity.","sidebar":"docs"},"integration-with-existing-apps":{"id":"integration-with-existing-apps","title":"Integration with Existing Apps","description":"React Native is great when you are starting a new mobile app from scratch. However, it also works well for adding a single view or user flow to existing native applications. With a few steps, you can add new React Native based features, screens, views, etc.","sidebar":"docs"},"interactionmanager":{"id":"interactionmanager","title":"InteractionManager","description":"InteractionManager allows long-running work to be scheduled after any interactions/animations have completed. In particular, this allows JavaScript animations to run smoothly.","sidebar":"api"},"intro-react":{"id":"intro-react","title":"React Fundamentals","description":"To understand React Native fully, you need a solid foundation in React. This short introduction to React can help you get started or get refreshed.","sidebar":"docs"},"intro-react-native-components":{"id":"intro-react-native-components","title":"Core Components and Native Components","description":"React Native lets you compose app interfaces using Native Components. Conveniently, it comes with a set of these components for you to get started with right now\u2014the Core Components!","sidebar":"docs"},"javascript-environment":{"id":"javascript-environment","title":"JavaScript Environment","description":"JavaScript Runtime","sidebar":"docs"},"keyboard":{"id":"keyboard","title":"Keyboard","description":"Keyboard module to control keyboard events.","sidebar":"api"},"keyboardavoidingview":{"id":"keyboardavoidingview","title":"KeyboardAvoidingView","description":"This component will automatically adjust its height, position, or bottom padding based on the keyboard height to remain visible while the virtual keyboard is displayed.","sidebar":"components"},"layout-props":{"id":"layout-props","title":"Layout Props","description":"More detailed examples about those properties can be found on the Layout with Flexbox page.","sidebar":"components"},"layoutanimation":{"id":"layoutanimation","title":"LayoutAnimation","description":"Automatically animates views to their new positions when the next layout happens.","sidebar":"api"},"layoutevent":{"id":"layoutevent","title":"LayoutEvent Object Type","description":"LayoutEvent object is returned in the callback as a result of component layout change, for example onLayout in View component.","sidebar":"components"},"libraries":{"id":"libraries","title":"Using Libraries","description":"This guide introduces React Native developers to finding, installing, and using third-party libraries in their apps.","sidebar":"docs"},"linking":{"id":"linking","title":"Linking","description":"Linking gives you a general interface to interact with both incoming and outgoing app links.","sidebar":"api"},"linking-libraries-ios":{"id":"linking-libraries-ios","title":"Linking Libraries","description":"Not every app uses all the native capabilities, and including the code to support all those features would impact the binary size... But we still want to support adding these features whenever you need them.","sidebar":"docs"},"metro":{"id":"metro","title":"Metro","description":"React Native uses Metro to build your JavaScript code and assets.","sidebar":"docs"},"modal":{"id":"modal","title":"Modal","description":"The Modal component is a basic way to present content above an enclosing view.","sidebar":"components"},"more-resources":{"id":"more-resources","title":"More Resources","description":"There\u2019s always more to learn: developer workflows, shipping to app stores, internationalization, security and more.","sidebar":"docs"},"native-components-android":{"id":"native-components-android","title":"Android Native UI Components","description":"There are tons of native UI widgets out there ready to be used in the latest apps - some of them are part of the platform, others are available as third-party libraries, and still more might be in use in your very own portfolio. React Native has several of the most critical platform components already wrapped, like ScrollView and TextInput, but not all of them, and certainly not ones you might have written yourself for a previous app. Fortunately, we can wrap up these existing components for seamless integration with your React Native application.","sidebar":"docs"},"native-components-ios":{"id":"native-components-ios","title":"iOS Native UI Components","description":"There are tons of native UI widgets out there ready to be used in the latest apps - some of them are part of the platform, others are available as third-party libraries, and still more might be in use in your very own portfolio. React Native has several of the most critical platform components already wrapped, like ScrollView and TextInput, but not all of them, and certainly not ones you might have written yourself for a previous app. Fortunately, we can wrap up these existing components for seamless integration with your React Native application.","sidebar":"docs"},"native-debugging":{"id":"native-debugging","title":"Native Debugging","description":"Projects with Native Code Only","sidebar":"docs"},"native-modules-android":{"id":"native-modules-android","title":"Android Native Modules","description":"Welcome to Native Modules for Android. Please start by reading the Native Modules Intro for an intro to what native modules are.","sidebar":"docs"},"native-modules-intro":{"id":"native-modules-intro","title":"Native Modules Intro","description":"Sometimes a React Native app needs to access a native platform API that is not available by default in JavaScript, for example the native APIs to access Apple or Google Pay. Maybe you want to reuse some existing Objective-C, Swift, Java or C++ libraries without having to reimplement it in JavaScript, or write some high performance, multi-threaded code for things like image processing.","sidebar":"docs"},"native-modules-ios":{"id":"native-modules-ios","title":"iOS Native Modules","description":"Welcome to Native Modules for iOS. Please start by reading the Native Modules Intro for an intro to what native modules are.","sidebar":"docs"},"native-modules-setup":{"id":"native-modules-setup","title":"Native Modules NPM Package Setup","description":"Native modules are usually distributed as npm packages, except that on top of the usual JavaScript they will include some native code per platform. To understand more about npm packages you may find this guide useful.","sidebar":"docs"},"navigation":{"id":"navigation","title":"Navigating Between Screens","description":"Mobile apps are rarely made up of a single screen. Managing the presentation of, and transition between, multiple screens is typically handled by what is known as a navigator.","sidebar":"docs"},"network":{"id":"network","title":"Networking","description":"Many mobile apps need to load resources from a remote URL. You may want to make a POST request to a REST API, or you may need to fetch a chunk of static content from another server.","sidebar":"docs"},"optimizing-flatlist-configuration":{"id":"optimizing-flatlist-configuration","title":"Optimizing Flatlist Configuration","description":"Terms","sidebar":"docs"},"other-debugging-methods":{"id":"other-debugging-methods","title":"Other Debugging Methods","description":"This page covers other JavaScript debugging methods besides what is described in Opening the Debugger. If you are using a newly created React Native or Expo app, we recommend starting there.","sidebar":"docs"},"out-of-tree-platforms":{"id":"out-of-tree-platforms","title":"Out-of-Tree Platforms","description":"React Native is not only for Android and iOS devices - our partners and the community maintain projects that bring React Native to other platforms, such as:","sidebar":"docs"},"panresponder":{"id":"panresponder","title":"PanResponder","description":"PanResponder reconciles several touches into a single gesture. It makes single-touch gestures resilient to extra touches, and can be used to recognize basic multi-touch gestures.","sidebar":"api"},"performance":{"id":"performance","title":"Performance Overview","description":"A compelling reason to use React Native instead of WebView-based tools is to achieve 60 frames per second and provide a native look and feel to your apps. Whenever feasible, we aim for React Native to handle optimizations automatically, allowing you to focus on your app without worrying about performance. However, there are certain areas where we haven\'t quite reached that level yet, and others where React Native (similar to writing native code directly) cannot determine the best optimization approach for you. In such cases, manual intervention becomes necessary. We strive to deliver buttery-smooth UI performance by default, but there may be instances where that isn\'t possible.","sidebar":"docs"},"permissionsandroid":{"id":"permissionsandroid","title":"PermissionsAndroid","description":"Project with Native Code Required","sidebar":"api"},"pixelratio":{"id":"pixelratio","title":"PixelRatio","description":"PixelRatio gives you access to the device\'s pixel density and font scale.","sidebar":"api"},"platform":{"id":"platform","title":"Platform","description":"Example","sidebar":"api"},"platform-specific-code":{"id":"platform-specific-code","title":"Platform-Specific Code","description":"When building a cross-platform app, you\'ll want to re-use as much code as possible. Scenarios may arise where it makes sense for the code to be different, for example you may want to implement separate visual components for Android and iOS.","sidebar":"docs"},"platformcolor":{"id":"platformcolor","title":"PlatformColor","description":"You can use the PlatformColor function to access native colors on the target platform by supplying the native color\u2019s corresponding string value. You pass a string to the PlatformColor function and, provided it exists on that platform, it will return the corresponding native color, which you can apply in any part of your application.","sidebar":"api"},"pressable":{"id":"pressable","title":"Pressable","description":"Pressable is a Core Component wrapper that can detect various stages of press interactions on any of its defined children.","sidebar":"components"},"pressevent":{"id":"pressevent","title":"PressEvent Object Type","description":"PressEvent object is returned in the callback as a result of user press interaction, for example onPress in Button component.","sidebar":"components"},"profile-hermes":{"id":"profile-hermes","title":"Profiling with Hermes","description":"You can visualize JavaScript\'s performance in a React Native app using Hermes. Hermes is a small and lightweight JavaScript engine optimized for running React Native (you can read more about using it with React Native here). Hermes helps improve app performance and also exposes ways to analyze the performance of the JavaScript that it runs.","sidebar":"docs"},"profiling":{"id":"profiling","title":"Profiling","description":"Use the built-in profiler to get detailed information about work done in the JavaScript thread and main thread side-by-side. Access it by selecting Perf Monitor from the Debug menu.","sidebar":"docs"},"progressbarandroid":{"id":"progressbarandroid","title":"\ud83d\udea7 ProgressBarAndroid","description":"Deprecated. Use one of the community packages instead."},"progressviewios":{"id":"progressviewios","title":"\ud83d\udea7 ProgressViewIOS","description":"Removed. Use one of the community packages instead."},"props":{"id":"props","title":"Props","description":"Most components can be customized when they are created, with different parameters. These created parameters are called props, short for properties."},"publishing-to-app-store":{"id":"publishing-to-app-store","title":"Publishing to Apple App Store","description":"The publishing process is the same as any other native iOS app, with some additional considerations to take into account.","sidebar":"docs"},"pushnotificationios":{"id":"pushnotificationios","title":"\ud83d\udea7 PushNotificationIOS","description":"Deprecated. Use one of the community packages instead."},"ram-bundles-inline-requires":{"id":"ram-bundles-inline-requires","title":"RAM Bundles and Inline Requires","description":"If you have a large app you may want to consider the Random Access Modules (RAM) bundle format, and using inline requires. This is useful for apps that have a large number of screens which may not ever be opened during a typical usage of the app. Generally it is useful to apps that have large amounts of code that are not needed for a while after startup. For instance the app includes complicated profile screens or lesser used features, but most sessions only involve visiting the main screen of the app for updates. We can optimize the loading of the bundle by using the RAM format and requiring those features and screens inline (when they are actually used).","sidebar":"docs"},"react-18-and-react-native":{"id":"react-18-and-react-native","title":"React 18 & React Native","description":"This page describes how to use React 18 with React Native using the React Native\'s New Architecture."},"react-devtools":{"id":"react-devtools","title":"React DevTools","description":"React DevTools can be used to debug the React component hierarchy within your app.","sidebar":"docs"},"react-native-gradle-plugin":{"id":"react-native-gradle-plugin","title":"React Native Gradle Plugin","description":"This guide describes how to configure the React Native Gradle Plugin (often referred as RNGP), when building your React Native application for Android.","sidebar":"docs"},"react-node":{"id":"react-node","title":"React Node Object Type","description":"A React Node is one of the following types:","sidebar":"components"},"rect":{"id":"rect","title":"Rect Object Type","description":"Rect accepts numeric pixel values to describe how far to extend a rectangular area. These values are added to the original area\'s size to expand it.","sidebar":"components"},"refreshcontrol":{"id":"refreshcontrol","title":"RefreshControl","description":"This component is used inside a ScrollView or ListView to add pull to refresh functionality. When the ScrollView is at scrollY: 0, swiping down triggers an onRefresh event.","sidebar":"components"},"roottag":{"id":"roottag","title":"RootTag","description":"RootTag is an opaque identifier assigned to the native root view of your React Native surface \u2014 i.e. the ReactRootView or RCTRootView instance for Android or iOS respectively. In short, it is a surface identifier.","sidebar":"api"},"running-on-device":{"id":"running-on-device","title":"Running On Device","description":"It\'s always a good idea to test your app on an actual device before releasing it to your users. This document will guide you through the necessary steps to run your React Native app on a device and to get it ready for production.","sidebar":"docs"},"running-on-simulator-ios":{"id":"running-on-simulator-ios","title":"Running On Simulator","description":"Starting the simulator","sidebar":"docs"},"safeareaview":{"id":"safeareaview","title":"SafeAreaView","description":"The purpose of SafeAreaView is to render content within the safe area boundaries of a device. It is currently only applicable to iOS devices with iOS version 11 or later.","sidebar":"components"},"scrollview":{"id":"scrollview","title":"ScrollView","description":"Component that wraps platform ScrollView while providing integration with touch locking \\"responder\\" system.","sidebar":"components"},"sectionlist":{"id":"sectionlist","title":"SectionList","description":"A performant interface for rendering sectioned lists, supporting the most handy features:","sidebar":"components"},"security":{"id":"security","title":"Security","description":"Security is often overlooked when building apps. It is true that it is impossible to build software that is completely impenetrable\u2014we\u2019ve yet to invent a completely impenetrable lock (bank vaults do, after all, still get broken into). However, the probability of falling victim to a malicious attack or being exposed for a security vulnerability is inversely proportional to the effort you\u2019re willing to put in to protecting your application against any such eventuality. Although an ordinary padlock is pickable, it is still much harder to get past than a cabinet hook!","sidebar":"docs"},"segmentedcontrolios":{"id":"segmentedcontrolios","title":"\ud83d\udea7 SegmentedControlIOS","description":"Removed from React Native. Use one of the community packages instead."},"settings":{"id":"settings","title":"Settings","description":"Settings serves as a wrapper for NSUserDefaults, a persistent key-value store available only on iOS.","sidebar":"api"},"shadow-props":{"id":"shadow-props","title":"Shadow Props","description":"Props","sidebar":"components"},"share":{"id":"share","title":"Share","description":"Example","sidebar":"api"},"signed-apk-android":{"id":"signed-apk-android","title":"Publishing to Google Play Store","description":"Android requires that all apps be digitally signed with a certificate before they can be installed. In order to distribute your Android application via Google Play store it needs to be signed with a release key that then needs to be used for all future updates. Since 2017 it is possible for Google Play to manage signing releases automatically thanks to App Signing by Google Play functionality. However, before your application binary is uploaded to Google Play it needs to be signed with an upload key. The Signing Your Applications page on Android Developers documentation describes the topic in detail. This guide covers the process in brief, as well as lists the steps required to package the JavaScript bundle.","sidebar":"docs"},"slider":{"id":"slider","title":"\ud83d\udea7 Slider","description":"Deprecated. Use one of the community packages instead."},"speeding-ci-builds":{"id":"speeding-ci-builds","title":"Speeding Up CI Builds","description":"You or your company may have set up a Continuous Integration (CI) environment to test your React Native application.","sidebar":"docs"},"state":{"id":"state","title":"State","description":"There are two types of data that control a component: props and state. props are set by the parent and they are fixed throughout the lifetime of a component. For data that is going to change, we have to use state."},"statusbar":{"id":"statusbar","title":"StatusBar","description":"Component to control the app\'s status bar. The status bar is the zone, typically at the top of the screen, that displays the current time, Wi-Fi and cellular network information, battery level and/or other status icons.","sidebar":"components"},"statusbarios":{"id":"statusbarios","title":"\ud83d\udea7 StatusBarIOS","description":"Deleted. Use StatusBar for mutating the status bar."},"style":{"id":"style","title":"Style","description":"With React Native, you style your application using JavaScript. All of the core components accept a prop named style. The style names and values usually match how CSS works on the web, except names are written using camel casing, e.g. backgroundColor rather than background-color.","sidebar":"docs"},"stylesheet":{"id":"stylesheet","title":"StyleSheet","description":"A StyleSheet is an abstraction similar to CSS StyleSheets","sidebar":"api"},"switch":{"id":"switch","title":"Switch","description":"Renders a boolean input.","sidebar":"components"},"systrace":{"id":"systrace","title":"Systrace","description":"Systrace is a standard Android marker-based profiling tool (and is installed when you install the Android platform-tools package). Profiled code blocks are surrounded by start/end markers which are then visualized in a colorful chart format. Both the Android SDK and React Native framework provide standard markers that you can visualize.","sidebar":"api"},"testing-overview":{"id":"testing-overview","title":"Testing","description":"This guide introduces React Native developers to the key concepts behind testing, how to write good tests, and what kinds of tests you can incorporate into your workflow.","sidebar":"docs"},"text":{"id":"text","title":"Text","description":"A React component for displaying text.","sidebar":"components"},"text-style-props":{"id":"text-style-props","title":"Text Style Props","description":"Example","sidebar":"components"},"textinput":{"id":"textinput","title":"TextInput","description":"A foundational component for inputting text into the app via a keyboard. Props provide configurability for several features, such as auto-correction, auto-capitalization, placeholder text, and different keyboard types, such as a numeric keypad.","sidebar":"components"},"the-new-architecture/landing-page":{"id":"the-new-architecture/landing-page","title":"About the New Architecture","description":"If you are looking for the New Architecture guides, they have moved to the working group.","sidebar":"docs"},"timepickerandroid":{"id":"timepickerandroid","title":"\ud83d\udea7 TimePickerAndroid","description":"Removed. Use one of the community packages instead."},"timers":{"id":"timers","title":"Timers","description":"Timers are an important part of an application and React Native implements the browser timers.","sidebar":"docs"},"toastandroid":{"id":"toastandroid","title":"ToastAndroid","description":"React Native\'s ToastAndroid API exposes the Android platform\'s ToastAndroid module as a JS module. It provides the method show(message, duration) which takes the following parameters:","sidebar":"api"},"touchablehighlight":{"id":"touchablehighlight","title":"TouchableHighlight","description":"If you\'re looking for a more extensive and future-proof way to handle touch-based input, check out the Pressable API.","sidebar":"components"},"touchablenativefeedback":{"id":"touchablenativefeedback","title":"TouchableNativeFeedback","description":"If you\'re looking for a more extensive and future-proof way to handle touch-based input, check out the Pressable API.","sidebar":"components"},"touchableopacity":{"id":"touchableopacity","title":"TouchableOpacity","description":"If you\'re looking for a more extensive and future-proof way to handle touch-based input, check out the Pressable API.","sidebar":"components"},"touchablewithoutfeedback":{"id":"touchablewithoutfeedback","title":"TouchableWithoutFeedback","description":"If you\'re looking for a more extensive and future-proof way to handle touch-based input, check out the Pressable API.","sidebar":"components"},"transforms":{"id":"transforms","title":"Transforms","description":"Transforms are style properties that will help you modify the appearance and position of your components using 2D or 3D transformations. However, once you apply transforms, the layouts remain the same around the transformed component hence it might overlap with the nearby components. You can apply margin to the transformed component, the nearby components or padding to the container to prevent such overlaps.","sidebar":"api"},"troubleshooting":{"id":"troubleshooting","title":"Troubleshooting","description":"These are some common issues you may run into while setting up React Native. If you encounter something that is not listed here, try searching for the issue in GitHub.","sidebar":"docs"},"tutorial":{"id":"tutorial","title":"Learn the Basics","description":"React Native is like React, but it uses native components instead of web components as building blocks. So to understand the basic structure of a React Native app, you need to understand some of the basic React concepts, like JSX, components, state, and props. If you already know React, you still need to learn some React Native specific stuff, like the native components. This tutorial is aimed at all audiences, whether you have React experience or not."},"typescript":{"id":"typescript","title":"Using TypeScript","description":"TypeScript is a language which extends JavaScript by adding type definitions. New React Native projects target TypeScript by default, but also support JavaScript and Flow.","sidebar":"docs"},"upgrading":{"id":"upgrading","title":"Upgrading to new versions","description":"Upgrading to new versions of React Native will give you access to more APIs, views, developer tools and other goodies. Upgrading requires a small amount of effort, but we try to make it straightforward for you.","sidebar":"docs"},"usecolorscheme":{"id":"usecolorscheme","title":"useColorScheme","description":"The useColorScheme React hook provides and subscribes to color scheme updates from the Appearance module. The return value indicates the current user preferred color scheme. The value may be updated later, either through direct user action (e.g. theme selection in device settings) or on a schedule (e.g. light and dark themes that follow the day/night cycle).","sidebar":"api"},"usewindowdimensions":{"id":"usewindowdimensions","title":"useWindowDimensions","description":"useWindowDimensions automatically updates all of its values when screen size or font scale changes. You can get your application window\'s width and height like so:","sidebar":"api"},"using-a-listview":{"id":"using-a-listview","title":"Using List Views","description":"React Native provides a suite of components for presenting lists of data. Generally, you\'ll want to use either FlatList or SectionList.","sidebar":"docs"},"using-a-scrollview":{"id":"using-a-scrollview","title":"Using a ScrollView","description":"The ScrollView is a generic scrolling container that can contain multiple components and views. The scrollable items can be heterogeneous, and you can scroll both vertically and horizontally (by setting the horizontal property).","sidebar":"docs"},"vibration":{"id":"vibration","title":"Vibration","description":"Vibrates the device.","sidebar":"api"},"view":{"id":"view","title":"View","description":"The most fundamental component for building a UI, View is a container that supports layout with flexbox, style, some touch handling, and accessibility controls. View maps directly to the native view equivalent on whatever platform React Native is running on, whether that is a UIView, `, android.view`, etc.","sidebar":"components"},"view-style-props":{"id":"view-style-props","title":"View Style Props","description":"Example","sidebar":"components"},"viewtoken":{"id":"viewtoken","title":"ViewToken Object Type","description":"ViewToken object is returned as one of properties in the onViewableItemsChanged callback, for example in FlatList component. It is exported by ViewabilityHelper.js.","sidebar":"components"},"virtualizedlist":{"id":"virtualizedlist","title":"VirtualizedList","description":"Base implementation for the more convenient ` and  components, which are also better documented. In general, this should only really be used if you need more flexibility than FlatList` provides, e.g. for use with immutable data instead of plain arrays.","sidebar":"components"}}}')}}]);